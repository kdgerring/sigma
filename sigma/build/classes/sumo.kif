(holds format en agent "%1 is %n an &%agent of %2")
(holds format en attribute "%2 is %n an &%attribute of %1")
(holds format en believes "%1 %n{doesn't} &%believe%p{s} %2")
(holds format en between "%2 is %n &%between %1 and %3")
(holds format en capability "%3 is %n &%capable to do %1 in role %2")
(holds format en causes "%1 %n{doesn't} &%cause%p{s} %2")
(holds format en closedOn "%1 is %n &%closed on %2")
(holds format en component "%1 is %n a &%component of %2")
(holds format en conditionalProbability "&%probability of %1 provided that %2 holds is %n %3")
(holds format en considers "%1 %n{doesn't} &%consider%p{s} %2")
(holds format en containsInformation "%1 %n{doesn't} &%contain%p{s} information %2")
(holds format en copy "%1 is %n an exact &%copy of %2")
(holds format en decreasesLikelihood "%1 %n{doesn't} &%decrease%p{s} likelihood of %2")
(holds format en desires "%1 %n{doesn't} &%desire%p{s} %2")
(holds format en destination "%1 %n{doesn't} %n &%end%p{s} at %2")
(holds format en distributes "%1 is %n &%distributive over %2")
(holds format en documentation "%2")
(holds format en equivalenceRelationOn "%1 is %n &%equivalence relation on %2")
(holds format en exactlyLocated "%1 is %n &%exactly located in %2")
(holds format en experiencer "%2 %n{doesn't} &%experience%p{s} %1")
(holds format en exploits "%1 %n{doesn't} &%exploit%p{s} %2")
(holds format en faces "%1 faces %2")
(holds format en greaterThan "%1 is %n &%greater than %2")
(holds format en greaterThanOrEqualTo "%1 is %n &%greater than or equal to %2")
(holds format en hasPurpose "%1 has %n &%purpose %2")
(holds format en hasPurposeForAgent "%1 has &n &%purpose %2 for %3")
(holds format en hasSkill "%2 has &n &%skill to do %1")
(holds format en holdsDuring "%2 %n{doesn't} hold%p{s} &%during %1")
(holds format en holdsRight "%2 %p{has} %n{doesn't have} the &%right to perform %1")
(holds format en increasesLikelihood "%1 %n{doesn't} &%increase%p{s} likelihood of %2")
(holds format en independentProbability "probability of %1 and %2 is %n &%independent")
(holds format en initialList "%1 %n{doesn't} &%start%p{s} %2")
(holds format en inList "%1 is %n a &%member of %2")
(holds format en inScopeOfInterest "%1 is %n &%interested in %2")
(holds format en instrument "%2 is %n an &%instrument for %1")
(holds format en irreflexiveOn "%1 is %n &%irreflexive on %2")
(holds format en knows "%1 %n{doesn't} &%know%p{s} %2")
(holds format en lessThan "%1 is %n &%less than %2")
(holds format en lessThanOrEqualTo "%1 is %n &%less than or equal to %2")
(holds format en located "%1 is %n &%located at %2")
(holds format en manner "%1 is performed in the manner %2")
(holds format en material "%1 is %n &%made of %2")
(holds format en member "%1 is %n a &%member of %2")
(holds format en needs "%1 %n{doesn't} &%need%p{s} %2")
(holds format en notices "%1 %n{doesn't} &%notice%p{s} %2")
(holds format en origin "%1 %n{doesn't} &%origin%p{s} at %2")
(holds format en part "%1 is %n a &%part of %2")
(holds format en partialOrderingOn "%1 is %n &%partial ordering on %2")
(holds format en partlyLocated "%1 is %n &%partly located in %2")
(holds format en patient "%2 is %n a &%patient of %1")
(holds format en piece "%1 is %n a &%piece of %2")
(holds format en possesses "%1 %n{doesn't} &%posess%p{es} %2")
(holds format en prefers "%1 %n{doesn't} &%prefer%p{s} %2 over %3")
(holds format en probability "&%probability of %1 is %n %2")
(holds format en properPart "%1 is %n a &%proper &%part of %2")
(holds format en property "%1 has %n an &%attribute %2")
(holds format en reflexiveOn "%1 is %n &%reflexive on %2")
(holds format en resource "%2 is %n a &%resource for %1")
(holds format en result "%2 is %n a &%result of %1")
(holds format en subCollection "%1 is %n a proper &%sub-collection of %2")
(holds format en subProposition "%1 is a &%sub-proposition of %2")
(holds format en subList "%1 is %n a &%sublist of %2")
(holds format en time "%1 %n{doesn't} exist%p{s} &%during %2")
(holds format en totalOrderingOn "%1 is %n &%total &%ordering on %2")
(holds format en trichotomizingOn "%1 is %n &%trichotomizing on %2")
(holds format en true "%1 &%is %n %2")
(holds format en wants "%1 %n{doesn't} &%want%p{s} %2")
(holds format en confersObligation "%2 &%obligates %3 to perform task of the type %1")
(holds format en confersRight "%2 &%allows %3 to perform task of the type %1")
(holds format en crosses "%1 &%crosses %2")
(holds format en equivalentContentClass "%1 is &%equivalent to %2")
(holds format en equivalentContentInstance "%1 is &%equivalent to %2")
(holds format en expressedInLanguage "%1 is &%expressed in language %2")
(holds format en holdsObligation "%2 is &%obliged to perform tasks of type %1")
(holds format en inhibits "%1 &%inhibits %2")
(holds format en penetrates "%1 &%penetrates %2")
(holds format en precondition "%1 is a &%precondition of %2")
(holds format en prevents "%1 &%prevents the occurrence of %2")
(holds format en realization "%1 &%expresses the content of %2")
(holds format en refers "%1 includes a &%reference to %2")
(holds format en represents "%1 &%expresses %2")
(holds format en representsForAgent "%3 &%uses %1 to stand for %2")
(holds format en representsInLanguage "%1 &%represents %2 in the language %3")
(holds format en subPlan "%1 is a &%sub-plan of %2")
(holds format en subsumesContentClass "%1 &%subsumes the content of %2")
(holds format en subsumesContentInstance "%1 &%subsumes the content of %2")
(holds format en traverses "%1 &%traverses %2")
(holds format en uses "%2 &%uses %1")
(holds format en AbstractionFn "the &%description of %1")
(holds format en BackFn "the &%back of %1")
(holds format en ExtensionFn "the &%class corresponding to %1")
(holds format en FrontFn "the &%front of %1")
(holds format en ListFn "
    (%*[,])")
(holds format en ListOrderFn "%2th &%element of %1")
(holds format en ListLengthFn "&%length of %1")
(holds format en ListConcatenateFn "the &%list composed of %1 and %2")
(holds format en PropertyFn "&%belongings of %1")
(holds format en ProbabilityFn "the &%probability of %1")
(holds format en WhereFn "the place &%where %1 was at %2")
(holds format en contraryAttribute "%1 is %n &%opposed to %2")
(holds format en disjoint "%1 is %n &%disjoint from %2")
(holds format en disjointDecomposition "%1 is %n &%disjointly &%decomposed into %*{2-}[,]")
(holds format en disjointRelation "%1 and %2 are %n &%disjoint")
(holds format en domain "the number %2 argument of %1 is %n an &%instance of %3")
(holds format en domainSubclass "the number %2 argument of %1 is %n a &%subclass of %3")
(holds format en entails "%1 %n{doesn't} &%entail%p{s} %2")
(holds format en equal "%1 is %n &%equal to %2")
(holds format en exhaustiveDecomposition "%1 is %n &%covered by %*{2-}[,]")
(holds format en holds "%1
    (%*{2-}[,]) %n{doesn't} &%hold%p{s}")
(holds format en immediateInstance "%1 is an &%immediate instance of %2")
(holds format en immediateSubclass "%1 is an &%immediate subclass of %2")
(holds format en instance "%1 is %n an &%instance of %2")
(holds format en inverse "%1 is %n an &%inverse of %2")
(holds format en name "%2 has %n &%name %1")
(holds format en partition "%1 is %n &%exhaustively &%partitioned into %*{2-}[,]")
(holds format en range "&%range of %1 is %n an instance of %2")
(holds format en relatedInternalConcept "%1 is %n &%internally related to %2")
(holds format en subAttribute "%1 is %n a &%subattribute of %2")
(holds format en subclass "%1 is %n a &%subclass of %2")
(holds format en subrelation "%1 is %n a &%subrelation of %2")
(holds format en successorAttribute "%1 is %n an immediate &%successor &%attribute of %2")
(holds format en successorAttributeClosure "%1 is %n a &%successor &%attribute of %2")
(holds format en valence "%1 %p{%&has} %n{doesn't %&have} %2 &%argument
    (s)")
(holds format en rangeSubclass "the values returned by %1 are &%subclasses of %2")
(holds format en relatedExternalConcept "the concept of %1 in language %3 is &%related to the concept of %2")
(holds format en subsumedExternalConcept "the concept of %1 in language %3 is &%subsumed by the concept of %2")
(holds format en subsumingExternalConcept "the concept of %1 in language %3 &%subsumes the concept of %2")
(holds format en synonymousExternalConcept "the concept of %1 in language %3 is &%synonymous with the concept of %2")
(holds format en uniqueIdentifier "the &%unique identifier of %1 is %2")
(holds format en DomainFn "&%domain of %1")
(holds format en RangeFn "&%range of %1")
(holds format en AssignmentFn "%1
    (%*{2-}[,])")
(holds format en PowerSetFn "all &%subclasses of %1")
(holds format en bottom "the &%bottom of %2 is %1")
(holds format en connected "%1 is %n &%connected to %2")
(holds format en connects "%1 &%connects %2 and %3")
(holds format en meetsSpatially "%1 %n{doesn't} &%meet%p{s} %2")
(holds format en overlapsSpatially "%1 %n{doesn't} &%overlap%p{s} with %2")
(holds format en overlapsPartially "%1 %n{doesn't} &%partially &%overlap%p{s} with %2")
(holds format en superficialPart "%1 is %n a &%superficial part of %2")
(holds format en surface "%1 is %n a &%surface of %2")
(holds format en interiorPart "%1 is %n a &%interior part of %2")
(holds format en hole "%1 is %n a &%hole in %2")
(holds format en fills "%1 %n{doesn't} &%fill%p{s} %2")
(holds format en completelyFills "%1 %n{doesn't} &%completely &%fill%p{s} %2")
(holds format en partiallyFills "%1 %n{doesn't} &%partially &%fill%p{s} %2")
(holds format en properlyFills "%1 %n{doesn't} &%properly &%fill%p{s} %2")
(holds format en side "a &%side of %2 is %1")
(holds format en top "the &%top of %2 is %1")
(holds format en MereologicalSumFn "the &%union of the parts of %1 and %2")
(holds format en MereologicalProductFn "the &%intersection of the parts of %1 and %2")
(holds format en MereologicalDifferenceFn "the &%difference between the parts of %1 and %2")
(holds format en PrincipalHostFn "the &%host of the hole %1")
(holds format en SkinFn "the &%surface of the hole %1")
(holds format en duration "&%duration of %1 is %n %2")
(holds format en frequency "%1 &%occurs every %2")
(holds format en temporalPart "%1 is %n a &%part of %2")
(holds format en starts "%1 %n{doesn't} &%start%p{s} %2")
(holds format en finishes "%1 %n{doesn't} &%finish%p{es} %2")
(holds format en before "%1 %n{doesn't} happen%{s} &%before %2")
(holds format en beforeOrEqual "%1 %n{doesn't} &%happen%{s} before or at %2")
(holds format en temporallyBetween "%2 is %n &%between %1 and %3")
(holds format en temporallyBetweenOrEqual "%2 is %n &%between or at %1 and %3")
(holds format en overlapsTemporally "%2 %n{doesn't} &%overlap%p{s} %1")
(holds format en during "%1 %n{doesn't} take%p{s} place &%during %2")
(holds format en meetsTemporally "%1 %n{doesn't} &%meet%p{s} %2")
(holds format en earlier "%1 %n{doesn't} happen%p{s} &%earlier than %2")
(holds format en cooccur "%1 %n{doesn't} &%occur%p{s} at the same time as %2")
(holds format en date "&%date of %1 is %n %2")
(holds format en TemporalCompositionFn "&%decomposition of %1 into %3 %2s")
(holds format en BeginFn "the &%beginning of %1")
(holds format en EndFn "the &%end of %1")
(holds format en TimeIntervalFn "&%interval between %1 and %2")
(holds format en WhenFn "the &%time of existence of %1")
(holds format en PastFn "&%before %1")
(holds format en ImmediatePastFn "immediately &%before %1")
(holds format en FutureFn "&%after %1")
(holds format en ImmediateFutureFn "immediately &%after %1")
(holds format en YearFn "the &%year %1")
(holds format en MonthFn "the &%month %1")
(holds format en DayFn "the &%day %1")
(holds format en HourFn "the &%hour %1")
(holds format en MinuteFn "the &%minute %1")
(holds format en SecondFn "the &%second %1")
(holds format en subset "%1 is %n a &%subset of %2")
(holds format en element "%1 is %n an &%element of %2")
(holds format en UnionFn "the &%union of %1 and %2")
(holds format en IntersectionFn "the &%union of %1 and %2")
(holds format en RelativeComplementFn "the &%difference between %1 and %2")
(holds format en ComplementFn "the &%complement of %1")
(holds format en GeneralizedUnionFn "the &%union of all the elements of %1")
(holds format en GeneralizedIntersectionFn "the &%intersection of all the elements of %1")
(holds format en CardinalityFn "the number of &%instances in %1")
(holds format en KappaFn "the &%class described by %1")
(holds format en developmentalForm "the &%developmental &%form of %1 is %2")
(holds format en inhabits "%1 %n{doesn't} &%live%p{s} in %2")
(holds format en parent "%2 is %n a &%parent of %1")
(holds format en mother "%2 is %n a &%mother of %1")
(holds format en father "%2 is %n a &%father of %1")
(holds format en sibling "%1 is %n a &%sibling of %2")
(holds format en authors "%1 is the &%author of %2")
(holds format en editor "%1 is the &%editor of %2")
(holds format en publishes "%1 &%publishes %2")
(holds format en version "%1 is %n a &%version of %2")
(holds format en engineeringSubcomponent "%1 is a &%component of %2")
(holds format en connectedEngineeringComponents "%1 is &%connected to %2")
(holds format en connectsEngineeringComponents "%1 &%connects %2 and %3")
(holds format en familyRelation "%1 and %2 are &%related")
(holds format en employs "%1 %n{doesn't} &%employ%p{s} %2")
(holds format en subOrganizations "%1 is a &%part of the organization %2")
(holds format en occupiesPosition "%1 holds the &%position of %2 in %3")
(holds format en citizen "%1 is a &%citizen of %2")
(holds format en EditionFn "&%edition %2 of %1")
(holds format en SeriesVolumeFn "volume %2 in the &%series %1")
(holds format en PeriodicalIssueFn "the &%periodical number %2 of %1")
(holds format en OrganizationFn "the legal &%organizational entity of %1")
(holds format en subProcess "%1 is %n a &%subprocess of %2")
(holds format en path "%2 is %n &%path along with %1 occurs")
(holds format en orientation "%1 is %n %3 to %2")
(holds format en direction "entities in the process %1 are &%moving %2")
(holds format en birthTime "%1 is %n &%born at %2")
(holds format en deathTime "%1 %n{doesn't} &%die%p{s} at %2")
(holds format en modalAttribute "the statement %1 has the &%modal &%force of %2")
(holds format en RelativeTimeFn "the time %1 in zone %2")
(holds format en measure "the &%measure of %1 is %n %2")
(holds format en altitude "the &%altitude of %1 is %2")
(holds format en age "the &%age of %1 is %n %2")
(holds format en length "the &%length of %1 is %n %2")
(holds format en width "the &%width of %1 is %n %2")
(holds format en diameter "the &%diameter of %1 is %n %2")
(holds format en height "the &%height of %1 is %n %2")
(holds format en distance "the &%distance between %1 and %2 is %3")
(holds format en larger "%1 is %n &%larger than %2")
(holds format en smaller "%1 is %n &%smaller than %2")
(holds format en monetaryValue "&%value of %1 is %n %2")
(holds format en MeasureFn "%1 %2
    (s)")
(holds format en KiloFn "1 &%thousand %1s")
(holds format en MegaFn "1 &%million %1s")
(holds format en GigaFn "1 &%billion %1s ")
(holds format en TeraFn "1 &%trillion %1s")
(holds format en MilliFn "one &%thousandth of a %1")
(holds format en MicroFn "one &%millionth of a %1")
(holds format en NanoFn "one &%billionth of a %1")
(holds format en PicoFn "one &%trillionth of a %1")
(holds format en IntervalFn "the &%interval from %1 to %2")
(holds format en RecurrentTimeIntervalFn "the &%recurring &%period from %1 to %2")
(holds format en MagnitudeFn "the &%magnitude of %1")
(holds format en DensityFn "%1 &%per %2")
(holds format en SpeedFn "%1 &%per %2")
(holds format en VelocityFn "%1 &%per %2 in %3 in the direction %4")
(holds format en WealthFn "&%value of belongings of %1")
(holds format en identityElement "%2 is %n an &%identity element of %1")
(holds format en MultiplicationFn "%*[*]")
(holds format en AdditionFn "
    (%*[+])")
(holds format en SubtractionFn "
    (%*[-])")
(holds format en DivisionFn "%*[/]")
(holds format en AbsoluteValueFn "the &%absolute &%value of %1")
(holds format en ArcCosineFn "the &%arccosine of %1")
(holds format en ArcSineFn "the &%arcsine of %1")
(holds format en ArcTangentFn "the &%arctangent of %1")
(holds format en CeilingFn "the &%ceiling of %1")
(holds format en CosineFn "the &%cosine of %1")
(holds format en DenominatorFn "the &%denominator of %1")
(holds format en ExponentiationFn "%1 raised to the &%power %2")
(holds format en FloorFn "the &%largest integer less than or equal to %1")
(holds format en GreatestCommonDivisorFn "the &%greatest common divisor of %*[and]")
(holds format en ImaginaryPartFn "the &%imaginary part of %1")
(holds format en IntegerSquareRootFn "the &%integer square root of %1")
(holds format en LeastCommonMultipleFn "the &%least common multiple of %*[and]")
(holds format en LogFn "the &%log of %1")
(holds format en MaxFn "the &%larger of %1 and %2")
(holds format en MinFn "the &%smaller of %1 and %2")
(holds format en NumeratorFn "the &%numerator of %1")
(holds format en RationalNumberFn "the &%rational representation of %1")
(holds format en RealNumberFn "the &%real part of %1")
(holds format en ReciprocalFn "the &%reciprocal of %1")
(holds format en RemainderFn "%1 &%mod %2")
(holds format en RoundFn "%1 &%rounded")
(holds format en SignumFn "the &%sign of %1")
(holds format en SineFn "the &%sine of %1")
(holds format en SquareRootFn "the &%square root of %1")
(holds format en TangentFn "the &%tangent of %1")
(holds format en IdentityFn "%1")
(holds format en SuccessorFn "
    (%1+1)")
(holds format en PredecessorFn "
    (%1+2)")
(holds format en links "%3 %n{doesn't} &%link%p{s} %1 and %2")
(holds format en graphPart "%1 is %n a &%part of %2")
(holds format en subGraph "%1 is %n a &%subgraph of %2")
(holds format en pathLength "the &%length of %1 is %n %2")
(holds format en arcWeight "the &%value of %1 is %2")
(holds format en InitialNodeFn "the &%starting node of %1")
(holds format en TerminalNodeFn "the &%terminal node of %1")
(holds format en BeginNodeFn "the &%beginning of %1")
(holds format en EndNodeFn "the &%end of %1")
(holds format en PathWeightFn "the &%value of %1")
(holds format en MinimalWeightedPathFn "the &%lowest &%cost &%path between %1 and %2")
(holds format en MaximalWeightedPathFn "the &%highest &%cost &%path between %1 and %2")
(holds format en GraphPathFn "the &%set of paths between %1 and %2")
(holds format en CutSetFn "the &%set of paths that partition %1 into two separate graphs")
(holds format en MinimalCutSetFn "the &%set of minimal paths that partition %1 into two separate graphs")
(holds instance instance BinaryPredicate)
(holds domain instance 1 Entity)
(holds domain instance 2 SetOrClass)
(holds subrelation immediateInstance instance)
(holds instance immediateInstance AsymmetricRelation)
(holds instance immediateInstance IntransitiveRelation)
(=> 
    (holds immediateInstance ?ENTITY ?CLASS) 
    (not 
        (exists
            (?SUBCLASS) 
            (and 
                (holds subclass ?SUBCLASS ?CLASS) 
                (holds instance ?ENTITY ?SUBCLASS)))))
(holds instance inverse BinaryPredicate)
(holds instance inverse IrreflexiveRelation)
(holds instance inverse IntransitiveRelation)
(holds instance inverse SymmetricRelation)
(holds domain inverse 1 BinaryRelation)
(holds domain inverse 2 BinaryRelation)
(=> 
    (holds inverse ?REL1 ?REL2) 
    (forall
        (?INST1 ?INST2) 
        (<=> 
            (holds ?REL1 ?INST1 ?INST2) 
            (holds ?REL2 ?INST2 ?INST1))))
(holds instance subclass BinaryPredicate)
(holds instance subclass PartialOrderingRelation)
(holds domain subclass 1 SetOrClass)
(holds domain subclass 2 SetOrClass)
(<=> 
    (holds subclass ?SUBCLASS ?CLASS) 
    (and 
        (holds instance ?SUBCLASS SetOrClass) 
        (holds instance ?CLASS SetOrClass) 
        (forall
            (?INST) 
            (=> 
                (holds instance ?INST ?SUBCLASS) 
                (holds instance ?INST ?CLASS)))))
(holds subrelation immediateSubclass subclass)
(holds instance immediateSubclass AsymmetricRelation)
(holds instance immediateSubclass IntransitiveRelation)
(=> 
    (holds immediateSubclass ?CLASS1 ?CLASS2) 
    (not 
        (exists
            (?CLASS3) 
            (and 
                (holds subclass ?CLASS3 ?CLASS2) 
                (holds subclass ?CLASS1 ?CLASS3) 
                (not 
                    (equal ?CLASS2 ?CLASS3)) 
                (not 
                    (equal ?CLASS1 ?CLASS3))))))
(holds instance subrelation BinaryPredicate)
(holds instance subrelation PartialOrderingRelation)
(holds domain subrelation 1 Relation)
(holds domain subrelation 2 Relation)
(=> 
    (and 
        (holds subrelation ?PRED1 ?PRED2) 
        (holds valence ?PRED1 ?NUMBER)) 
    (holds valence ?PRED2 ?NUMBER))
(=> 
    (and 
        (holds subrelation ?PRED1 ?PRED2) 
        (holds domain ?PRED2 ?NUMBER ?CLASS1)) 
    (holds domain ?PRED1 ?NUMBER ?CLASS1))
(=> 
    (and 
        (holds subrelation ?REL1 ?REL2) 
        (holds ?REL1 ?ROW_arg0)) 
    (holds ?REL2 ?ROW_arg0))
(=> 
    (and 
        (holds subrelation ?REL1 ?REL2) 
        (holds ?REL1 ?ROW_arg0 ?ROW_arg1)) 
    (holds ?REL2 ?ROW_arg0 ?ROW_arg1))
(=> 
    (and 
        (holds subrelation ?REL1 ?REL2) 
        (holds ?REL1 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
    (holds ?REL2 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2))
(=> 
    (and 
        (holds subrelation ?REL1 ?REL2) 
        (holds ?REL1 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
    (holds ?REL2 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3))
(=> 
    (and 
        (holds subrelation ?REL1 ?REL2) 
        (holds ?REL1 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
    (holds ?REL2 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4))
(=> 
    (and 
        (holds subrelation ?REL1 ?REL2) 
        (holds ?REL1 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
    (holds ?REL2 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5))
(=> 
    (and 
        (holds subrelation ?REL1 ?REL2) 
        (holds ?REL1 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
    (holds ?REL2 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6))
(=> 
    (and 
        (holds subrelation ?REL1 ?REL2) 
        (holds ?REL1 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
    (holds ?REL2 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7))
(=> 
    (and 
        (holds subrelation ?REL1 ?REL2) 
        (holds ?REL1 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
    (holds ?REL2 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8))
(=> 
    (and 
        (holds subrelation ?REL1 ?REL2) 
        (holds ?REL1 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
    (holds ?REL2 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9))
(=> 
    (and 
        (holds subrelation ?PRED1 ?PRED2) 
        (holds instance ?PRED2 ?CLASS) 
        (holds instance ?CLASS InheritableRelation)) 
    (holds instance ?PRED1 ?CLASS))
(holds instance domain TernaryPredicate)
(holds domain domain 1 Relation)
(holds domain domain 2 PositiveInteger)
(holds domain domain 3 SetOrClass)
(=> 
    (and 
        (holds domain ?REL ?NUMBER ?CLASS1) 
        (holds domain ?REL ?NUMBER ?CLASS2)) 
    (or 
        (holds subclass ?CLASS1 ?CLASS2) 
        (holds subclass ?CLASS2 ?CLASS1)))
(holds instance domainSubclass TernaryPredicate)
(holds domain domainSubclass 1 Relation)
(holds domain domainSubclass 2 PositiveInteger)
(holds domain domainSubclass 3 SetOrClass)
(=> 
    (and 
        (holds subrelation ?REL1 ?REL2) 
        (holds domainSubclass ?REL2 ?NUMBER ?CLASS1)) 
    (holds domainSubclass ?REL1 ?NUMBER ?CLASS1))
(=> 
    (and 
        (holds domainSubclass ?REL ?NUMBER ?CLASS1) 
        (holds domainSubclass ?REL ?NUMBER ?CLASS2)) 
    (or 
        (holds subclass ?CLASS1 ?CLASS2) 
        (holds subclass ?CLASS2 ?CLASS1)))
(holds instance equal BinaryPredicate)
(holds instance equal EquivalenceRelation)
(holds instance equal RelationExtendedToQuantities)
(holds domain equal 1 Entity)
(holds domain equal 2 Entity)
(=> 
    (equal ?THING1 ?THING2) 
    (forall
        (?ATTR) 
        (<=> 
            (holds property ?THING1 ?ATTR) 
            (holds property ?THING2 ?ATTR))))
(=> 
    (equal ?ATTR1 ?ATTR2) 
    (forall
        (?THING) 
        (<=> 
            (holds property ?THING ?ATTR1) 
            (holds property ?THING ?ATTR2))))
(=> 
    (equal ?THING1 ?THING2) 
    (forall
        (?CLASS) 
        (<=> 
            (holds instance ?THING1 ?CLASS) 
            (holds instance ?THING2 ?CLASS))))
(=> 
    (equal ?CLASS1 ?CLASS2) 
    (forall
        (?THING) 
        (<=> 
            (holds instance ?THING ?CLASS1) 
            (holds instance ?THING ?CLASS2))))
(=> 
    (equal ?REL1 ?REL2) 
    (forall
        (?ROW_arg0) 
        (<=> 
            (holds ?REL1 ?ROW_arg0) 
            (holds ?REL2 ?ROW_arg0))))
(=> 
    (equal ?REL1 ?REL2) 
    (forall
        (?ROW_arg0 ?ROW_arg1) 
        (<=> 
            (holds ?REL1 ?ROW_arg0 ?ROW_arg1) 
            (holds ?REL2 ?ROW_arg0 ?ROW_arg1))))
(=> 
    (equal ?REL1 ?REL2) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
        (<=> 
            (holds ?REL1 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
            (holds ?REL2 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2))))
(=> 
    (equal ?REL1 ?REL2) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
        (<=> 
            (holds ?REL1 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
            (holds ?REL2 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3))))
(=> 
    (equal ?REL1 ?REL2) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
        (<=> 
            (holds ?REL1 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
            (holds ?REL2 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4))))
(=> 
    (equal ?REL1 ?REL2) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
        (<=> 
            (holds ?REL1 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
            (holds ?REL2 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5))))
(=> 
    (equal ?REL1 ?REL2) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
        (<=> 
            (holds ?REL1 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
            (holds ?REL2 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6))))
(=> 
    (equal ?REL1 ?REL2) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
        (<=> 
            (holds ?REL1 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
            (holds ?REL2 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7))))
(=> 
    (equal ?REL1 ?REL2) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
        (<=> 
            (holds ?REL1 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
            (holds ?REL2 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8))))
(=> 
    (equal ?REL1 ?REL2) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
        (<=> 
            (holds ?REL1 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
            (holds ?REL2 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9))))
(=> 
    (equal 
        (ListFn ?ROW1_arg0) 
        (ListFn ?ROW2_arg0)) 
    (<=> 
        (holds ?ROW1_arg0) 
        (holds ?ROW2_arg0)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1)) 
    (<=> 
        (holds ?ROW1_arg0) 
        (holds ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (<=> 
        (holds ?ROW1_arg0) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (<=> 
        (holds ?ROW1_arg0) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (<=> 
        (holds ?ROW1_arg0) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (<=> 
        (holds ?ROW1_arg0) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (<=> 
        (holds ?ROW1_arg0) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (<=> 
        (holds ?ROW1_arg0) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (<=> 
        (holds ?ROW1_arg0) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (<=> 
        (holds ?ROW1_arg0) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1) 
        (ListFn ?ROW2_arg0)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1) 
        (holds ?ROW2_arg0)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1) 
        (holds ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (ListFn ?ROW2_arg0)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds ?ROW2_arg0)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (ListFn ?ROW2_arg0)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds ?ROW2_arg0)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (ListFn ?ROW2_arg0)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds ?ROW2_arg0)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (ListFn ?ROW2_arg0)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds ?ROW2_arg0)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (ListFn ?ROW2_arg0)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds ?ROW2_arg0)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (ListFn ?ROW2_arg0)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds ?ROW2_arg0)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (ListFn ?ROW2_arg0)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds ?ROW2_arg0)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (ListFn ?ROW2_arg0)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds ?ROW2_arg0)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (equal 
        (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (<=> 
        (holds ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8) ?NUMBER)))))
(=> 
    (equal ?LIST1 ?LIST2) 
    (=> 
        (and 
            (equal ?LIST1 
                (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
            (equal ?LIST2 
                (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9))) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn 
                    (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) ?NUMBER) 
                (ListOrderFn 
                    (ListFn ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9) ?NUMBER)))))
(holds instance range BinaryPredicate)
(holds instance range AsymmetricRelation)
(holds domain range 1 Function)
(holds domain range 2 SetOrClass)
(=> 
    (and 
        (holds range ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0) ?VALUE)) 
    (holds instance ?VALUE ?CLASS))
(=> 
    (and 
        (holds range ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1) ?VALUE)) 
    (holds instance ?VALUE ?CLASS))
(=> 
    (and 
        (holds range ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) ?VALUE)) 
    (holds instance ?VALUE ?CLASS))
(=> 
    (and 
        (holds range ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) ?VALUE)) 
    (holds instance ?VALUE ?CLASS))
(=> 
    (and 
        (holds range ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) ?VALUE)) 
    (holds instance ?VALUE ?CLASS))
(=> 
    (and 
        (holds range ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) ?VALUE)) 
    (holds instance ?VALUE ?CLASS))
(=> 
    (and 
        (holds range ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) ?VALUE)) 
    (holds instance ?VALUE ?CLASS))
(=> 
    (and 
        (holds range ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) ?VALUE)) 
    (holds instance ?VALUE ?CLASS))
(=> 
    (and 
        (holds range ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) ?VALUE)) 
    (holds instance ?VALUE ?CLASS))
(=> 
    (and 
        (holds range ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) ?VALUE)) 
    (holds instance ?VALUE ?CLASS))
(=> 
    (and 
        (holds subrelation ?REL1 ?REL2) 
        (holds range ?REL2 ?CLASS1)) 
    (holds range ?REL1 ?CLASS1))
(=> 
    (and 
        (holds range ?REL ?CLASS1) 
        (holds range ?REL ?CLASS2)) 
    (or 
        (holds subclass ?CLASS1 ?CLASS2) 
        (holds subclass ?CLASS2 ?CLASS1)))
(holds instance rangeSubclass BinaryPredicate)
(holds instance rangeSubclass AsymmetricRelation)
(holds domain rangeSubclass 1 Function)
(holds domainSubclass rangeSubclass 2 SetOrClass)
(=> 
    (and 
        (holds rangeSubclass ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0) ?VALUE)) 
    (holds subclass ?VALUE ?CLASS))
(=> 
    (and 
        (holds rangeSubclass ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1) ?VALUE)) 
    (holds subclass ?VALUE ?CLASS))
(=> 
    (and 
        (holds rangeSubclass ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) ?VALUE)) 
    (holds subclass ?VALUE ?CLASS))
(=> 
    (and 
        (holds rangeSubclass ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) ?VALUE)) 
    (holds subclass ?VALUE ?CLASS))
(=> 
    (and 
        (holds rangeSubclass ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) ?VALUE)) 
    (holds subclass ?VALUE ?CLASS))
(=> 
    (and 
        (holds rangeSubclass ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) ?VALUE)) 
    (holds subclass ?VALUE ?CLASS))
(=> 
    (and 
        (holds rangeSubclass ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) ?VALUE)) 
    (holds subclass ?VALUE ?CLASS))
(=> 
    (and 
        (holds rangeSubclass ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) ?VALUE)) 
    (holds subclass ?VALUE ?CLASS))
(=> 
    (and 
        (holds rangeSubclass ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) ?VALUE)) 
    (holds subclass ?VALUE ?CLASS))
(=> 
    (and 
        (holds rangeSubclass ?FUNCTION ?CLASS) 
        (equal 
            (AssignmentFn ?FUNCTION ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) ?VALUE)) 
    (holds subclass ?VALUE ?CLASS))
(=> 
    (and 
        (holds subrelation ?REL1 ?REL2) 
        (holds rangeSubclass ?REL2 ?CLASS1)) 
    (holds rangeSubclass ?REL1 ?CLASS1))
(=> 
    (and 
        (holds rangeSubclass ?REL ?CLASS1) 
        (holds rangeSubclass ?REL ?CLASS2)) 
    (or 
        (holds subclass ?CLASS1 ?CLASS2) 
        (holds subclass ?CLASS2 ?CLASS1)))
(holds instance valence BinaryPredicate)
(holds instance valence AsymmetricRelation)
(holds instance valence SingleValuedRelation)
(holds domain valence 1 Relation)
(holds domain valence 2 PositiveInteger)
(holds instance documentation BinaryPredicate)
(holds instance documentation AsymmetricRelation)
(holds domain documentation 1 Entity)
(holds domain documentation 2 SymbolicString)
(holds instance disjoint BinaryPredicate)
(holds instance disjoint SymmetricRelation)
(holds domain disjoint 1 SetOrClass)
(holds domain disjoint 2 SetOrClass)
(<=> 
    (holds disjoint ?CLASS1 ?CLASS2) 
    (and 
        (holds instance ?CLASS1 NonNullSet) 
        (holds instance ?CLASS2 NonNullSet) 
        (forall
            (?INST) 
            (not 
                (and 
                    (holds instance ?INST ?CLASS1) 
                    (holds instance ?INST ?CLASS2))))))
(holds instance disjointRelation Predicate)
(holds instance disjointRelation VariableArityRelation)
(holds relatedInternalConcept disjointRelation disjoint)
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0) 
        (holds inList ?REL 
            (ListFn ?ROW_arg0))) 
    (holds instance ?REL Relation))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1) 
        (holds inList ?REL 
            (ListFn ?ROW_arg0 ?ROW_arg1))) 
    (holds instance ?REL Relation))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
        (holds inList ?REL 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2))) 
    (holds instance ?REL Relation))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
        (holds inList ?REL 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3))) 
    (holds instance ?REL Relation))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
        (holds inList ?REL 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4))) 
    (holds instance ?REL Relation))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
        (holds inList ?REL 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5))) 
    (holds instance ?REL Relation))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
        (holds inList ?REL 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6))) 
    (holds instance ?REL Relation))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
        (holds inList ?REL 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7))) 
    (holds instance ?REL Relation))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
        (holds inList ?REL 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8))) 
    (holds instance ?REL Relation))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
        (holds inList ?REL 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9))) 
    (holds instance ?REL Relation))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0) 
        (holds inList ?REL1 
            (ListFn ?ROW_arg0)) 
        (holds inList ?REL2 
            (ListFn ?ROW_arg0)) 
        (holds valence ?REL1 ?NUMBER)) 
    (holds valence ?REL2 ?NUMBER))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1) 
        (holds inList ?REL1 
            (ListFn ?ROW_arg0 ?ROW_arg1)) 
        (holds inList ?REL2 
            (ListFn ?ROW_arg0 ?ROW_arg1)) 
        (holds valence ?REL1 ?NUMBER)) 
    (holds valence ?REL2 ?NUMBER))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
        (holds inList ?REL1 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
        (holds inList ?REL2 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
        (holds valence ?REL1 ?NUMBER)) 
    (holds valence ?REL2 ?NUMBER))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
        (holds inList ?REL1 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
        (holds inList ?REL2 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
        (holds valence ?REL1 ?NUMBER)) 
    (holds valence ?REL2 ?NUMBER))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
        (holds inList ?REL1 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
        (holds inList ?REL2 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
        (holds valence ?REL1 ?NUMBER)) 
    (holds valence ?REL2 ?NUMBER))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
        (holds inList ?REL1 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
        (holds inList ?REL2 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
        (holds valence ?REL1 ?NUMBER)) 
    (holds valence ?REL2 ?NUMBER))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
        (holds inList ?REL1 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
        (holds inList ?REL2 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
        (holds valence ?REL1 ?NUMBER)) 
    (holds valence ?REL2 ?NUMBER))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
        (holds inList ?REL1 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
        (holds inList ?REL2 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
        (holds valence ?REL1 ?NUMBER)) 
    (holds valence ?REL2 ?NUMBER))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
        (holds inList ?REL1 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
        (holds inList ?REL2 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
        (holds valence ?REL1 ?NUMBER)) 
    (holds valence ?REL2 ?NUMBER))
(=> 
    (and 
        (holds disjointRelation ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
        (holds inList ?REL1 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
        (holds inList ?REL2 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
        (holds valence ?REL1 ?NUMBER)) 
    (holds valence ?REL2 ?NUMBER))
(=> 
    (and 
        (holds domain ?REL1 ?NUMBER ?CLASS1) 
        (holds domain ?REL2 ?NUMBER ?CLASS2) 
        (holds disjoint ?CLASS1 ?CLASS2)) 
    (holds disjointRelation ?REL1 ?REL2))
(=> 
    (and 
        (holds domainSubclass ?REL1 ?NUMBER ?CLASS1) 
        (holds domainSubclass ?REL2 ?NUMBER ?CLASS2) 
        (holds disjoint ?CLASS1 ?CLASS2)) 
    (holds disjointRelation ?REL1 ?REL2))
(=> 
    (and 
        (holds range ?REL1 ?CLASS1) 
        (holds range ?REL2 ?CLASS2) 
        (holds disjoint ?CLASS1 ?CLASS2)) 
    (holds disjointRelation ?REL1 ?REL2))
(=> 
    (and 
        (holds rangeSubclass ?REL1 ?CLASS1) 
        (holds rangeSubclass ?REL2 ?CLASS2) 
        (holds disjoint ?CLASS1 ?CLASS2)) 
    (holds disjointRelation ?REL1 ?REL2))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0)) 
    (not 
        (holds ?REL2 ?ROW2_arg0)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0)) 
    (not 
        (holds ?REL2 ?ROW2_arg0)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0)) 
    (not 
        (holds ?REL2 ?ROW2_arg0)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0)) 
    (not 
        (holds ?REL2 ?ROW2_arg0)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0)) 
    (not 
        (holds ?REL2 ?ROW2_arg0)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0)) 
    (not 
        (holds ?REL2 ?ROW2_arg0)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0)) 
    (not 
        (holds ?REL2 ?ROW2_arg0)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0)) 
    (not 
        (holds ?REL2 ?ROW2_arg0)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0)) 
    (not 
        (holds ?REL2 ?ROW2_arg0)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0)) 
    (not 
        (holds ?REL2 ?ROW2_arg0)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8)))
(=> 
    (and 
        (holds disjointRelation ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9) 
        (holds inList ?REL1 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (holds inList ?REL2 
            (ListFn ?ROW1_arg0 ?ROW1_arg1 ?ROW1_arg2 ?ROW1_arg3 ?ROW1_arg4 ?ROW1_arg5 ?ROW1_arg6 ?ROW1_arg7 ?ROW1_arg8 ?ROW1_arg9)) 
        (not 
            (equal ?REL1 ?REL2)) 
        (holds ?REL1 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)) 
    (not 
        (holds ?REL2 ?ROW2_arg0 ?ROW2_arg1 ?ROW2_arg2 ?ROW2_arg3 ?ROW2_arg4 ?ROW2_arg5 ?ROW2_arg6 ?ROW2_arg7 ?ROW2_arg8 ?ROW2_arg9)))
(holds instance contraryAttribute Predicate)
(holds instance contraryAttribute VariableArityRelation)
(=> 
    (holds contraryAttribute ?ROW_arg0) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0)) 
        (holds instance ?ELEMENT Attribute)))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1)) 
        (holds instance ?ELEMENT Attribute)))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
        (holds instance ?ELEMENT Attribute)))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
        (holds instance ?ELEMENT Attribute)))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
        (holds instance ?ELEMENT Attribute)))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
        (holds instance ?ELEMENT Attribute)))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
        (holds instance ?ELEMENT Attribute)))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
        (holds instance ?ELEMENT Attribute)))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
        (holds instance ?ELEMENT Attribute)))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
        (holds instance ?ELEMENT Attribute)))
(=> 
    (holds contraryAttribute ?ROW_arg0) 
    (forall
        (?ATTR1 ?ATTR2) 
        (=> 
            (and 
                (equal ?ATTR1 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0) ?NUMBER1)) 
                (equal ?ATTR2 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0) ?NUMBER2)) 
                (not 
                    (equal ?NUMBER1 ?NUMBER2))) 
            (=> 
                (holds property ?OBJ ?ATTR1) 
                (not 
                    (holds property ?OBJ ?ATTR2))))))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1) 
    (forall
        (?ATTR1 ?ATTR2) 
        (=> 
            (and 
                (equal ?ATTR1 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1) ?NUMBER1)) 
                (equal ?ATTR2 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1) ?NUMBER2)) 
                (not 
                    (equal ?NUMBER1 ?NUMBER2))) 
            (=> 
                (holds property ?OBJ ?ATTR1) 
                (not 
                    (holds property ?OBJ ?ATTR2))))))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
    (forall
        (?ATTR1 ?ATTR2) 
        (=> 
            (and 
                (equal ?ATTR1 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) ?NUMBER1)) 
                (equal ?ATTR2 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) ?NUMBER2)) 
                (not 
                    (equal ?NUMBER1 ?NUMBER2))) 
            (=> 
                (holds property ?OBJ ?ATTR1) 
                (not 
                    (holds property ?OBJ ?ATTR2))))))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
    (forall
        (?ATTR1 ?ATTR2) 
        (=> 
            (and 
                (equal ?ATTR1 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) ?NUMBER1)) 
                (equal ?ATTR2 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) ?NUMBER2)) 
                (not 
                    (equal ?NUMBER1 ?NUMBER2))) 
            (=> 
                (holds property ?OBJ ?ATTR1) 
                (not 
                    (holds property ?OBJ ?ATTR2))))))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
    (forall
        (?ATTR1 ?ATTR2) 
        (=> 
            (and 
                (equal ?ATTR1 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) ?NUMBER1)) 
                (equal ?ATTR2 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) ?NUMBER2)) 
                (not 
                    (equal ?NUMBER1 ?NUMBER2))) 
            (=> 
                (holds property ?OBJ ?ATTR1) 
                (not 
                    (holds property ?OBJ ?ATTR2))))))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
    (forall
        (?ATTR1 ?ATTR2) 
        (=> 
            (and 
                (equal ?ATTR1 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) ?NUMBER1)) 
                (equal ?ATTR2 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) ?NUMBER2)) 
                (not 
                    (equal ?NUMBER1 ?NUMBER2))) 
            (=> 
                (holds property ?OBJ ?ATTR1) 
                (not 
                    (holds property ?OBJ ?ATTR2))))))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
    (forall
        (?ATTR1 ?ATTR2) 
        (=> 
            (and 
                (equal ?ATTR1 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) ?NUMBER1)) 
                (equal ?ATTR2 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) ?NUMBER2)) 
                (not 
                    (equal ?NUMBER1 ?NUMBER2))) 
            (=> 
                (holds property ?OBJ ?ATTR1) 
                (not 
                    (holds property ?OBJ ?ATTR2))))))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
    (forall
        (?ATTR1 ?ATTR2) 
        (=> 
            (and 
                (equal ?ATTR1 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) ?NUMBER1)) 
                (equal ?ATTR2 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) ?NUMBER2)) 
                (not 
                    (equal ?NUMBER1 ?NUMBER2))) 
            (=> 
                (holds property ?OBJ ?ATTR1) 
                (not 
                    (holds property ?OBJ ?ATTR2))))))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
    (forall
        (?ATTR1 ?ATTR2) 
        (=> 
            (and 
                (equal ?ATTR1 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) ?NUMBER1)) 
                (equal ?ATTR2 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) ?NUMBER2)) 
                (not 
                    (equal ?NUMBER1 ?NUMBER2))) 
            (=> 
                (holds property ?OBJ ?ATTR1) 
                (not 
                    (holds property ?OBJ ?ATTR2))))))
(=> 
    (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
    (forall
        (?ATTR1 ?ATTR2) 
        (=> 
            (and 
                (equal ?ATTR1 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) ?NUMBER1)) 
                (equal ?ATTR2 
                    (ListOrderFn 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) ?NUMBER2)) 
                (not 
                    (equal ?NUMBER1 ?NUMBER2))) 
            (=> 
                (holds property ?OBJ ?ATTR1) 
                (not 
                    (holds property ?OBJ ?ATTR2))))))
(holds instance exhaustiveAttribute Predicate)
(holds instance exhaustiveAttribute VariableArityRelation)
(holds domainSubclass exhaustiveAttribute 1 Attribute)
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0) 
    (=> 
        (holds inList ?ATTR 
            (ListFn ?ROW_arg0)) 
        (holds instance ?ATTR Attribute)))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1) 
    (=> 
        (holds inList ?ATTR 
            (ListFn ?ROW_arg0 ?ROW_arg1)) 
        (holds instance ?ATTR Attribute)))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
    (=> 
        (holds inList ?ATTR 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
        (holds instance ?ATTR Attribute)))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
    (=> 
        (holds inList ?ATTR 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
        (holds instance ?ATTR Attribute)))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
    (=> 
        (holds inList ?ATTR 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
        (holds instance ?ATTR Attribute)))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
    (=> 
        (holds inList ?ATTR 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
        (holds instance ?ATTR Attribute)))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
    (=> 
        (holds inList ?ATTR 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
        (holds instance ?ATTR Attribute)))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
    (=> 
        (holds inList ?ATTR 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
        (holds instance ?ATTR Attribute)))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
    (=> 
        (holds inList ?ATTR 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
        (holds instance ?ATTR Attribute)))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
    (=> 
        (holds inList ?ATTR 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
        (holds instance ?ATTR Attribute)))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?ATTR1 ?CLASS) 
            (exists
                (?ATTR2) 
                (and 
                    (holds inList ?ATTR2 
                        (ListFn ?ROW_arg0)) 
                    (equal ?ATTR1 ?ATTR2))))))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?ATTR1 ?CLASS) 
            (exists
                (?ATTR2) 
                (and 
                    (holds inList ?ATTR2 
                        (ListFn ?ROW_arg0 ?ROW_arg1)) 
                    (equal ?ATTR1 ?ATTR2))))))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?ATTR1 ?CLASS) 
            (exists
                (?ATTR2) 
                (and 
                    (holds inList ?ATTR2 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
                    (equal ?ATTR1 ?ATTR2))))))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?ATTR1 ?CLASS) 
            (exists
                (?ATTR2) 
                (and 
                    (holds inList ?ATTR2 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
                    (equal ?ATTR1 ?ATTR2))))))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?ATTR1 ?CLASS) 
            (exists
                (?ATTR2) 
                (and 
                    (holds inList ?ATTR2 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
                    (equal ?ATTR1 ?ATTR2))))))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?ATTR1 ?CLASS) 
            (exists
                (?ATTR2) 
                (and 
                    (holds inList ?ATTR2 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
                    (equal ?ATTR1 ?ATTR2))))))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?ATTR1 ?CLASS) 
            (exists
                (?ATTR2) 
                (and 
                    (holds inList ?ATTR2 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
                    (equal ?ATTR1 ?ATTR2))))))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?ATTR1 ?CLASS) 
            (exists
                (?ATTR2) 
                (and 
                    (holds inList ?ATTR2 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
                    (equal ?ATTR1 ?ATTR2))))))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?ATTR1 ?CLASS) 
            (exists
                (?ATTR2) 
                (and 
                    (holds inList ?ATTR2 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
                    (equal ?ATTR1 ?ATTR2))))))
(=> 
    (holds exhaustiveAttribute ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?ATTR1 ?CLASS) 
            (exists
                (?ATTR2) 
                (and 
                    (holds inList ?ATTR2 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
                    (equal ?ATTR1 ?ATTR2))))))
(holds instance exhaustiveDecomposition Predicate)
(holds instance exhaustiveDecomposition VariableArityRelation)
(holds domain exhaustiveDecomposition 1 Class)
(holds relatedInternalConcept exhaustiveDecomposition partition)
(=> 
    (holds exhaustiveDecomposition ?ROW_arg0) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
        (holds instance ?ELEMENT Class)))
(holds instance disjointDecomposition Predicate)
(holds instance disjointDecomposition VariableArityRelation)
(holds domain disjointDecomposition 1 Class)
(holds relatedInternalConcept disjointDecomposition exhaustiveDecomposition)
(holds relatedInternalConcept disjointDecomposition disjoint)
(=> 
    (holds disjointDecomposition ?ROW_arg0) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
        (holds instance ?ELEMENT Class)))
(=> 
    (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
    (=> 
        (holds inList ?ELEMENT 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
        (holds instance ?ELEMENT Class)))
(holds instance partition Predicate)
(holds instance partition VariableArityRelation)
(holds domain partition 1 Class)
(<=> 
    (holds partition ?ROW_arg0) 
    (and 
        (holds exhaustiveDecomposition ?ROW_arg0) 
        (holds disjointDecomposition ?ROW_arg0)))
(<=> 
    (holds partition ?ROW_arg0 ?ROW_arg1) 
    (and 
        (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1) 
        (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1)))
(<=> 
    (holds partition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
    (and 
        (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
        (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)))
(<=> 
    (holds partition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
    (and 
        (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
        (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)))
(<=> 
    (holds partition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
    (and 
        (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
        (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)))
(<=> 
    (holds partition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
    (and 
        (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
        (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)))
(<=> 
    (holds partition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
    (and 
        (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
        (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)))
(<=> 
    (holds partition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
    (and 
        (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
        (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)))
(<=> 
    (holds partition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
    (and 
        (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
        (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)))
(<=> 
    (holds partition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
    (and 
        (holds exhaustiveDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
        (holds disjointDecomposition ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)))
(holds instance relatedInternalConcept BinaryPredicate)
(holds instance relatedInternalConcept EquivalenceRelation)
(holds domain relatedInternalConcept 1 Entity)
(holds domain relatedInternalConcept 2 Entity)
(holds instance relatedExternalConcept TernaryPredicate)
(holds domain relatedExternalConcept 1 SymbolicString)
(holds domain relatedExternalConcept 2 Entity)
(holds domain relatedExternalConcept 3 Language)
(holds relatedInternalConcept relatedExternalConcept relatedInternalConcept)
(holds subrelation synonymousExternalConcept relatedExternalConcept)
(holds disjointRelation synonymousExternalConcept subsumedExternalConcept subsumingExternalConcept)
(holds subrelation subsumingExternalConcept relatedExternalConcept)
(holds subrelation subsumedExternalConcept relatedExternalConcept)
(holds instance subAttribute BinaryPredicate)
(holds instance subAttribute PartialOrderingRelation)
(holds domain subAttribute 1 Attribute)
(holds domain subAttribute 2 Attribute)
(holds disjointRelation subAttribute successorAttribute)
(=> 
    (holds subAttribute ?ATTR1 ?ATTR2) 
    (forall
        (?OBJ) 
        (=> 
            (holds property ?OBJ ?ATTR1) 
            (holds property ?OBJ ?ATTR2))))
(=> 
    (and 
        (holds subAttribute ?ATTR1 ?ATTR2) 
        (holds instance ?ATTR2 ?CLASS)) 
    (holds instance ?ATTR1 ?CLASS))
(holds instance successorAttribute BinaryPredicate)
(holds instance successorAttribute AsymmetricRelation)
(holds domain successorAttribute 1 Attribute)
(holds domain successorAttribute 2 Attribute)
(=> 
    (and 
        (holds successorAttribute ?ATTR1 ?ATTR2) 
        (holds holdsDuring ?TIME1 `(holds property ?ENTITY ?ATTR2))) 
    (exists
        (?TIME2) 
        (and 
            (holds temporalPart ?TIME2 
                (PastFn ?TIME1)) 
            (holds holdsDuring ?TIME2 `(holds property ?ENTITY ?ATTR1)))))
(holds instance successorAttributeClosure BinaryPredicate)
(holds instance successorAttributeClosure TransitiveRelation)
(holds instance successorAttributeClosure IrreflexiveRelation)
(holds domain successorAttributeClosure 1 Attribute)
(holds domain successorAttributeClosure 2 Attribute)
(holds relatedInternalConcept successorAttributeClosure successorAttribute)
(=> 
    (holds successorAttribute ?ATTR1 ?ATTR2) 
    (holds successorAttributeClosure ?ATTR1 ?ATTR2))
(holds instance and VariableArityRelation)
(holds instance and LogicalOperator)
(holds domain and 1 Formula)
(holds domain and 2 Formula)
(holds instance or VariableArityRelation)
(holds instance or LogicalOperator)
(holds domain or 1 Formula)
(holds domain or 2 Formula)
(holds instance => BinaryPredicate)
(holds instance => LogicalOperator)
(holds domain => 1 Formula)
(holds domain => 2 Formula)
(holds instance <=> BinaryPredicate)
(holds instance <=> LogicalOperator)
(holds domain <=> 1 Formula)
(holds domain <=> 2 Formula)
(holds instance not LogicalOperator)
(holds domain not 1 Formula)
(holds instance forall BinaryPredicate)
(holds instance forall LogicalOperator)
(holds domain forall 1 List)
(holds domain forall 2 Formula)
(holds instance exists BinaryPredicate)
(holds instance exists LogicalOperator)
(holds domain exists 1 List)
(holds domain exists 2 Formula)
(holds instance entails BinaryPredicate)
(holds instance entails LogicalOperator)
(holds domain entails 1 Formula)
(holds domain entails 2 Formula)
(holds instance AssignmentFn Function)
(holds instance AssignmentFn VariableArityRelation)
(holds domain AssignmentFn 1 Function)
(holds range AssignmentFn Entity)
(holds instance holds Predicate)
(holds instance holds VariableArityRelation)
(holds domain holds 1 Relation)
(=> 
    (holds instance ?REL Function) 
    (<=> 
        (equal 
            (AssignmentFn ?REL ?ROW_arg0) ?INST) 
        (holds ?REL ?ROW_arg0  ?INST)))
(=> 
    (holds instance ?REL Function) 
    (<=> 
        (equal 
            (AssignmentFn ?REL ?ROW_arg0 ?ROW_arg1) ?INST) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1  ?INST)))
(=> 
    (holds instance ?REL Function) 
    (<=> 
        (equal 
            (AssignmentFn ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) ?INST) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2  ?INST)))
(=> 
    (holds instance ?REL Function) 
    (<=> 
        (equal 
            (AssignmentFn ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) ?INST) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3  ?INST)))
(=> 
    (holds instance ?REL Function) 
    (<=> 
        (equal 
            (AssignmentFn ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) ?INST) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4  ?INST)))
(=> 
    (holds instance ?REL Function) 
    (<=> 
        (equal 
            (AssignmentFn ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) ?INST) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5  ?INST)))
(=> 
    (holds instance ?REL Function) 
    (<=> 
        (equal 
            (AssignmentFn ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) ?INST) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6  ?INST)))
(=> 
    (holds instance ?REL Function) 
    (<=> 
        (equal 
            (AssignmentFn ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) ?INST) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7  ?INST)))
(=> 
    (holds instance ?REL Function) 
    (<=> 
        (equal 
            (AssignmentFn ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) ?INST) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8  ?INST)))
(=> 
    (holds instance ?REL Function) 
    (<=> 
        (equal 
            (AssignmentFn ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) ?INST) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9  ?INST)))
(holds instance PowerSetFn UnaryFunction)
(holds instance PowerSetFn TotalValuedRelation)
(holds domain PowerSetFn 1 SetOrClass)
(holds rangeSubclass PowerSetFn SetOrClass)
(holds partition Entity Physical Abstract)
(holds instance ?THING Entity)
(exists
    (?THING) 
    (holds instance ?THING Entity))
(<=> 
    (holds instance ?CLASS Class) 
    (holds subclass ?CLASS Entity))
(holds subclass Physical Entity)
(holds partition Physical Object Process)
(<=> 
    (holds instance ?PHYS Physical) 
    (exists
        (?LOC ?TIME) 
        (and 
            (holds located ?PHYS ?LOC) 
            (holds time ?PHYS ?TIME))))
(holds subclass Object Physical)
(holds subclass SelfConnectedObject Object)
(holds instance FrontFn SpatialRelation)
(holds instance FrontFn PartialValuedRelation)
(holds instance FrontFn UnaryFunction)
(holds instance FrontFn AsymmetricRelation)
(holds instance FrontFn IrreflexiveRelation)
(holds domain FrontFn 1 SelfConnectedObject)
(holds range FrontFn SelfConnectedObject)
(=> 
    (holds instance ?OBJ SelfConnectedObject) 
    (holds side 
        (FrontFn ?OBJ) ?OBJ))
(holds instance BackFn SpatialRelation)
(holds instance BackFn PartialValuedRelation)
(holds instance BackFn UnaryFunction)
(holds instance BackFn AsymmetricRelation)
(holds instance BackFn IrreflexiveRelation)
(holds domain BackFn 1 SelfConnectedObject)
(holds range BackFn SelfConnectedObject)
(=> 
    (holds instance ?OBJ SelfConnectedObject) 
    (holds side 
        (BackFn ?OBJ) ?OBJ))
(holds instance part SpatialRelation)
(holds instance part PartialOrderingRelation)
(holds domain part 1 Object)
(holds domain part 2 Object)
(holds instance properPart AsymmetricRelation)
(holds instance properPart TransitiveRelation)
(holds subrelation properPart part)
(<=> 
    (holds properPart ?OBJ1 ?OBJ2) 
    (and 
        (holds part ?OBJ1 ?OBJ2) 
        (not 
            (holds part ?OBJ2 ?OBJ1))))
(holds subrelation piece part)
(holds domain piece 1 Substance)
(holds domain piece 2 Substance)
(=> 
    (holds piece ?SUBSTANCE1 ?SUBSTANCE2) 
    (forall
        (?CLASS) 
        (=> 
            (holds instance ?SUBSTANCE1 ?CLASS) 
            (holds instance ?SUBSTANCE2 ?CLASS))))
(holds subrelation component part)
(holds domain component 1 CorpuscularObject)
(holds domain component 2 CorpuscularObject)
(holds instance material BinaryPredicate)
(holds domainSubclass material 1 Substance)
(holds domain material 2 CorpuscularObject)
(holds subrelation contains partlyLocated)
(holds instance contains SpatialRelation)
(holds instance contains AsymmetricRelation)
(holds disjointRelation contains part)
(holds domain contains 1 SelfConnectedObject)
(holds domain contains 2 Object)
(<=> 
    (holds contains ?OBJ1 ?OBJ2) 
    (exists
        (?HOLE) 
        (and 
            (holds hole ?HOLE ?OBJ1) 
            (holds properlyFills ?OBJ2 ?HOLE))))
(holds subclass Substance SelfConnectedObject)
(=> 
    (and 
        (holds subclass ?OBJECTTYPE Substance) 
        (holds instance ?OBJECT ?OBJECTTYPE) 
        (holds part ?PART ?OBJECT)) 
    (holds instance ?PART ?OBJECTTYPE))
(=> 
    (and 
        (holds instance ?OBJ Substance) 
        (holds attribute ?OBJ ?ATTR) 
        (holds part ?PART ?OBJ)) 
    (holds attribute ?PART ?ATTR))
(holds subclass PureSubstance Substance)
(holds partition PureSubstance CompoundSubstance ElementalSubstance)
(holds subclass ElementalSubstance PureSubstance)
(holds subclass Metal ElementalSubstance)
(holds subclass Atom ElementalSubstance)
(=> 
    (holds instance ?ATOM Atom) 
    (exists
        (?PROTON ?ELECTRON) 
        (and 
            (holds component ?PROTON ?ATOM) 
            (holds component ?ELECTRON ?ATOM) 
            (holds instance ?PROTON Proton) 
            (holds instance ?ELECTRON Electron))))
(=> 
    (holds instance ?ATOM Atom) 
    (forall
        (?NUCLEUS1 ?NUCLEUS2) 
        (=> 
            (and 
                (holds component ?NUCLEUS1 ?ATOM) 
                (holds component ?NUCLEUS2 ?ATOM) 
                (holds instance ?NUCLEUS1 AtomicNucleus) 
                (holds instance ?NUCLEUS2 AtomicNucleus)) 
            (equal ?NUCLEUS1 ?NUCLEUS2))))
(holds subclass SubatomicParticle ElementalSubstance)
(=> 
    (holds instance ?PARTICLE SubatomicParticle) 
    (exists
        (?ATOM) 
        (and 
            (holds instance ?ATOM Atom) 
            (holds part ?PARTICLE ?ATOM))))
(holds subclass AtomicNucleus SubatomicParticle)
(=> 
    (holds instance ?NUCLEUS AtomicNucleus) 
    (exists
        (?NEUTRON ?PROTON) 
        (and 
            (holds component ?NEUTRON ?NUCLEUS) 
            (holds component ?PROTON ?NUCLEUS) 
            (holds instance ?NEUTRON Neutron) 
            (holds instance ?PROTON Proton))))
(holds subclass Electron SubatomicParticle)
(holds subclass Proton SubatomicParticle)
(holds subclass Neutron SubatomicParticle)
(holds subclass CompoundSubstance PureSubstance)
(holds subclass Mixture Substance)
(=> 
    (holds instance ?MIXTURE Mixture) 
    (exists
        (?PURE1 ?PURE2) 
        (and 
            (holds instance ?PURE1 PureSubstance) 
            (holds instance ?PURE2 PureSubstance) 
            (not 
                (equal ?PURE1 ?PURE2)) 
            (holds part ?PURE1 ?MIXTURE) 
            (holds part ?PURE2 ?MIXTURE))))
(=> 
    (and 
        (holds instance ?MIXTURE Mixture) 
        (holds part ?SUBSTANCE ?MIXTURE) 
        (not 
            (holds instance ?SUBSTANCE Mixture))) 
    (holds instance ?SUBSTANCE PureSubstance))
(holds subclass Solution Mixture)
(holds subclass CorpuscularObject SelfConnectedObject)
(holds disjoint CorpuscularObject Substance)
(=> 
    (holds instance ?OBJ CorpuscularObject) 
    (exists
        (?SUBSTANCE1 ?SUBSTANCE2) 
        (and 
            (holds subclass ?SUBSTANCE1 Substance) 
            (holds subclass ?SUBSTANCE2 Substance) 
            (holds material ?SUBSTANCE1 ?OBJ) 
            (holds material ?SUBSTANCE2 ?OBJ) 
            (not 
                (equal ?SUBSTANCE1 ?SUBSTANCE2)))))
(holds subclass Region Object)
(=> 
    (holds instance ?REGION Region) 
    (exists
        (?PHYS) 
        (holds located ?PHYS ?REGION)))
(holds subclass Collection Object)
(holds disjoint Collection SelfConnectedObject)
(=> 
    (holds instance ?COLL Collection) 
    (exists
        (?OBJ) 
        (holds member ?OBJ ?COLL)))
(holds subrelation member part)
(holds instance member AsymmetricRelation)
(holds instance member IntransitiveRelation)
(holds domain member 1 SelfConnectedObject)
(holds domain member 2 Collection)
(holds relatedInternalConcept member instance)
(holds relatedInternalConcept member element)
(holds instance subCollection BinaryPredicate)
(holds instance subCollection PartialOrderingRelation)
(holds domain subCollection 1 Collection)
(holds domain subCollection 2 Collection)
(<=> 
    (holds subCollection ?COLL1 ?COLL2) 
    (and 
        (holds instance ?COLL1 Collection) 
        (holds instance ?COLL2 Collection) 
        (forall
            (?MEMBER) 
            (=> 
                (holds member ?MEMBER ?COLL1) 
                (holds member ?MEMBER ?COLL2)))))
(holds subclass ContentBearingObject CorpuscularObject)
(holds relatedInternalConcept ContentBearingObject containsInformation)
(holds subclass SymbolicString ContentBearingObject)
(holds subclass Character SymbolicString)
(=> 
    (holds instance ?STRING SymbolicString) 
    (exists
        (?PART) 
        (and 
            (holds part ?PART ?STRING) 
            (holds instance ?PART Character))))
(holds instance containsInformation BinaryPredicate)
(holds instance containsInformation AsymmetricRelation)
(holds subrelation containsInformation represents)
(holds domain containsInformation 1 ContentBearingObject)
(holds domain containsInformation 2 Proposition)
(holds subclass Icon ContentBearingObject)
(holds subclass MotionPicture Text)
(holds subclass LinguisticExpression ContentBearingObject)
(holds disjoint LinguisticExpression Icon)
(holds subclass Language LinguisticExpression)
(holds disjointDecomposition Language AnimalLanguage HumanLanguage ComputerLanguage)
(holds subclass AnimalLanguage Language)
(=> 
    (and 
        (holds instance ?LANG AnimalLanguage) 
        (holds agent ?PROC ?AGENT) 
        (holds instrument ?PROC ?LANG)) 
    (and 
        (holds instance ?AGENT Animal) 
        (not 
            (holds instance ?AGENT Human))))
(holds subclass ArtificialLanguage Language)
(holds subclass ComputerLanguage ArtificialLanguage)
(=> 
    (and 
        (holds instance ?LANG ComputerLanguage) 
        (holds agent ?PROC ?AGENT) 
        (holds instrument ?PROC ?LANG)) 
    (holds instance ?AGENT Machine))
(holds subclass HumanLanguage Language)
(holds partition HumanLanguage NaturalLanguage ConstructedLanguage)
(holds partition HumanLanguage SpokenHumanLanguage ManualHumanLanguage)
(=> 
    (and 
        (holds instance ?LANG HumanLanguage) 
        (holds agent ?PROC ?AGENT) 
        (holds instrument ?PROC ?LANG)) 
    (holds instance ?AGENT Human))
(holds subclass ConstructedLanguage HumanLanguage)
(holds subclass ConstructedLanguage ArtificialLanguage)
(=> 
    (holds instance ?LANG ConstructedLanguage) 
    (exists
        (?PLAN) 
        (and 
            (holds instance ?PLAN Planning) 
            (holds result ?PLAN ?LANG))))
(holds subclass NaturalLanguage HumanLanguage)
(holds subclass ManualHumanLanguage HumanLanguage)
(holds subclass SpokenHumanLanguage HumanLanguage)
(holds subclass Word LinguisticExpression)
(holds subclass Formula Sentence)
(holds subclass Agent Object)
(<=> 
    (holds instance ?AGENT Agent) 
    (exists
        (?PROC) 
        (holds agent ?PROC ?AGENT)))
(holds subclass SentientAgent Agent)
(holds subclass CognitiveAgent SentientAgent)
(holds instance leader BinaryPredicate)
(holds instance leader AsymmetricRelation)
(holds instance leader SingleValuedRelation)
(holds domain leader 2 Agent)
(holds domain leader 1 CognitiveAgent)
(holds subclass Process Physical)
(holds subclass DualObjectProcess Process)
(=> 
    (holds instance ?PROCESS DualObjectProcess) 
    (exists
        (?OBJ1 ?OBJ2) 
        (and 
            (holds patient ?PROCESS ?OBJ1) 
            (holds patient ?PROCESS ?OBJ2) 
            (not 
                (equal ?OBJ1 ?OBJ2)))))
(holds subclass Abstract Entity)
(holds disjointDecomposition Abstract Quantity Attribute SetOrClass Relation Proposition Graph GraphElement)
(<=> 
    (holds instance ?ABS Abstract) 
    (not 
        (exists
            (?POINT) 
            (or 
                (holds located ?ABS ?POINT) 
                (holds time ?ABS ?POINT)))))
(holds subclass Quantity Abstract)
(holds subclass Attribute Abstract)
(holds partition Attribute InternalAttribute RelationalAttribute)
(holds instance property BinaryPredicate)
(holds domain property 1 Entity)
(holds domain property 2 Attribute)
(holds instance attribute AsymmetricRelation)
(holds instance attribute IrreflexiveRelation)
(holds subrelation attribute property)
(holds domain attribute 1 Object)
(holds instance manner AsymmetricRelation)
(holds instance manner IrreflexiveRelation)
(holds subrelation manner property)
(holds domain manner 1 Process)
(holds disjointRelation manner attribute)
(holds instance AbstractionFn UnaryFunction)
(holds instance AbstractionFn PartialValuedRelation)
(holds domain AbstractionFn 1 Class)
(holds range AbstractionFn Attribute)
(<=> 
    (equal 
        (AbstractionFn ?CLASS) ?ATTR) 
    (forall
        (?INST) 
        (<=> 
            (holds instance ?INST ?CLASS) 
            (holds property ?INST ?ATTR))))
(holds instance ExtensionFn UnaryFunction)
(holds instance ExtensionFn PartialValuedRelation)
(holds domain ExtensionFn 1 Attribute)
(holds range ExtensionFn Class)
(<=> 
    (equal 
        (ExtensionFn ?ATTRIBUTE) ?CLASS) 
    (equal 
        (AbstractionFn ?CLASS) ?ATTRIBUTE))
(holds subclass InternalAttribute Attribute)
(holds subclass RelationalAttribute Attribute)
(holds subclass Number Quantity)
(holds partition Number RealNumber ImaginaryNumber ComplexNumber)
(holds instance lessThan BinaryPredicate)
(holds instance lessThan TransitiveRelation)
(holds instance lessThan IrreflexiveRelation)
(holds instance lessThan RelationExtendedToQuantities)
(holds trichotomizingOn lessThan RealNumber)
(holds domain lessThan 1 Quantity)
(holds domain lessThan 2 Quantity)
(holds instance greaterThan BinaryPredicate)
(holds instance greaterThan TransitiveRelation)
(holds instance greaterThan IrreflexiveRelation)
(holds instance greaterThan RelationExtendedToQuantities)
(holds trichotomizingOn greaterThan RealNumber)
(holds domain greaterThan 1 Quantity)
(holds domain greaterThan 2 Quantity)
(holds inverse greaterThan lessThan)
(holds instance lessThanOrEqualTo BinaryPredicate)
(holds instance lessThanOrEqualTo PartialOrderingRelation)
(holds instance lessThanOrEqualTo RelationExtendedToQuantities)
(holds trichotomizingOn lessThanOrEqualTo RealNumber)
(holds domain lessThanOrEqualTo 1 Quantity)
(holds domain lessThanOrEqualTo 2 Quantity)
(<=> 
    (<= ?NUMBER1 ?NUMBER2) 
    (or 
        (equal ?NUMBER1 ?NUMBER2) 
        (< ?NUMBER1 ?NUMBER2)))
(holds instance greaterThanOrEqualTo BinaryPredicate)
(holds instance greaterThanOrEqualTo PartialOrderingRelation)
(holds instance greaterThanOrEqualTo RelationExtendedToQuantities)
(holds trichotomizingOn greaterThanOrEqualTo RealNumber)
(holds domain greaterThanOrEqualTo 1 Quantity)
(holds domain greaterThanOrEqualTo 2 Quantity)
(holds inverse greaterThanOrEqualTo lessThanOrEqualTo)
(<=> 
    (>= ?NUMBER1 ?NUMBER2) 
    (or 
        (equal ?NUMBER1 ?NUMBER2) 
        (> ?NUMBER1 ?NUMBER2)))
(holds subclass RealNumber Number)
(holds partition RealNumber NegativeRealNumber NonnegativeRealNumber)
(holds partition RealNumber RationalNumber IrrationalNumber)
(holds subclass ImaginaryNumber Number)
(=> 
    (holds instance ?NUMBER ImaginaryNumber) 
    (exists
        (?REAL) 
        (and 
            (holds instance ?REAL RealNumber) 
            (equal ?NUMBER 
                (MultiplicationFn ?REAL 
                    (SquareRootFn -1))))))
(holds subclass RationalNumber RealNumber)
(holds subclass IrrationalNumber RealNumber)
(holds subclass NonnegativeRealNumber RealNumber)
(<=> 
    (holds instance ?NUMBER NonnegativeRealNumber) 
    (and 
        (>= ?NUMBER 0) 
        (holds instance ?NUMBER RealNumber)))
(holds subclass PositiveRealNumber NonnegativeRealNumber)
(<=> 
    (holds instance ?NUMBER PositiveRealNumber) 
    (and 
        (> ?NUMBER 0) 
        (holds instance ?NUMBER RealNumber)))
(holds subclass NegativeRealNumber RealNumber)
(<=> 
    (holds instance ?NUMBER NegativeRealNumber) 
    (and 
        (< ?NUMBER 0) 
        (holds instance ?NUMBER RealNumber)))
(holds subclass Integer RationalNumber)
(holds partition Integer OddInteger EvenInteger)
(holds partition Integer NegativeInteger NonnegativeInteger)
(holds subclass EvenInteger Integer)
(holds subclass OddInteger Integer)
(holds subclass PrimeNumber Integer)
(holds subclass NonnegativeInteger Integer)
(holds subclass NonnegativeInteger NonnegativeRealNumber)
(holds subclass NegativeInteger Integer)
(holds subclass NegativeInteger NegativeRealNumber)
(holds subclass PositiveInteger NonnegativeInteger)
(holds subclass PositiveInteger PositiveRealNumber)
(holds subclass BinaryNumber RealNumber)
(holds subclass ComplexNumber Number)
(holds disjoint ComplexNumber RealNumber)
(=> 
    (holds instance ?NUMBER ComplexNumber) 
    (exists
        (?REAL1 ?REAL2) 
        (and 
            (holds instance ?REAL1 RealNumber) 
            (holds instance ?REAL2 RealNumber) 
            (equal ?NUMBER 
                (AdditionFn ?REAL1 
                    (MultiplicationFn ?REAL2 
                        (SquareRootFn -1)))))))
(holds subclass PhysicalQuantity Quantity)
(holds partition PhysicalQuantity ConstantQuantity FunctionQuantity)
(holds subclass ConstantQuantity PhysicalQuantity)
(holds subclass TimeMeasure ConstantQuantity)
(holds subclass TimeDuration TimeMeasure)
(holds subclass TimePosition TimeMeasure)
(holds partition TimePosition TimeInterval TimePoint)
(holds subclass TimeInterval TimePosition)
(holds subclass TimePoint TimePosition)
(holds subclass FunctionQuantity PhysicalQuantity)
(holds subclass FunctionQuantity Function)
(holds subclass UnaryConstantFunctionQuantity FunctionQuantity)
(holds subclass UnaryConstantFunctionQuantity UnaryFunction)
(=> 
    (holds instance ?FUNCTION UnaryConstantFunctionQuantity) 
    (and 
        (holds domain ?FUNCTION 1 ConstantQuantity) 
        (holds range ?FUNCTION ConstantQuantity)))
(holds subclass TimeDependentQuantity UnaryConstantFunctionQuantity)
(holds subclass TimeDependentQuantity ContinuousFunction)
(=> 
    (holds instance ?FUNCTION TimeDependentQuantity) 
    (holds domain ?FUNCTION 1 TimeMeasure))
(holds subclass SetOrClass Abstract)
(holds partition SetOrClass Set Class)
(holds subclass Class SetOrClass)
(holds subclass Set SetOrClass)
(holds subclass Relation Abstract)
(holds disjointDecomposition Relation BinaryRelation TernaryRelation QuaternaryRelation QuintaryRelation VariableArityRelation)
(holds partition Relation Predicate Function List)
(holds partition Relation TotalValuedRelation PartialValuedRelation)
(=> 
    (holds instance ?REL Relation) 
    (<=> 
        (holds ?REL ?ROW_arg0) 
        (holds ?REL ?ROW_arg0)))
(=> 
    (holds instance ?REL Relation) 
    (<=> 
        (holds ?REL ?ROW_arg0 ?ROW_arg1) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1)))
(=> 
    (holds instance ?REL Relation) 
    (<=> 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)))
(=> 
    (holds instance ?REL Relation) 
    (<=> 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)))
(=> 
    (holds instance ?REL Relation) 
    (<=> 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)))
(=> 
    (holds instance ?REL Relation) 
    (<=> 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)))
(=> 
    (holds instance ?REL Relation) 
    (<=> 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)))
(=> 
    (holds instance ?REL Relation) 
    (<=> 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)))
(=> 
    (holds instance ?REL Relation) 
    (<=> 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)))
(=> 
    (holds instance ?REL Relation) 
    (<=> 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)))
(holds subclass SingleValuedRelation Relation)
(holds instance SingleValuedRelation InheritableRelation)
(=> 
    (holds instance ?REL SingleValuedRelation) 
    (forall
        (?ROW_arg0  ?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds ?REL ?ROW_arg0  ?ITEM1) 
                (holds ?REL ?ROW_arg0  ?ITEM2)) 
            (equal ?ITEM1 ?ITEM2))))
(=> 
    (holds instance ?REL SingleValuedRelation) 
    (forall
        (?ROW_arg0 ?ROW_arg1  ?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds ?REL ?ROW_arg0 ?ROW_arg1  ?ITEM1) 
                (holds ?REL ?ROW_arg0 ?ROW_arg1  ?ITEM2)) 
            (equal ?ITEM1 ?ITEM2))))
(=> 
    (holds instance ?REL SingleValuedRelation) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2  ?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2  ?ITEM1) 
                (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2  ?ITEM2)) 
            (equal ?ITEM1 ?ITEM2))))
(=> 
    (holds instance ?REL SingleValuedRelation) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3  ?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3  ?ITEM1) 
                (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3  ?ITEM2)) 
            (equal ?ITEM1 ?ITEM2))))
(=> 
    (holds instance ?REL SingleValuedRelation) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4  ?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4  ?ITEM1) 
                (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4  ?ITEM2)) 
            (equal ?ITEM1 ?ITEM2))))
(=> 
    (holds instance ?REL SingleValuedRelation) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5  ?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5  ?ITEM1) 
                (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5  ?ITEM2)) 
            (equal ?ITEM1 ?ITEM2))))
(=> 
    (holds instance ?REL SingleValuedRelation) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6  ?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6  ?ITEM1) 
                (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6  ?ITEM2)) 
            (equal ?ITEM1 ?ITEM2))))
(=> 
    (holds instance ?REL SingleValuedRelation) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7  ?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7  ?ITEM1) 
                (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7  ?ITEM2)) 
            (equal ?ITEM1 ?ITEM2))))
(=> 
    (holds instance ?REL SingleValuedRelation) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8  ?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8  ?ITEM1) 
                (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8  ?ITEM2)) 
            (equal ?ITEM1 ?ITEM2))))
(=> 
    (holds instance ?REL SingleValuedRelation) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9  ?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9  ?ITEM1) 
                (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9  ?ITEM2)) 
            (equal ?ITEM1 ?ITEM2))))
(holds subclass TotalValuedRelation Relation)
(holds instance TotalValuedRelation InheritableRelation)
(<=> 
    (holds instance ?REL TotalValuedRelation) 
    (exists
        (?VALENCE) 
        (and 
            (holds instance ?REL Relation) 
            (holds valence ?REL ?VALENCE) 
            (=> 
                (forall
                    (?NUMBER ?ELEMENT ?CLASS) 
                    (=> 
                        (and 
                            (< ?NUMBER ?VALENCE) 
                            (holds domain ?REL ?NUMBER ?CLASS) 
                            (equal ?ELEMENT 
                                (ListOrderFn 
                                    (ListFn ?ROW_arg0) ?NUMBER))) 
                        (holds instance ?ELEMENT ?CLASS))) 
                (exists
                    (?ITEM) 
                    (holds ?REL ?ROW_arg0  ?ITEM))))))
(<=> 
    (holds instance ?REL TotalValuedRelation) 
    (exists
        (?VALENCE) 
        (and 
            (holds instance ?REL Relation) 
            (holds valence ?REL ?VALENCE) 
            (=> 
                (forall
                    (?NUMBER ?ELEMENT ?CLASS) 
                    (=> 
                        (and 
                            (< ?NUMBER ?VALENCE) 
                            (holds domain ?REL ?NUMBER ?CLASS) 
                            (equal ?ELEMENT 
                                (ListOrderFn 
                                    (ListFn ?ROW_arg0 ?ROW_arg1) ?NUMBER))) 
                        (holds instance ?ELEMENT ?CLASS))) 
                (exists
                    (?ITEM) 
                    (holds ?REL ?ROW_arg0 ?ROW_arg1  ?ITEM))))))
(<=> 
    (holds instance ?REL TotalValuedRelation) 
    (exists
        (?VALENCE) 
        (and 
            (holds instance ?REL Relation) 
            (holds valence ?REL ?VALENCE) 
            (=> 
                (forall
                    (?NUMBER ?ELEMENT ?CLASS) 
                    (=> 
                        (and 
                            (< ?NUMBER ?VALENCE) 
                            (holds domain ?REL ?NUMBER ?CLASS) 
                            (equal ?ELEMENT 
                                (ListOrderFn 
                                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) ?NUMBER))) 
                        (holds instance ?ELEMENT ?CLASS))) 
                (exists
                    (?ITEM) 
                    (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2  ?ITEM))))))
(<=> 
    (holds instance ?REL TotalValuedRelation) 
    (exists
        (?VALENCE) 
        (and 
            (holds instance ?REL Relation) 
            (holds valence ?REL ?VALENCE) 
            (=> 
                (forall
                    (?NUMBER ?ELEMENT ?CLASS) 
                    (=> 
                        (and 
                            (< ?NUMBER ?VALENCE) 
                            (holds domain ?REL ?NUMBER ?CLASS) 
                            (equal ?ELEMENT 
                                (ListOrderFn 
                                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) ?NUMBER))) 
                        (holds instance ?ELEMENT ?CLASS))) 
                (exists
                    (?ITEM) 
                    (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3  ?ITEM))))))
(<=> 
    (holds instance ?REL TotalValuedRelation) 
    (exists
        (?VALENCE) 
        (and 
            (holds instance ?REL Relation) 
            (holds valence ?REL ?VALENCE) 
            (=> 
                (forall
                    (?NUMBER ?ELEMENT ?CLASS) 
                    (=> 
                        (and 
                            (< ?NUMBER ?VALENCE) 
                            (holds domain ?REL ?NUMBER ?CLASS) 
                            (equal ?ELEMENT 
                                (ListOrderFn 
                                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) ?NUMBER))) 
                        (holds instance ?ELEMENT ?CLASS))) 
                (exists
                    (?ITEM) 
                    (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4  ?ITEM))))))
(<=> 
    (holds instance ?REL TotalValuedRelation) 
    (exists
        (?VALENCE) 
        (and 
            (holds instance ?REL Relation) 
            (holds valence ?REL ?VALENCE) 
            (=> 
                (forall
                    (?NUMBER ?ELEMENT ?CLASS) 
                    (=> 
                        (and 
                            (< ?NUMBER ?VALENCE) 
                            (holds domain ?REL ?NUMBER ?CLASS) 
                            (equal ?ELEMENT 
                                (ListOrderFn 
                                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) ?NUMBER))) 
                        (holds instance ?ELEMENT ?CLASS))) 
                (exists
                    (?ITEM) 
                    (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5  ?ITEM))))))
(<=> 
    (holds instance ?REL TotalValuedRelation) 
    (exists
        (?VALENCE) 
        (and 
            (holds instance ?REL Relation) 
            (holds valence ?REL ?VALENCE) 
            (=> 
                (forall
                    (?NUMBER ?ELEMENT ?CLASS) 
                    (=> 
                        (and 
                            (< ?NUMBER ?VALENCE) 
                            (holds domain ?REL ?NUMBER ?CLASS) 
                            (equal ?ELEMENT 
                                (ListOrderFn 
                                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) ?NUMBER))) 
                        (holds instance ?ELEMENT ?CLASS))) 
                (exists
                    (?ITEM) 
                    (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6  ?ITEM))))))
(<=> 
    (holds instance ?REL TotalValuedRelation) 
    (exists
        (?VALENCE) 
        (and 
            (holds instance ?REL Relation) 
            (holds valence ?REL ?VALENCE) 
            (=> 
                (forall
                    (?NUMBER ?ELEMENT ?CLASS) 
                    (=> 
                        (and 
                            (< ?NUMBER ?VALENCE) 
                            (holds domain ?REL ?NUMBER ?CLASS) 
                            (equal ?ELEMENT 
                                (ListOrderFn 
                                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) ?NUMBER))) 
                        (holds instance ?ELEMENT ?CLASS))) 
                (exists
                    (?ITEM) 
                    (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7  ?ITEM))))))
(<=> 
    (holds instance ?REL TotalValuedRelation) 
    (exists
        (?VALENCE) 
        (and 
            (holds instance ?REL Relation) 
            (holds valence ?REL ?VALENCE) 
            (=> 
                (forall
                    (?NUMBER ?ELEMENT ?CLASS) 
                    (=> 
                        (and 
                            (< ?NUMBER ?VALENCE) 
                            (holds domain ?REL ?NUMBER ?CLASS) 
                            (equal ?ELEMENT 
                                (ListOrderFn 
                                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) ?NUMBER))) 
                        (holds instance ?ELEMENT ?CLASS))) 
                (exists
                    (?ITEM) 
                    (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8  ?ITEM))))))
(<=> 
    (holds instance ?REL TotalValuedRelation) 
    (exists
        (?VALENCE) 
        (and 
            (holds instance ?REL Relation) 
            (holds valence ?REL ?VALENCE) 
            (=> 
                (forall
                    (?NUMBER ?ELEMENT ?CLASS) 
                    (=> 
                        (and 
                            (< ?NUMBER ?VALENCE) 
                            (holds domain ?REL ?NUMBER ?CLASS) 
                            (equal ?ELEMENT 
                                (ListOrderFn 
                                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) ?NUMBER))) 
                        (holds instance ?ELEMENT ?CLASS))) 
                (exists
                    (?ITEM) 
                    (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9  ?ITEM))))))
(holds subclass PartialValuedRelation Relation)
(holds subclass BinaryRelation Relation)
(holds instance BinaryRelation InheritableRelation)
(=> 
    (holds instance ?REL BinaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0))))
(=> 
    (holds instance ?REL BinaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1))))
(=> 
    (holds instance ?REL BinaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2))))
(=> 
    (holds instance ?REL BinaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3))))
(=> 
    (holds instance ?REL BinaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4))))
(=> 
    (holds instance ?REL BinaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5))))
(=> 
    (holds instance ?REL BinaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6))))
(=> 
    (holds instance ?REL BinaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7))))
(=> 
    (holds instance ?REL BinaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8))))
(=> 
    (holds instance ?REL BinaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9))))
(holds subclass ReflexiveRelation BinaryRelation)
(=> 
    (holds instance ?REL ReflexiveRelation) 
    (=> 
        (or 
            (holds ?REL ?INST1 ?INST2) 
            (holds ?REL ?INST2 ?INST1)) 
        (holds ?REL ?INST1 ?INST1)))
(holds subclass IrreflexiveRelation BinaryRelation)
(=> 
    (holds instance ?REL IrreflexiveRelation) 
    (forall
        (?INST) 
        (not 
            (holds ?REL ?INST ?INST))))
(holds subclass SymmetricRelation BinaryRelation)
(=> 
    (holds instance ?REL SymmetricRelation) 
    (forall
        (?INST1 ?INST2) 
        (=> 
            (holds ?REL ?INST1 ?INST2) 
            (holds ?REL ?INST2 ?INST1))))
(holds subclass AsymmetricRelation IrreflexiveRelation)
(holds subclass AsymmetricRelation AntisymmetricRelation)
(=> 
    (and 
        (holds instance ?REL BinaryRelation) 
        (or 
            (holds domain ?REL 1 ?CLASS1) 
            (holds domainSubclass ?REL 1 ?CLASS1)) 
        (or 
            (holds domain ?REL 2 ?CLASS2) 
            (holds domainSubclass ?REL 2 ?CLASS2) 
            (holds range ?REL ?CLASS2) 
            (holds rangeSubclass ?REL ?CLASS2)) 
        (holds disjoint ?CLASS1 ?CLASS2)) 
    (holds instance ?REL AsymmetricRelation))
(holds subclass AntisymmetricRelation BinaryRelation)
(=> 
    (holds instance ?REL AntisymmetricRelation) 
    (forall
        (?INST1 ?INST2) 
        (=> 
            (and 
                (holds ?REL ?INST1 ?INST2) 
                (holds ?REL ?INST2 ?INST1)) 
            (equal ?INST1 ?INST2))))
(holds subclass TrichotomizingRelation BinaryRelation)
(=> 
    (holds instance ?REL TrichotomizingRelation) 
    (forall
        (?INST1 ?INST2) 
        (or 
            (holds ?REL ?INST1 ?INST2) 
            (equal ?INST1 ?INST2) 
            (holds ?REL ?INST2 ?INST1))))
(holds subclass TransitiveRelation BinaryRelation)
(=> 
    (holds instance ?REL TransitiveRelation) 
    (forall
        (?INST1 ?INST2 ?INST3) 
        (=> 
            (and 
                (holds ?REL ?INST1 ?INST2) 
                (holds ?REL ?INST2 ?INST3)) 
            (holds ?REL ?INST1 ?INST3))))
(holds subclass IntransitiveRelation BinaryRelation)
(=> 
    (holds instance ?REL IntransitiveRelation) 
    (forall
        (?INST1 ?INST2 ?INST3) 
        (=> 
            (and 
                (holds ?REL ?INST1 ?INST2) 
                (holds ?REL ?INST2 ?INST3)) 
            (not 
                (holds ?REL ?INST1 ?INST3)))))
(holds subclass PartialOrderingRelation TransitiveRelation)
(holds subclass PartialOrderingRelation AntisymmetricRelation)
(holds subclass PartialOrderingRelation ReflexiveRelation)
(holds subclass TotalOrderingRelation PartialOrderingRelation)
(holds subclass TotalOrderingRelation TrichotomizingRelation)
(=> 
    (holds instance ?REL TotalOrderingRelation) 
    (forall
        (?INST1 ?INST2) 
        (or 
            (holds ?REL ?INST1 ?INST2) 
            (holds ?REL ?INST2 ?INST1))))
(holds subclass EquivalenceRelation TransitiveRelation)
(holds subclass EquivalenceRelation SymmetricRelation)
(holds subclass EquivalenceRelation ReflexiveRelation)
(holds subclass CaseRole BinaryPredicate)
(holds instance CaseRole InheritableRelation)
(holds subclass CaseRole AsymmetricRelation)
(holds instance agent CaseRole)
(holds domain agent 1 Process)
(holds domain agent 2 Agent)
(=> 
    (holds instance ?PROCESS Process) 
    (exists
        (?CAUSE) 
        (holds agent ?PROCESS ?CAUSE)))
(holds instance destination CaseRole)
(holds domain destination 1 Process)
(holds domain destination 2 Entity)
(holds instance experiencer CaseRole)
(holds domain experiencer 1 Process)
(holds domain experiencer 2 Agent)
(holds subrelation instrument patient)
(holds domain instrument 1 Process)
(holds domain instrument 2 Object)
(holds instance origin CaseRole)
(holds domain origin 1 Process)
(holds domain origin 2 Object)
(holds instance patient CaseRole)
(holds domain patient 1 Process)
(holds domain patient 2 Entity)
(holds subrelation resource patient)
(holds domain resource 1 Process)
(holds domain resource 2 Object)
(holds disjointRelation resource result instrument)
(holds subrelation result patient)
(holds domain result 1 Process)
(holds domain result 2 Entity)
(holds instance InheritableRelation Class)
(holds subclass ProbabilityRelation Relation)
(holds instance ProbabilityRelation InheritableRelation)
(holds instance ProbabilityFn ProbabilityRelation)
(holds instance ProbabilityFn TotalValuedRelation)
(holds instance ProbabilityFn UnaryFunction)
(holds domain ProbabilityFn 1 Formula)
(holds range ProbabilityFn RealNumber)
(holds instance ProbabilityFn AsymmetricRelation)
(holds instance conditionalProbability ProbabilityRelation)
(holds instance conditionalProbability TernaryPredicate)
(holds domain conditionalProbability 1 Formula)
(holds domain conditionalProbability 2 Formula)
(holds domain conditionalProbability 3 RealNumber)
(holds instance increasesLikelihood ProbabilityRelation)
(holds instance increasesLikelihood BinaryPredicate)
(holds instance increasesLikelihood IrreflexiveRelation)
(holds domain increasesLikelihood 1 Formula)
(holds domain increasesLikelihood 2 Formula)
(holds disjointRelation increasesLikelihood decreasesLikelihood independentProbability)
(=> 
    (and 
        (holds increasesLikelihood ?FORMULA1 ?FORMULA2) 
        (equal 
            (ProbabilityFn ?FORMULA2) ?NUMBER1) 
        (holds conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER2)) 
    (> ?NUMBER2 ?NUMBER1))
(holds instance decreasesLikelihood ProbabilityRelation)
(holds instance decreasesLikelihood BinaryPredicate)
(holds instance decreasesLikelihood IrreflexiveRelation)
(holds domain decreasesLikelihood 1 Formula)
(holds domain decreasesLikelihood 2 Formula)
(=> 
    (and 
        (holds decreasesLikelihood ?FORMULA1 ?FORMULA2) 
        (equal 
            (ProbabilityFn ?FORMULA2) ?NUMBER1) 
        (holds conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER2)) 
    (< ?NUMBER2 ?NUMBER1))
(holds instance independentProbability ProbabilityRelation)
(holds instance independentProbability BinaryPredicate)
(holds instance independentProbability SymmetricRelation)
(holds domain independentProbability 1 Formula)
(holds domain independentProbability 2 Formula)
(=> 
    (and 
        (holds independentProbability ?FORMULA1 ?FORMULA2) 
        (equal 
            (ProbabilityFn ?FORMULA2) ?NUMBER1) 
        (holds conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER2)) 
    (equal ?NUMBER2 ?NUMBER1))
(=> 
    (and 
        (holds instance ?FORMULA1 Formula) 
        (holds instance ?FORMULA2 Formula)) 
    (or 
        (holds increasesLikelihood ?FORMULA1 ?FORMULA2) 
        (holds decreasesLikelihood ?FORMULA1 ?FORMULA2) 
        (holds independentProbability ?FORMULA1 ?FORMULA2)))
(holds subclass SpatialRelation Relation)
(holds instance SpatialRelation InheritableRelation)
(holds subclass TemporalRelation Relation)
(holds instance TemporalRelation InheritableRelation)
(holds instance IntentionalRelation InheritableRelation)
(=> 
    (and 
        (holds instance ?REL IntentionalRelation) 
        (holds ?REL ?AGENT ?ROW_arg0) 
        (holds inList ?OBJ 
            (ListFn ?ROW_arg0))) 
    (holds inScopeOfInterest ?AGENT ?OBJ))
(=> 
    (and 
        (holds instance ?REL IntentionalRelation) 
        (holds ?REL ?AGENT ?ROW_arg0 ?ROW_arg1) 
        (holds inList ?OBJ 
            (ListFn ?ROW_arg0 ?ROW_arg1))) 
    (holds inScopeOfInterest ?AGENT ?OBJ))
(=> 
    (and 
        (holds instance ?REL IntentionalRelation) 
        (holds ?REL ?AGENT ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
        (holds inList ?OBJ 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2))) 
    (holds inScopeOfInterest ?AGENT ?OBJ))
(=> 
    (and 
        (holds instance ?REL IntentionalRelation) 
        (holds ?REL ?AGENT ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
        (holds inList ?OBJ 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3))) 
    (holds inScopeOfInterest ?AGENT ?OBJ))
(=> 
    (and 
        (holds instance ?REL IntentionalRelation) 
        (holds ?REL ?AGENT ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
        (holds inList ?OBJ 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4))) 
    (holds inScopeOfInterest ?AGENT ?OBJ))
(=> 
    (and 
        (holds instance ?REL IntentionalRelation) 
        (holds ?REL ?AGENT ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
        (holds inList ?OBJ 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5))) 
    (holds inScopeOfInterest ?AGENT ?OBJ))
(=> 
    (and 
        (holds instance ?REL IntentionalRelation) 
        (holds ?REL ?AGENT ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
        (holds inList ?OBJ 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6))) 
    (holds inScopeOfInterest ?AGENT ?OBJ))
(=> 
    (and 
        (holds instance ?REL IntentionalRelation) 
        (holds ?REL ?AGENT ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
        (holds inList ?OBJ 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7))) 
    (holds inScopeOfInterest ?AGENT ?OBJ))
(=> 
    (and 
        (holds instance ?REL IntentionalRelation) 
        (holds ?REL ?AGENT ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
        (holds inList ?OBJ 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8))) 
    (holds inScopeOfInterest ?AGENT ?OBJ))
(=> 
    (and 
        (holds instance ?REL IntentionalRelation) 
        (holds ?REL ?AGENT ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
        (holds inList ?OBJ 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9))) 
    (holds inScopeOfInterest ?AGENT ?OBJ))
(holds instance prefers TernaryPredicate)
(holds instance prefers IntentionalRelation)
(holds domain prefers 1 CognitiveAgent)
(holds domain prefers 2 Formula)
(holds domain prefers 3 Formula)
(=> 
    (holds prefers ?AGENT ?FORMULA1 ?FORMULA2) 
    (not 
        (and 
            (holds true ?FORMULA1 True) 
            (holds true ?FORMULA2 True))))
(holds subclass PropositionalAttitude IntentionalRelation)
(holds subclass PropositionalAttitude AsymmetricRelation)
(holds instance PropositionalAttitude InheritableRelation)
(=> 
    (and 
        (holds instance ?REL PropositionalAttitude) 
        (holds ?REL ?AGENT ?FORMULA)) 
    (holds instance ?FORMULA Formula))
(holds subclass ObjectAttitude IntentionalRelation)
(holds instance ObjectAttitude InheritableRelation)
(holds disjoint ObjectAttitude PropositionalAttitude)
(=> 
    (and 
        (holds instance ?REL ObjectAttitude) 
        (holds ?REL ?AGENT ?THING)) 
    (holds instance ?THING Physical))
(holds instance inScopeOfInterest BinaryPredicate)
(holds instance inScopeOfInterest IntentionalRelation)
(holds domain inScopeOfInterest 1 CognitiveAgent)
(holds domain inScopeOfInterest 2 Entity)
(=> 
    (and 
        (holds instance ?PROCESS IntentionalProcess) 
        (holds agent ?PROCESS ?AGENT) 
        (holds patient ?PROCESS ?OBJECT)) 
    (holds inScopeOfInterest ?AGENT ?OBJECT))
(holds instance needs ObjectAttitude)
(holds subrelation needs inScopeOfInterest)
(holds domain needs 1 CognitiveAgent)
(holds domain needs 2 Physical)
(=> 
    (holds needs ?AGENT ?OBJECT) 
    (holds wants ?AGENT ?OBJECT))
(holds instance wants ObjectAttitude)
(holds subrelation wants inScopeOfInterest)
(holds relatedInternalConcept wants desires)
(holds domain wants 1 CognitiveAgent)
(holds domain wants 2 Physical)
(=> 
    (holds wants ?AGENT ?OBJ) 
    (exists
        (?PURP) 
        (holds hasPurposeForAgent ?OBJ ?PURP ?AGENT)))
(=> 
    (holds wants ?AGENT ?OBJ) 
    (holds desires ?AGENT `(holds possesses ?AGENT ?OBJ)))
(holds instance desires PropositionalAttitude)
(holds subrelation desires inScopeOfInterest)
(holds relatedInternalConcept desires wants)
(holds domain desires 1 CognitiveAgent)
(holds domain desires 2 Formula)
(holds instance considers PropositionalAttitude)
(holds subrelation considers inScopeOfInterest)
(holds domain considers 1 CognitiveAgent)
(holds domain considers 2 Formula)
(holds instance believes PropositionalAttitude)
(holds subrelation believes inScopeOfInterest)
(holds domain believes 1 CognitiveAgent)
(holds domain believes 2 Formula)
(=> 
    (holds believes ?AGENT ?FORMULA) 
    (exists
        (?TIME) 
        (holds holdsDuring ?TIME `(holds considers ?AGENT ?FORMULA))))
(holds instance knows PropositionalAttitude)
(holds subrelation knows inScopeOfInterest)
(holds domain knows 1 CognitiveAgent)
(holds domain knows 2 Formula)
(=> 
    (holds knows ?AGENT ?FORMULA) 
    (holds believes ?AGENT ?FORMULA))
(=> 
    (holds knows ?AGENT ?FORMULA) 
    (holds true ?FORMULA True))
(holds subclass TernaryRelation Relation)
(holds instance TernaryRelation InheritableRelation)
(=> 
    (holds instance ?REL TernaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0))))
(=> 
    (holds instance ?REL TernaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1))))
(=> 
    (holds instance ?REL TernaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2))))
(=> 
    (holds instance ?REL TernaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3))))
(=> 
    (holds instance ?REL TernaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4))))
(=> 
    (holds instance ?REL TernaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5))))
(=> 
    (holds instance ?REL TernaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6))))
(=> 
    (holds instance ?REL TernaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7))))
(=> 
    (holds instance ?REL TernaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8))))
(=> 
    (holds instance ?REL TernaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9))))
(holds subclass QuaternaryRelation Relation)
(holds instance QuaternaryRelation InheritableRelation)
(=> 
    (holds instance ?REL QuaternaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0))))
(=> 
    (holds instance ?REL QuaternaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1))))
(=> 
    (holds instance ?REL QuaternaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2))))
(=> 
    (holds instance ?REL QuaternaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3))))
(=> 
    (holds instance ?REL QuaternaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4))))
(=> 
    (holds instance ?REL QuaternaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5))))
(=> 
    (holds instance ?REL QuaternaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6))))
(=> 
    (holds instance ?REL QuaternaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7))))
(=> 
    (holds instance ?REL QuaternaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8))))
(=> 
    (holds instance ?REL QuaternaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9))))
(holds subclass QuintaryRelation Relation)
(holds instance QuintaryRelation InheritableRelation)
(=> 
    (holds instance ?REL QuintaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0))))
(=> 
    (holds instance ?REL QuintaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1))))
(=> 
    (holds instance ?REL QuintaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2))))
(=> 
    (holds instance ?REL QuintaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3))))
(=> 
    (holds instance ?REL QuintaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4))))
(=> 
    (holds instance ?REL QuintaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5))))
(=> 
    (holds instance ?REL QuintaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6))))
(=> 
    (holds instance ?REL QuintaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7))))
(=> 
    (holds instance ?REL QuintaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8))))
(=> 
    (holds instance ?REL QuintaryRelation) 
    (not 
        (exists
            (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
            (holds ?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9))))
(holds subclass List Relation)
(=> 
    (holds instance ?LIST List) 
    (exists
        (?NUMBER1) 
        (exists
            (?ITEM1) 
            (and 
                (not 
                    (equal 
                        (ListOrderFn ?LIST ?NUMBER1) ?ITEM1)) 
                (forall
                    (?NUMBER2) 
                    (=> 
                        (and 
                            (holds instance ?NUMBER2 PositiveInteger) 
                            (< ?NUMBER2 ?NUMBER1)) 
                        (exists
                            (?ITEM2) 
                            (equal 
                                (ListOrderFn ?LIST ?NUMBER2) ?ITEM2))))))))
(holds subclass UniqueList List)
(=> 
    (holds instance ?LIST UniqueList) 
    (forall
        (?NUMBER1 ?NUMBER2) 
        (=> 
            (equal 
                (ListOrderFn ?LIST ?NUMBER1) 
                (ListOrderFn ?LIST ?NUMBER2)) 
            (equal ?NUMBER1 ?NUMBER2))))
(holds instance NullList List)
(<=> 
    (equal ?LIST NullList) 
    (and 
        (holds instance ?LIST List) 
        (not 
            (exists
                (?ITEM) 
                (holds inList ?ITEM ?LIST)))))
(holds instance ListFn Function)
(holds instance ListFn VariableArityRelation)
(holds instance ListFn TotalValuedRelation)
(holds range ListFn List)
(=> 
    (holds exhaustiveDecomposition ?CLASS ?ROW_arg0) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?OBJ ?CLASS) 
            (exists
                (?ITEM) 
                (and 
                    (holds inList ?ITEM 
                        (ListFn ?ROW_arg0)) 
                    (holds instance ?OBJ ?ITEM))))))
(=> 
    (holds exhaustiveDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?OBJ ?CLASS) 
            (exists
                (?ITEM) 
                (and 
                    (holds inList ?ITEM 
                        (ListFn ?ROW_arg0 ?ROW_arg1)) 
                    (holds instance ?OBJ ?ITEM))))))
(=> 
    (holds exhaustiveDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?OBJ ?CLASS) 
            (exists
                (?ITEM) 
                (and 
                    (holds inList ?ITEM 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
                    (holds instance ?OBJ ?ITEM))))))
(=> 
    (holds exhaustiveDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?OBJ ?CLASS) 
            (exists
                (?ITEM) 
                (and 
                    (holds inList ?ITEM 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
                    (holds instance ?OBJ ?ITEM))))))
(=> 
    (holds exhaustiveDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?OBJ ?CLASS) 
            (exists
                (?ITEM) 
                (and 
                    (holds inList ?ITEM 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
                    (holds instance ?OBJ ?ITEM))))))
(=> 
    (holds exhaustiveDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?OBJ ?CLASS) 
            (exists
                (?ITEM) 
                (and 
                    (holds inList ?ITEM 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
                    (holds instance ?OBJ ?ITEM))))))
(=> 
    (holds exhaustiveDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?OBJ ?CLASS) 
            (exists
                (?ITEM) 
                (and 
                    (holds inList ?ITEM 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
                    (holds instance ?OBJ ?ITEM))))))
(=> 
    (holds exhaustiveDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?OBJ ?CLASS) 
            (exists
                (?ITEM) 
                (and 
                    (holds inList ?ITEM 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
                    (holds instance ?OBJ ?ITEM))))))
(=> 
    (holds exhaustiveDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?OBJ ?CLASS) 
            (exists
                (?ITEM) 
                (and 
                    (holds inList ?ITEM 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
                    (holds instance ?OBJ ?ITEM))))))
(=> 
    (holds exhaustiveDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
    (forall
        (?OBJ) 
        (=> 
            (holds instance ?OBJ ?CLASS) 
            (exists
                (?ITEM) 
                (and 
                    (holds inList ?ITEM 
                        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
                    (holds instance ?OBJ ?ITEM))))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0) 
    (forall
        (?ITEM) 
        (=> 
            (holds inList ?ITEM 
                (ListFn ?ROW_arg0)) 
            (holds subclass ?ITEM ?CLASS))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1) 
    (forall
        (?ITEM) 
        (=> 
            (holds inList ?ITEM 
                (ListFn ?ROW_arg0 ?ROW_arg1)) 
            (holds subclass ?ITEM ?CLASS))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
    (forall
        (?ITEM) 
        (=> 
            (holds inList ?ITEM 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
            (holds subclass ?ITEM ?CLASS))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
    (forall
        (?ITEM) 
        (=> 
            (holds inList ?ITEM 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
            (holds subclass ?ITEM ?CLASS))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
    (forall
        (?ITEM) 
        (=> 
            (holds inList ?ITEM 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
            (holds subclass ?ITEM ?CLASS))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
    (forall
        (?ITEM) 
        (=> 
            (holds inList ?ITEM 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
            (holds subclass ?ITEM ?CLASS))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
    (forall
        (?ITEM) 
        (=> 
            (holds inList ?ITEM 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
            (holds subclass ?ITEM ?CLASS))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
    (forall
        (?ITEM) 
        (=> 
            (holds inList ?ITEM 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
            (holds subclass ?ITEM ?CLASS))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
    (forall
        (?ITEM) 
        (=> 
            (holds inList ?ITEM 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
            (holds subclass ?ITEM ?CLASS))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
    (forall
        (?ITEM) 
        (=> 
            (holds inList ?ITEM 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
            (holds subclass ?ITEM ?CLASS))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0) 
    (forall
        (?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds inList ?ITEM1 
                    (ListFn ?ROW_arg0)) 
                (holds inList ?ITEM2 
                    (ListFn ?ROW_arg0)) 
                (not 
                    (equal ?ITEM1 ?ITEM2))) 
            (holds disjoint ?ITEM1 ?ITEM2))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1) 
    (forall
        (?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds inList ?ITEM1 
                    (ListFn ?ROW_arg0 ?ROW_arg1)) 
                (holds inList ?ITEM2 
                    (ListFn ?ROW_arg0 ?ROW_arg1)) 
                (not 
                    (equal ?ITEM1 ?ITEM2))) 
            (holds disjoint ?ITEM1 ?ITEM2))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
    (forall
        (?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds inList ?ITEM1 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
                (holds inList ?ITEM2 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
                (not 
                    (equal ?ITEM1 ?ITEM2))) 
            (holds disjoint ?ITEM1 ?ITEM2))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
    (forall
        (?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds inList ?ITEM1 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
                (holds inList ?ITEM2 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
                (not 
                    (equal ?ITEM1 ?ITEM2))) 
            (holds disjoint ?ITEM1 ?ITEM2))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
    (forall
        (?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds inList ?ITEM1 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
                (holds inList ?ITEM2 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
                (not 
                    (equal ?ITEM1 ?ITEM2))) 
            (holds disjoint ?ITEM1 ?ITEM2))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
    (forall
        (?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds inList ?ITEM1 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
                (holds inList ?ITEM2 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
                (not 
                    (equal ?ITEM1 ?ITEM2))) 
            (holds disjoint ?ITEM1 ?ITEM2))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
    (forall
        (?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds inList ?ITEM1 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
                (holds inList ?ITEM2 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
                (not 
                    (equal ?ITEM1 ?ITEM2))) 
            (holds disjoint ?ITEM1 ?ITEM2))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
    (forall
        (?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds inList ?ITEM1 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
                (holds inList ?ITEM2 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
                (not 
                    (equal ?ITEM1 ?ITEM2))) 
            (holds disjoint ?ITEM1 ?ITEM2))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
    (forall
        (?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds inList ?ITEM1 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
                (holds inList ?ITEM2 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
                (not 
                    (equal ?ITEM1 ?ITEM2))) 
            (holds disjoint ?ITEM1 ?ITEM2))))
(=> 
    (holds disjointDecomposition ?CLASS ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
    (forall
        (?ITEM1 ?ITEM2) 
        (=> 
            (and 
                (holds inList ?ITEM1 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
                (holds inList ?ITEM2 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
                (not 
                    (equal ?ITEM1 ?ITEM2))) 
            (holds disjoint ?ITEM1 ?ITEM2))))
(holds instance ListOrderFn BinaryFunction)
(holds instance ListOrderFn PartialValuedRelation)
(holds domain ListOrderFn 1 List)
(holds domain ListOrderFn 2 PositiveInteger)
(holds range ListOrderFn Entity)
(=> 
    (and 
        (holds instance ?LIST1 List) 
        (holds instance ?LIST2 List) 
        (forall
            (?NUMBER) 
            (equal 
                (ListOrderFn ?LIST1 ?NUMBER) 
                (ListOrderFn ?LIST2 ?NUMBER)))) 
    (equal ?LIST1 ?LIST2))
(=> 
    (and 
        (holds domain ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0)) 
    (holds instance 
        (ListOrderFn 
            (ListFn ?ROW_arg0) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domain ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1)) 
    (holds instance 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domain ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
    (holds instance 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domain ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
    (holds instance 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domain ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
    (holds instance 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domain ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
    (holds instance 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domain ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
    (holds instance 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domain ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
    (holds instance 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domain ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
    (holds instance 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domain ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
    (holds instance 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domainSubclass ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0)) 
    (holds subclass 
        (ListOrderFn 
            (ListFn ?ROW_arg0) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domainSubclass ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1)) 
    (holds subclass 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domainSubclass ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
    (holds subclass 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domainSubclass ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
    (holds subclass 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domainSubclass ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
    (holds subclass 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domainSubclass ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
    (holds subclass 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domainSubclass ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
    (holds subclass 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domainSubclass ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
    (holds subclass 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domainSubclass ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
    (holds subclass 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) ?NUMBER) ?CLASS))
(=> 
    (and 
        (holds domainSubclass ?REL ?NUMBER ?CLASS) 
        (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
    (holds subclass 
        (ListOrderFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) ?NUMBER) ?CLASS))
(holds instance ListLengthFn UnaryFunction)
(holds instance ListLengthFn TotalValuedRelation)
(holds domain ListLengthFn 1 List)
(holds range ListLengthFn NonnegativeInteger)
(=> 
    (and 
        (equal 
            (ListLengthFn ?LIST) ?NUMBER1) 
        (holds instance ?LIST List) 
        (holds instance ?NUMBER1 PositiveInteger)) 
    (forall
        (?NUMBER2) 
        (<=> 
            (exists
                (?ITEM) 
                (and 
                    (equal 
                        (ListOrderFn ?LIST ?NUMBER2) ?ITEM) 
                    (holds inList ?ITEM ?LIST))) 
            (<= ?NUMBER2 ?NUMBER1))))
(equal 
    (ListLengthFn 
        (ListFn ?ROW_arg0  ?ITEM)) 
    (SuccessorFn 
        (ListLengthFn 
            (ListFn ?ROW_arg0))))
(equal 
    (ListLengthFn 
        (ListFn ?ROW_arg0 ?ROW_arg1  ?ITEM)) 
    (SuccessorFn 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1))))
(equal 
    (ListLengthFn 
        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2  ?ITEM)) 
    (SuccessorFn 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2))))
(equal 
    (ListLengthFn 
        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3  ?ITEM)) 
    (SuccessorFn 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3))))
(equal 
    (ListLengthFn 
        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4  ?ITEM)) 
    (SuccessorFn 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4))))
(equal 
    (ListLengthFn 
        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5  ?ITEM)) 
    (SuccessorFn 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5))))
(equal 
    (ListLengthFn 
        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6  ?ITEM)) 
    (SuccessorFn 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6))))
(equal 
    (ListLengthFn 
        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7  ?ITEM)) 
    (SuccessorFn 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7))))
(equal 
    (ListLengthFn 
        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8  ?ITEM)) 
    (SuccessorFn 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8))))
(equal 
    (ListLengthFn 
        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9  ?ITEM)) 
    (SuccessorFn 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9))))
(equal 
    (ListOrderFn 
        (ListFn ?ROW_arg0  ?ITEM) 
        (ListLengthFn 
            (ListFn ?ROW_arg0  ?ITEM))) ?ITEM)
(equal 
    (ListOrderFn 
        (ListFn ?ROW_arg0 ?ROW_arg1  ?ITEM) 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1  ?ITEM))) ?ITEM)
(equal 
    (ListOrderFn 
        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2  ?ITEM) 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2  ?ITEM))) ?ITEM)
(equal 
    (ListOrderFn 
        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3  ?ITEM) 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3  ?ITEM))) ?ITEM)
(equal 
    (ListOrderFn 
        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4  ?ITEM) 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4  ?ITEM))) ?ITEM)
(equal 
    (ListOrderFn 
        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5  ?ITEM) 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5  ?ITEM))) ?ITEM)
(equal 
    (ListOrderFn 
        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6  ?ITEM) 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6  ?ITEM))) ?ITEM)
(equal 
    (ListOrderFn 
        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7  ?ITEM) 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7  ?ITEM))) ?ITEM)
(equal 
    (ListOrderFn 
        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8  ?ITEM) 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8  ?ITEM))) ?ITEM)
(equal 
    (ListOrderFn 
        (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9  ?ITEM) 
        (ListLengthFn 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9  ?ITEM))) ?ITEM)
(=> 
    (holds valence ?REL ?NUMBER) 
    (forall
        (?ROW_arg0) 
        (=> 
            (holds ?REL ?ROW_arg0) 
            (equal 
                (ListLengthFn 
                    (ListFn ?ROW_arg0)) ?NUMBER))))
(=> 
    (holds valence ?REL ?NUMBER) 
    (forall
        (?ROW_arg0 ?ROW_arg1) 
        (=> 
            (holds ?REL ?ROW_arg0 ?ROW_arg1) 
            (equal 
                (ListLengthFn 
                    (ListFn ?ROW_arg0 ?ROW_arg1)) ?NUMBER))))
(=> 
    (holds valence ?REL ?NUMBER) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
        (=> 
            (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
            (equal 
                (ListLengthFn 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) ?NUMBER))))
(=> 
    (holds valence ?REL ?NUMBER) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
        (=> 
            (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
            (equal 
                (ListLengthFn 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) ?NUMBER))))
(=> 
    (holds valence ?REL ?NUMBER) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
        (=> 
            (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
            (equal 
                (ListLengthFn 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) ?NUMBER))))
(=> 
    (holds valence ?REL ?NUMBER) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
        (=> 
            (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
            (equal 
                (ListLengthFn 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) ?NUMBER))))
(=> 
    (holds valence ?REL ?NUMBER) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
        (=> 
            (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
            (equal 
                (ListLengthFn 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) ?NUMBER))))
(=> 
    (holds valence ?REL ?NUMBER) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
        (=> 
            (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
            (equal 
                (ListLengthFn 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) ?NUMBER))))
(=> 
    (holds valence ?REL ?NUMBER) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
        (=> 
            (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
            (equal 
                (ListLengthFn 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) ?NUMBER))))
(=> 
    (holds valence ?REL ?NUMBER) 
    (forall
        (?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
        (=> 
            (holds ?REL ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
            (equal 
                (ListLengthFn 
                    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) ?NUMBER))))
(=> 
    (and 
        (equal 
            (ListLengthFn ?LIST1) ?NUMBER) 
        (holds instance ?LIST List) 
        (holds instance ?NUMBER1 PositiveInteger)) 
    (exists
        (?LIST2 ?ITEM) 
        (and 
            (holds initialList ?LIST1 ?LIST2) 
            (equal 
                (SuccessorFn ?NUMBER) 
                (ListLengthFn ?LIST2)) 
            (equal 
                (ListOrderFn ?LIST2 
                    (SuccessorFn ?NUMBER)) ?ITEM))))
(holds instance ListConcatenateFn BinaryFunction)
(holds instance ListConcatenateFn TotalValuedRelation)
(holds domain ListConcatenateFn 1 List)
(holds domain ListConcatenateFn 2 List)
(holds range ListConcatenateFn List)
(<=> 
    (equal ?LIST3 
        (ListConcatenateFn ?LIST1 ?LIST2)) 
    (forall
        (?NUMBER1 ?NUMBER2) 
        (=> 
            (and 
                (<= ?NUMBER1 
                    (ListLengthFn ?LIST1)) 
                (<= ?NUMBER2 
                    (ListLengthFn ?LIST2)) 
                (holds instance ?NUMBER1 PositiveInteger) 
                (holds instance ?NUMBER2 PositiveInteger)) 
            (and 
                (equal 
                    (ListOrderFn ?LIST3 ?NUMBER1) 
                    (ListOrderFn ?LIST1 ?NUMBER1)) 
                (equal 
                    (ListOrderFn ?LIST3 
                        (AdditionFn 
                            (ListLengthFn ?LIST1) ?NUMBER2)) 
                    (ListOrderFn ?LIST2 ?NUMBER2))))))
(holds instance inList BinaryPredicate)
(holds instance inList IrreflexiveRelation)
(holds instance inList AsymmetricRelation)
(holds domain inList 1 Entity)
(holds domain inList 2 List)
(=> 
    (holds inList ?ITEM ?LIST) 
    (exists
        (?NUMBER) 
        (equal 
            (ListOrderFn ?LIST ?NUMBER) ?ITEM)))
(holds instance subList BinaryPredicate)
(holds instance subList PartialOrderingRelation)
(holds domain subList 1 List)
(holds domain subList 2 List)
(=> 
    (holds subList ?LIST1 ?LIST2) 
    (forall
        (?ITEM) 
        (=> 
            (holds inList ?ITEM ?LIST1) 
            (holds inList ?ITEM ?LIST2))))
(=> 
    (holds subList ?LIST1 ?LIST2) 
    (exists
        (?NUMBER3) 
        (forall
            (?ITEM) 
            (=> 
                (holds inList ?ITEM ?LIST1) 
                (exists
                    (?NUMBER1 ?NUMBER2) 
                    (and 
                        (equal 
                            (ListOrderFn ?LIST1 ?NUMBER1) ?ITEM) 
                        (equal 
                            (ListOrderFn ?LIST2 ?NUMBER2) ?ITEM) 
                        (equal ?NUMBER2 
                            (AdditionFn ?NUMBER1 ?NUMBER3))))))))
(holds instance initialList BinaryPredicate)
(holds instance initialList PartialOrderingRelation)
(holds subrelation initialList subList)
(=> 
    (holds initialList ?LIST1 ?LIST2) 
    (forall
        (?NUMBER1 ?NUMBER2) 
        (=> 
            (and 
                (equal 
                    (ListLengthFn ?LIST1) ?NUMBER1) 
                (<= ?NUMBER2 ?NUMBER1)) 
            (equal 
                (ListOrderFn ?LIST1 ?NUMBER2) 
                (ListOrderFn ?LIST2 ?NUMBER2)))))
(holds initialList 
    (ListFn ?ROW_arg0) 
    (ListFn ?ROW_arg0  ?ITEM))
(holds initialList 
    (ListFn ?ROW_arg0 ?ROW_arg1) 
    (ListFn ?ROW_arg0 ?ROW_arg1  ?ITEM))
(holds initialList 
    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2  ?ITEM))
(holds initialList 
    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3  ?ITEM))
(holds initialList 
    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4  ?ITEM))
(holds initialList 
    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5  ?ITEM))
(holds initialList 
    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6  ?ITEM))
(holds initialList 
    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7  ?ITEM))
(holds initialList 
    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8  ?ITEM))
(holds initialList 
    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
    (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9  ?ITEM))
(holds subclass Predicate Relation)
(holds instance Predicate InheritableRelation)
(holds subclass Function SingleValuedRelation)
(holds instance Function InheritableRelation)
(holds subclass UnaryFunction Function)
(holds subclass UnaryFunction BinaryRelation)
(holds instance UnaryFunction InheritableRelation)
(=> 
    (holds instance ?FUNCTION UnaryFunction) 
    (holds valence ?FUNCTION 1))
(holds subclass OneToOneFunction UnaryFunction)
(=> 
    (holds instance ?FUN OneToOneFunction) 
    (forall
        (?ARG1 ?ARG2) 
        (=> 
            (and 
                (holds domain ?FUN 1 ?CLASS) 
                (holds instance ?ARG1 ?CLASS) 
                (holds instance ?ARG2 ?CLASS) 
                (not 
                    (equal ?ARG1 ?ARG2))) 
            (not 
                (equal 
                    (AssignmentFn ?FUN ?ARG1) 
                    (AssignmentFn ?FUN ?ARG2))))))
(holds subclass SequenceFunction OneToOneFunction)
(=> 
    (and 
        (holds instance ?SEQ SequenceFunction) 
        (holds range ?SEQ ?CLASS)) 
    (holds subclass ?CLASS Integer))
(holds subclass BinaryFunction Function)
(holds subclass BinaryFunction TernaryRelation)
(holds instance BinaryFunction InheritableRelation)
(=> 
    (holds instance ?FUNCTION BinaryFunction) 
    (holds valence ?FUNCTION 2))
(holds subclass AssociativeFunction BinaryFunction)
(=> 
    (holds instance ?FUNCTION AssociativeFunction) 
    (forall
        (?INST1 ?INST2 ?INST3) 
        (=> 
            (and 
                (holds domain ?FUNCTION 1 ?CLASS) 
                (holds instance ?INST1 ?CLASS) 
                (holds instance ?INST2 ?CLASS) 
                (holds instance ?INST3 ?CLASS)) 
            (equal 
                (AssignmentFn ?FUNCTION ?INST1 
                    (AssignmentFn ?FUNCTION ?INST2 ?INST3)) 
                (AssignmentFn ?FUNCTION 
                    (AssignmentFn ?FUNCTION ?INST1 ?INST2) ?INST3)))))
(holds subclass CommutativeFunction BinaryFunction)
(=> 
    (holds instance ?FUNCTION CommutativeFunction) 
    (forall
        (?INST1 ?INST2) 
        (=> 
            (and 
                (holds domain ?FUNCTION 1 ?CLASS) 
                (holds instance ?INST1 ?CLASS) 
                (holds instance ?INST2 ?CLASS)) 
            (equal 
                (AssignmentFn ?FUNCTION ?INST1 ?INST2) 
                (AssignmentFn ?FUNCTION ?INST2 ?INST1)))))
(holds subclass TernaryFunction Function)
(holds subclass TernaryFunction QuaternaryRelation)
(holds instance TernaryFunction InheritableRelation)
(=> 
    (holds instance ?FUNCTION TernaryFunction) 
    (holds valence ?FUNCTION 3))
(holds subclass QuaternaryFunction Function)
(holds subclass QuaternaryFunction QuintaryRelation)
(holds instance QuaternaryFunction InheritableRelation)
(=> 
    (holds instance ?FUNCTION QuaternaryFunction) 
    (holds valence ?FUNCTION 4))
(holds subclass ContinuousFunction Function)
(holds subclass LogicalOperator Predicate)
(holds subclass BinaryPredicate Predicate)
(holds subclass BinaryPredicate BinaryRelation)
(holds instance BinaryPredicate InheritableRelation)
(=> 
    (holds instance ?REL BinaryPredicate) 
    (holds valence ?REL 2))
(holds subclass TernaryPredicate Predicate)
(holds subclass TernaryPredicate TernaryRelation)
(holds instance TernaryPredicate InheritableRelation)
(=> 
    (holds instance ?REL TernaryPredicate) 
    (holds valence ?REL 3))
(holds subclass QuaternaryPredicate Predicate)
(holds subclass QuaternaryPredicate QuaternaryRelation)
(holds instance QuaternaryPredicate InheritableRelation)
(=> 
    (holds instance ?REL QuaternaryPredicate) 
    (holds valence ?REL 4))
(holds subclass QuintaryPredicate Predicate)
(holds subclass QuintaryPredicate QuintaryRelation)
(holds instance QuintaryPredicate InheritableRelation)
(=> 
    (holds instance ?REL QuintaryPredicate) 
    (holds valence ?REL 5))
(holds subclass VariableArityRelation Relation)
(=> 
    (holds instance ?REL VariableArityRelation) 
    (not 
        (exists
            (?INT) 
            (holds valence ?REL ?INT))))
(holds subclass RelationExtendedToQuantities Relation)
(holds instance RelationExtendedToQuantities InheritableRelation)
(holds subclass Proposition Abstract)
(holds instance closedOn BinaryPredicate)
(holds instance closedOn AsymmetricRelation)
(holds domain closedOn 1 Function)
(holds domain closedOn 2 SetOrClass)
(=> 
    (and 
        (holds closedOn ?FUNCTION ?CLASS) 
        (holds instance ?FUNCTION UnaryFunction)) 
    (forall
        (?INST) 
        (=> 
            (holds instance ?INST ?CLASS) 
            (holds instance 
                (AssignmentFn ?FUNCTION ?INST) ?CLASS))))
(=> 
    (and 
        (holds closedOn ?FUNCTION ?CLASS) 
        (holds instance ?FUNCTION BinaryFunction)) 
    (forall
        (?INST1 ?INST2) 
        (=> 
            (and 
                (holds instance ?INST1 ?CLASS) 
                (holds instance ?INST2 ?CLASS)) 
            (holds instance 
                (AssignmentFn ?FUNCTION ?INST1 ?INST2) ?CLASS))))
(holds instance reflexiveOn BinaryPredicate)
(holds instance reflexiveOn AsymmetricRelation)
(holds domain reflexiveOn 1 BinaryRelation)
(holds domain reflexiveOn 2 SetOrClass)
(=> 
    (holds reflexiveOn ?RELATION ?CLASS) 
    (forall
        (?INST) 
        (=> 
            (holds instance ?INST ?CLASS) 
            (holds ?RELATION ?INST ?INST))))
(holds instance irreflexiveOn BinaryPredicate)
(holds instance irreflexiveOn AsymmetricRelation)
(holds domain irreflexiveOn 1 BinaryRelation)
(holds domain irreflexiveOn 2 SetOrClass)
(=> 
    (holds irreflexiveOn ?RELATION ?CLASS) 
    (forall
        (?INST) 
        (=> 
            (holds instance ?INST ?CLASS) 
            (not 
                (holds ?RELATION ?INST ?INST)))))
(holds instance partialOrderingOn BinaryPredicate)
(holds instance partialOrderingOn AsymmetricRelation)
(holds domain partialOrderingOn 1 BinaryRelation)
(holds domain partialOrderingOn 2 SetOrClass)
(=> 
    (holds partialOrderingOn ?RELATION ?CLASS) 
    (and 
        (holds reflexiveOn ?RELATION ?CLASS) 
        (holds instance ?RELATION TransitiveRelation) 
        (holds instance ?RELATION AntisymmetricRelation)))
(holds instance totalOrderingOn BinaryPredicate)
(holds instance totalOrderingOn AsymmetricRelation)
(holds domain totalOrderingOn 1 BinaryRelation)
(holds domain totalOrderingOn 2 SetOrClass)
(<=> 
    (holds totalOrderingOn ?RELATION ?CLASS) 
    (and 
        (holds partialOrderingOn ?RELATION ?CLASS) 
        (holds trichotomizingOn ?RELATION ?CLASS)))
(holds instance trichotomizingOn BinaryPredicate)
(holds instance trichotomizingOn AsymmetricRelation)
(holds domain trichotomizingOn 1 BinaryRelation)
(holds domain trichotomizingOn 2 SetOrClass)
(=> 
    (holds trichotomizingOn ?RELATION ?CLASS) 
    (forall
        (?INST1 ?INST2) 
        (=> 
            (and 
                (holds instance ?INST1 ?CLASS) 
                (holds instance ?INST2 ?CLASS)) 
            (or 
                (holds ?RELATION ?INST1 ?INST2) 
                (holds ?RELATION ?INST2 ?INST1) 
                (equal ?INST1 ?INST2)))))
(holds instance equivalenceRelationOn BinaryPredicate)
(holds instance equivalenceRelationOn AsymmetricRelation)
(holds domain equivalenceRelationOn 1 BinaryRelation)
(holds domain equivalenceRelationOn 2 SetOrClass)
(=> 
    (holds equivalenceRelationOn ?RELATION ?CLASS) 
    (and 
        (holds instance ?RELATION TransitiveRelation) 
        (holds instance ?RELATION SymmetricRelation) 
        (holds reflexiveOn ?RELATION ?CLASS)))
(holds instance distributes BinaryPredicate)
(holds instance distributes BinaryRelation)
(holds domain distributes 1 BinaryFunction)
(holds domain distributes 2 BinaryFunction)
(=> 
    (holds distributes ?FUNCTION1 ?FUNCTION2) 
    (forall
        (?INST1 ?INST2 ?INST3) 
        (=> 
            (and 
                (holds domain ?FUNCTION1 1 ?CLASS1) 
                (holds instance ?INST1 ?CLASS1) 
                (holds instance ?INST2 ?CLASS1) 
                (holds instance ?INST3 ?CLASS1) 
                (holds domain ?FUNCTION2 1 ?CLASS2) 
                (holds instance ?INST1 ?CLASS2) 
                (holds instance ?INST2 ?CLASS2) 
                (holds instance ?INST3 ?CLASS2)) 
            (equal 
                (AssignmentFn ?FUNCTION1 ?INST1 
                    (AssignmentFn ?FUNCTION2 ?INST2 ?INST3)) 
                (AssignmentFn ?FUNCTION2 
                    (AssignmentFn ?FUNCTION1 ?INST1 ?INST2) 
                    (AssignmentFn ?FUNCTION1 ?INST1 ?INST3))))))
(holds instance causes BinaryPredicate)
(holds instance causes AsymmetricRelation)
(holds domain causes 1 Process)
(holds domain causes 2 Process)
(holds relatedInternalConcept causes causesSubclass)
(=> 
    (holds instance ?PROC1 Process) 
    (exists
        (?PROC2) 
        (holds causes ?PROC2 ?PROC1)))
(holds instance causesSubclass BinaryPredicate)
(holds instance causesSubclass AsymmetricRelation)
(holds domainSubclass causesSubclass 1 Process)
(holds domainSubclass causesSubclass 2 Process)
(=> 
    (holds causesSubclass ?PROC1 ?PROC2) 
    (forall
        (?INST2) 
        (=> 
            (holds instance ?INST2 ?PROC2) 
            (exists
                (?INST1) 
                (and 
                    (holds instance ?INST1 ?PROC1) 
                    (holds causes ?INST1 ?INST2))))))
(holds instance copy BinaryPredicate)
(holds instance copy EquivalenceRelation)
(holds domain copy 1 Object)
(holds domain copy 2 Object)
(=> 
    (holds copy ?OBJ1 ?OBJ2) 
    (forall
        (?ATTR) 
        (=> 
            (holds attribute ?OBJ1 ?ATTR) 
            (holds attribute ?OBJ2 ?ATTR))))
(holds instance time BinaryPredicate)
(holds instance time TemporalRelation)
(holds instance time AsymmetricRelation)
(holds domain time 1 Physical)
(holds domain time 2 TimePosition)
(holds instance holdsDuring BinaryPredicate)
(holds instance holdsDuring AsymmetricRelation)
(holds domain holdsDuring 1 TimePosition)
(holds domain holdsDuring 2 Formula)
(=> 
    (and 
        (holds holdsDuring ?TIME ?SITUATION1) 
        (holds entails ?SITUATION1 ?SITUATION2)) 
    (holds holdsDuring ?TIME ?SITUATION2))
(=> 
    (holds holdsDuring ?TIME `(not ?SITUATION)) 
    (not 
        (holds holdsDuring ?TIME ?SITUATION)))
(holds instance capability TernaryPredicate)
(holds domainSubclass capability 1 Process)
(holds domain capability 2 CaseRole)
(holds domain capability 3 Object)
(=> 
    (and 
        (holds instance ?ROLE CaseRole) 
        (holds ?ROLE ?ARG1 ?ARG2) 
        (holds instance ?ARG1 ?PROC) 
        (holds subclass ?PROC Process)) 
    (holds capability ?PROC ?ROLE ?ARG2))
(holds instance exploits BinaryPredicate)
(holds instance exploits AsymmetricRelation)
(holds domain exploits 1 Object)
(holds domain exploits 2 Agent)
(=> 
    (holds exploits ?OBJ ?AGENT) 
    (exists
        (?PROCESS) 
        (and 
            (holds agent ?PROCESS ?AGENT) 
            (holds resource ?PROCESS ?OBJ))))
(holds instance hasPurpose BinaryPredicate)
(holds instance hasPurpose AsymmetricRelation)
(holds domain hasPurpose 1 Physical)
(holds domain hasPurpose 2 Formula)
(holds instance hasPurposeForAgent TernaryPredicate)
(holds domain hasPurposeForAgent 1 Physical)
(holds domain hasPurposeForAgent 2 Formula)
(holds domain hasPurposeForAgent 3 CognitiveAgent)
(=> 
    (holds hasPurpose ?THING ?PURPOSE) 
    (exists
        (?AGENT) 
        (holds hasPurposeForAgent ?THING ?PURPOSE ?AGENT)))
(holds instance hasSkill BinaryPredicate)
(holds instance hasSkill AsymmetricRelation)
(holds domainSubclass hasSkill 1 Process)
(holds domain hasSkill 2 Agent)
(=> 
    (holds hasSkill ?PROC ?AGENT) 
    (holds capability ?PROC agent ?AGENT))
(holds instance holdsRight BinaryPredicate)
(holds instance holdsRight AsymmetricRelation)
(holds domain holdsRight 1 Formula)
(holds domain holdsRight 2 CognitiveAgent)
(holds instance confersRight TernaryPredicate)
(holds domain confersRight 1 Formula)
(holds domain confersRight 2 Entity)
(holds domain confersRight 3 CognitiveAgent)
(=> 
    (holds confersRight ?FORMULA ?AGENT1 ?AGENT2) 
    (holds holdsRight ?FORMULA ?AGENT2))
(holds instance holdsObligation BinaryPredicate)
(holds instance holdsObligation AsymmetricRelation)
(holds domain holdsObligation 1 Formula)
(holds domain holdsObligation 2 CognitiveAgent)
(holds relatedInternalConcept holdsObligation holdsRight)
(holds instance confersObligation TernaryPredicate)
(holds domain confersObligation 1 Formula)
(holds domain confersObligation 2 Entity)
(holds domain confersObligation 3 CognitiveAgent)
(holds relatedInternalConcept confersObligation confersRight)
(=> 
    (holds confersObligation ?FORMULA ?AGENT1 ?AGENT2) 
    (holds holdsObligation ?FORMULA ?AGENT2))
(holds instance partlyLocated SpatialRelation)
(holds instance partlyLocated AntisymmetricRelation)
(holds instance partlyLocated BinaryPredicate)
(holds domain partlyLocated 1 Physical)
(holds domain partlyLocated 2 Object)
(=> 
    (and 
        (holds instance ?OBJ1 Object) 
        (holds partlyLocated ?OBJ1 ?OBJ2)) 
    (holds overlapsSpatially ?OBJ1 ?OBJ2))
(=> 
    (and 
        (holds instance ?OBJ1 Object) 
        (holds partlyLocated ?OBJ1 ?OBJ2)) 
    (exists
        (?SUB) 
        (and 
            (holds part ?SUB ?OBJ1) 
            (holds located ?SUB ?OBJ2))))
(holds instance located AntisymmetricRelation)
(holds instance located TransitiveRelation)
(holds subrelation located partlyLocated)
(=> 
    (holds located ?OBJ1 ?OBJ2) 
    (forall
        (?SUB) 
        (=> 
            (holds part ?SUB ?OBJ1) 
            (holds located ?SUB ?OBJ2))))
(=> 
    (holds located ?PROCESS ?OBJ) 
    (forall
        (?SUB) 
        (=> 
            (holds subProcess ?SUB ?PROCESS) 
            (holds located ?SUB ?OBJ))))
(holds subrelation exactlyLocated located)
(=> 
    (holds exactlyLocated ?OBJ ?REGION) 
    (not 
        (exists
            (?OTHEROBJ) 
            (and 
                (holds exactlyLocated ?OTHEROBJ ?REGION) 
                (not 
                    (equal ?OTHEROBJ ?OBJ))))))
(holds instance between SpatialRelation)
(holds instance between TernaryPredicate)
(holds domain between 1 Object)
(holds domain between 2 Object)
(holds domain between 3 Object)
(holds instance traverses SpatialRelation)
(holds domain traverses 1 Object)
(holds domain traverses 2 Object)
(=> 
    (holds traverses ?OBJ1 ?OBJ2) 
    (or 
        (holds crosses ?OBJ1 ?OBJ2) 
        (holds penetrates ?OBJ1 ?OBJ2)))
(holds subrelation crosses traverses)
(holds instance crosses AsymmetricRelation)
(holds instance crosses TransitiveRelation)
(holds disjointRelation crosses connected)
(holds subrelation penetrates traverses)
(holds subrelation penetrates meetsSpatially)
(holds instance penetrates AsymmetricRelation)
(holds instance penetrates IntransitiveRelation)
(holds instance WhereFn BinaryFunction)
(holds instance WhereFn SpatialRelation)
(holds instance WhereFn TotalValuedRelation)
(holds domain WhereFn 1 Physical)
(holds domain WhereFn 2 TimePoint)
(holds range WhereFn Region)
(holds relatedInternalConcept WhereFn WhenFn)
(<=> 
    (equal 
        (WhereFn ?THING ?TIME) ?REGION) 
    (holds holdsDuring ?TIME `(holds exactlyLocated ?THING ?REGION)))
(holds instance possesses BinaryPredicate)
(holds instance possesses AsymmetricRelation)
(holds domain possesses 1 Agent)
(holds domain possesses 2 Object)
(=> 
    (holds possesses ?PERSON ?OBJ) 
    (holds holdsRight `(holds uses ?OBJ ?PERSON) ?PERSON))
(=> 
    (and 
        (holds instance ?TIME TimePosition) 
        (holds holdsDuring ?TIME `(holds possesses ?AGENT1 ?OBJ)) 
        (holds holdsDuring ?TIME `(holds possesses ?AGENT2 ?OBJ))) 
    (equal ?AGENT1 ?AGENT2))
(holds instance PropertyFn UnaryFunction)
(holds instance PropertyFn TotalValuedRelation)
(holds domain PropertyFn 1 Agent)
(holds range PropertyFn Set)
(<=> 
    (holds instance ?OBJ 
        (PropertyFn ?PERSON)) 
    (holds possesses ?PERSON ?OBJ))
(holds instance precondition BinaryPredicate)
(holds instance precondition AsymmetricRelation)
(holds instance precondition TransitiveRelation)
(holds domainSubclass precondition 1 Process)
(holds domainSubclass precondition 2 Process)
(=> 
    (holds precondition ?PROC1 ?PROC2) 
    (=> 
        (exists
            (?INST2) 
            (holds instance ?INST2 ?PROC2)) 
        (exists
            (?INST1) 
            (holds instance ?INST1 ?PROC1))))
(holds instance inhibits BinaryPredicate)
(holds instance inhibits IrreflexiveRelation)
(holds domainSubclass inhibits 1 Process)
(holds domainSubclass inhibits 2 Process)
(=> 
    (holds inhibits ?PROC1 ?PROC2) 
    (forall
        (?TIME ?PLACE) 
        (holds decreasesLikelihood `(holds holdsDuring ?TIME `(exists
                    (?INST1) 
                    (and 
                        (holds instance ?INST1 ?PROC1) 
                        (holds located ?INST1 ?PLACE)))) `(holds holdsDuring ?TIME `(exists
                    (?INST2) 
                    (and 
                        (holds instance ?INST2 ?PROC2) 
                        (holds located ?INST2 ?PLACE)))))))
(holds instance prevents BinaryPredicate)
(holds instance prevents IrreflexiveRelation)
(holds domainSubclass prevents 1 Process)
(holds domainSubclass prevents 2 Process)
(holds relatedInternalConcept prevents inhibits)
(=> 
    (holds prevents ?PROC1 ?PROC2) 
    (forall
        (?TIME ?PLACE) 
        (=> 
            (holds holdsDuring ?TIME `(exists
                    (?INST1) 
                    (and 
                        (holds instance ?INST1 ?PROC1) 
                        (holds located ?INST1 ?PLACE)))) 
            (not 
                (holds holdsDuring ?TIME `(exists
                        (?INST2) 
                        (and 
                            (holds instance ?INST2 ?PROC2) 
                            (holds located ?INST2 ?PLACE))))))))
(holds instance refers BinaryPredicate)
(holds domain refers 1 Physical)
(holds domain refers 2 Entity)
(holds subrelation names refers)
(holds domain names 1 SymbolicString)
(holds subrelation uniqueIdentifier names)
(holds instance uniqueIdentifier SingleValuedRelation)
(holds subrelation represents refers)
(holds instance representsForAgent TernaryPredicate)
(holds domain representsForAgent 1 Physical)
(holds domain representsForAgent 2 Entity)
(holds domain representsForAgent 3 Agent)
(=> 
    (holds representsForAgent ?REP ?ENTITY ?AGENT) 
    (holds represents ?REP ?ENTITY))
(holds instance representsInLanguage TernaryPredicate)
(holds domain representsInLanguage 1 LinguisticExpression)
(holds domain representsInLanguage 2 Entity)
(holds domain representsInLanguage 3 Language)
(=> 
    (holds representsInLanguage ?REP ?ENTITY ?LANGUAGE) 
    (exists
        (?AGENT) 
        (holds representsForAgent ?REP ?ENTITY ?AGENT)))
(holds subrelation equivalentContentClass subsumesContentClass)
(holds instance equivalentContentClass EquivalenceRelation)
(holds domainSubclass equivalentContentClass 1 ContentBearingObject)
(holds domainSubclass equivalentContentClass 2 ContentBearingObject)
(<=> 
    (and 
        (holds subsumesContentClass ?CLASS1 ?CLASS2) 
        (holds subsumesContentClass ?CLASS2 ?CLASS1)) 
    (holds equivalentContentClass ?CLASS1 ?CLASS2))
(holds instance subsumesContentClass BinaryPredicate)
(holds instance subsumesContentClass PartialOrderingRelation)
(holds domainSubclass subsumesContentClass 1 ContentBearingObject)
(holds domainSubclass subsumesContentClass 2 ContentBearingObject)
(=> 
    (holds subsumesContentClass ?CLASS1 ?CLASS2) 
    (forall
        (?OBJ2 ?INFO) 
        (=> 
            (and 
                (holds instance ?OBJ2 ?CLASS2) 
                (holds containsInformation ?OBJ2 ?INFO)) 
            (exists
                (?OBJ1) 
                (and 
                    (holds instance ?OBJ1 ?CLASS1) 
                    (holds containsInformation ?OBJ1 ?INFO))))))
(holds subrelation equivalentContentInstance subsumesContentInstance)
(holds instance equivalentContentInstance EquivalenceRelation)
(holds domain equivalentContentInstance 1 ContentBearingObject)
(holds domain equivalentContentInstance 2 ContentBearingObject)
(holds relatedInternalConcept equivalentContentInstance equivalentContentClass)
(<=> 
    (and 
        (holds subsumesContentInstance ?OBJ1 ?OBJ2) 
        (holds subsumesContentInstance ?OBJ2 ?OBJ1)) 
    (holds equivalentContentInstance ?OBJ1 ?OBJ2))
(holds instance subsumesContentInstance BinaryPredicate)
(holds instance subsumesContentInstance PartialOrderingRelation)
(holds domain subsumesContentInstance 1 ContentBearingObject)
(holds domain subsumesContentInstance 2 ContentBearingObject)
(holds relatedInternalConcept subsumesContentInstance subsumesContentClass)
(=> 
    (holds subsumesContentInstance ?OBJ1 ?OBJ2) 
    (forall
        (?INFO) 
        (=> 
            (holds containsInformation ?OBJ2 ?INFO) 
            (holds containsInformation ?OBJ1 ?INFO))))
(holds subrelation realization represents)
(holds instance realization AsymmetricRelation)
(holds domain realization 1 Process)
(holds domain realization 2 Proposition)
(holds relatedInternalConcept realization equivalentContentInstance)
(holds relatedInternalConcept realization containsInformation)
(=> 
    (holds realization ?PROCESS ?PROP) 
    (exists
        (?OBJ) 
        (and 
            (holds instance ?OBJ ContentBearingObject) 
            (holds containsInformation ?OBJ ?PROP))))
(holds instance expressedInLanguage BinaryPredicate)
(holds instance expressedInLanguage AsymmetricRelation)
(holds domain expressedInLanguage 1 LinguisticExpression)
(holds domain expressedInLanguage 2 Language)
(<=> 
    (holds expressedInLanguage ?EXPRESS ?LANGUAGE) 
    (exists
        (?PROP) 
        (holds representsInLanguage ?EXPRESS ?PROP ?LANGUAGE)))
(holds instance subProposition BinaryPredicate)
(holds instance subProposition TransitiveRelation)
(holds instance subProposition IrreflexiveRelation)
(holds domain subProposition 1 Proposition)
(holds domain subProposition 2 Proposition)
(=> 
    (holds subProposition ?PROP1 ?PROP2) 
    (forall
        (?OBJ1 ?OBJ2) 
        (=> 
            (and 
                (holds containsInformation ?OBJ1 ?PROP1) 
                (holds containsInformation ?OBJ2 ?PROP2)) 
            (holds subsumesContentInstance ?OBJ2 ?OBJ1))))
(holds subrelation subPlan subProposition)
(holds instance subPlan TransitiveRelation)
(holds instance subPlan IrreflexiveRelation)
(holds domain subPlan 1 Plan)
(holds domain subPlan 2 Plan)
(holds instance uses BinaryPredicate)
(holds instance uses AsymmetricRelation)
(holds domain uses 1 Object)
(holds domain uses 2 Agent)
(=> 
    (holds uses ?OBJ ?AGENT) 
    (exists
        (?PROC) 
        (and 
            (holds agent ?PROC ?AGENT) 
            (holds instrument ?PROC ?OBJ))))
(holds instance MultiplicationFn BinaryFunction)
(holds instance MultiplicationFn AssociativeFunction)
(holds instance MultiplicationFn CommutativeFunction)
(holds instance MultiplicationFn RelationExtendedToQuantities)
(holds instance MultiplicationFn TotalValuedRelation)
(holds domain MultiplicationFn 1 Quantity)
(holds domain MultiplicationFn 2 Quantity)
(holds range MultiplicationFn Quantity)
(holds instance AdditionFn BinaryFunction)
(holds instance AdditionFn AssociativeFunction)
(holds instance AdditionFn CommutativeFunction)
(holds instance AdditionFn RelationExtendedToQuantities)
(holds instance AdditionFn TotalValuedRelation)
(holds domain AdditionFn 1 Quantity)
(holds domain AdditionFn 2 Quantity)
(holds range AdditionFn Quantity)
(equal 
    (SuccessorFn ?NUMBER) 
    (AdditionFn ?NUMBER 1))
(holds instance SubtractionFn BinaryFunction)
(holds instance SubtractionFn AssociativeFunction)
(holds instance SubtractionFn RelationExtendedToQuantities)
(holds instance SubtractionFn TotalValuedRelation)
(holds domain SubtractionFn 1 Quantity)
(holds domain SubtractionFn 2 Quantity)
(holds range SubtractionFn Quantity)
(equal 
    (PredecessorFn ?NUMBER) 
    (SubtractionFn ?NUMBER 1))
(holds instance DivisionFn BinaryFunction)
(holds instance DivisionFn AssociativeFunction)
(holds instance DivisionFn RelationExtendedToQuantities)
(holds instance DivisionFn PartialValuedRelation)
(holds domain DivisionFn 1 Quantity)
(holds domain DivisionFn 2 Quantity)
(holds range DivisionFn Quantity)
(=> 
    (holds instance ?NUMBER RationalNumber) 
    (exists
        (?INT1 ?INT2) 
        (and 
            (holds instance ?INT1 Integer) 
            (holds instance ?INT2 Integer) 
            (equal ?NUMBER 
                (DivisionFn ?INT1 ?INT2)))))
(holds instance AbsoluteValueFn UnaryFunction)
(holds instance AbsoluteValueFn TotalValuedRelation)
(holds domain AbsoluteValueFn 1 RealNumber)
(holds range AbsoluteValueFn NonnegativeRealNumber)
(<=> 
    (and 
        (equal 
            (AbsoluteValueFn ?NUMBER1) ?NUMBER2) 
        (holds instance ?NUMBER1 RealNumber) 
        (holds instance ?NUMBER2 RealNumber)) 
    (or 
        (and 
            (holds instance ?NUMBER1 NonnegativeRealNumber) 
            (equal ?NUMBER1 ?NUMBER2)) 
        (and 
            (holds instance ?NUMBER1 NegativeRealNumber) 
            (equal ?NUMBER2 
                (SubtractionFn 0 ?NUMBER1)))))
(holds instance CeilingFn UnaryFunction)
(holds instance CeilingFn TotalValuedRelation)
(holds domain CeilingFn 1 RealNumber)
(holds range CeilingFn Integer)
(=> 
    (equal 
        (CeilingFn ?NUMBER) ?INT) 
    (not 
        (exists
            (?OTHERINT) 
            (and 
                (holds instance ?OTHERINT Integer) 
                (>= ?OTHERINT ?NUMBER) 
                (< ?OTHERINT ?INT)))))
(holds instance CosineFn UnaryFunction)
(holds instance CosineFn TotalValuedRelation)
(holds domain CosineFn 1 PlaneAngleMeasure)
(holds range CosineFn RealNumber)
(holds instance DenominatorFn UnaryFunction)
(holds instance DenominatorFn TotalValuedRelation)
(holds domain DenominatorFn 1 RealNumber)
(holds range DenominatorFn Integer)
(holds instance ExponentiationFn BinaryFunction)
(holds instance ExponentiationFn RelationExtendedToQuantities)
(holds instance ExponentiationFn TotalValuedRelation)
(holds domain ExponentiationFn 1 Quantity)
(holds domain ExponentiationFn 2 Integer)
(holds range ExponentiationFn Quantity)
(holds instance FloorFn UnaryFunction)
(holds instance FloorFn TotalValuedRelation)
(holds domain FloorFn 1 RealNumber)
(holds range FloorFn Integer)
(=> 
    (equal 
        (FloorFn ?NUMBER) ?INT) 
    (not 
        (exists
            (?OTHERINT) 
            (and 
                (holds instance ?OTHERINT Integer) 
                (<= ?OTHERINT ?NUMBER) 
                (> ?OTHERINT ?INT)))))
(holds instance GreatestCommonDivisorFn Function)
(holds instance GreatestCommonDivisorFn VariableArityRelation)
(holds instance GreatestCommonDivisorFn PartialValuedRelation)
(holds range GreatestCommonDivisorFn Integer)
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0)) 
            (equal 
                (RemainderFn ?ELEMENT ?NUMBER) 0))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1)) 
            (equal 
                (RemainderFn ?ELEMENT ?NUMBER) 0))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
            (equal 
                (RemainderFn ?ELEMENT ?NUMBER) 0))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
            (equal 
                (RemainderFn ?ELEMENT ?NUMBER) 0))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
            (equal 
                (RemainderFn ?ELEMENT ?NUMBER) 0))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
            (equal 
                (RemainderFn ?ELEMENT ?NUMBER) 0))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
            (equal 
                (RemainderFn ?ELEMENT ?NUMBER) 0))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
            (equal 
                (RemainderFn ?ELEMENT ?NUMBER) 0))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
            (equal 
                (RemainderFn ?ELEMENT ?NUMBER) 0))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
            (equal 
                (RemainderFn ?ELEMENT ?NUMBER) 0))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0) ?NUMBER) 
    (not 
        (exists
            (?GREATER) 
            (and 
                (> ?GREATER ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0)) 
                        (equal 
                            (RemainderFn ?ELEMENT ?GREATER) 0)))))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1) ?NUMBER) 
    (not 
        (exists
            (?GREATER) 
            (and 
                (> ?GREATER ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1)) 
                        (equal 
                            (RemainderFn ?ELEMENT ?GREATER) 0)))))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) ?NUMBER) 
    (not 
        (exists
            (?GREATER) 
            (and 
                (> ?GREATER ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
                        (equal 
                            (RemainderFn ?ELEMENT ?GREATER) 0)))))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) ?NUMBER) 
    (not 
        (exists
            (?GREATER) 
            (and 
                (> ?GREATER ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
                        (equal 
                            (RemainderFn ?ELEMENT ?GREATER) 0)))))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) ?NUMBER) 
    (not 
        (exists
            (?GREATER) 
            (and 
                (> ?GREATER ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
                        (equal 
                            (RemainderFn ?ELEMENT ?GREATER) 0)))))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) ?NUMBER) 
    (not 
        (exists
            (?GREATER) 
            (and 
                (> ?GREATER ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
                        (equal 
                            (RemainderFn ?ELEMENT ?GREATER) 0)))))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) ?NUMBER) 
    (not 
        (exists
            (?GREATER) 
            (and 
                (> ?GREATER ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
                        (equal 
                            (RemainderFn ?ELEMENT ?GREATER) 0)))))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) ?NUMBER) 
    (not 
        (exists
            (?GREATER) 
            (and 
                (> ?GREATER ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
                        (equal 
                            (RemainderFn ?ELEMENT ?GREATER) 0)))))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) ?NUMBER) 
    (not 
        (exists
            (?GREATER) 
            (and 
                (> ?GREATER ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
                        (equal 
                            (RemainderFn ?ELEMENT ?GREATER) 0)))))))
(=> 
    (equal 
        (GreatestCommonDivisorFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) ?NUMBER) 
    (not 
        (exists
            (?GREATER) 
            (and 
                (> ?GREATER ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
                        (equal 
                            (RemainderFn ?ELEMENT ?GREATER) 0)))))))
(holds instance ImaginaryPartFn UnaryFunction)
(holds instance ImaginaryPartFn TotalValuedRelation)
(holds domain ImaginaryPartFn 1 ComplexNumber)
(holds range ImaginaryPartFn ImaginaryNumber)
(=> 
    (holds instance ?NUMBER ComplexNumber) 
    (exists
        (?PART1 ?PART2) 
        (and 
            (equal ?PART1 
                (RealNumberFn ?NUMBER)) 
            (equal ?PART2 
                (ImaginaryPartFn ?NUMBER)))))
(holds instance IntegerSquareRootFn UnaryFunction)
(holds instance IntegerSquareRootFn PartialValuedRelation)
(holds domain IntegerSquareRootFn 1 RealNumber)
(holds range IntegerSquareRootFn NonnegativeInteger)
(holds instance LeastCommonMultipleFn Function)
(holds instance LeastCommonMultipleFn PartialValuedRelation)
(holds instance LeastCommonMultipleFn VariableArityRelation)
(holds range LeastCommonMultipleFn Integer)
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0)) 
            (equal 
                (RemainderFn ?NUMBER ?ELEMENT) 0))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1)) 
            (equal 
                (RemainderFn ?NUMBER ?ELEMENT) 0))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
            (equal 
                (RemainderFn ?NUMBER ?ELEMENT) 0))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
            (equal 
                (RemainderFn ?NUMBER ?ELEMENT) 0))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
            (equal 
                (RemainderFn ?NUMBER ?ELEMENT) 0))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
            (equal 
                (RemainderFn ?NUMBER ?ELEMENT) 0))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
            (equal 
                (RemainderFn ?NUMBER ?ELEMENT) 0))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
            (equal 
                (RemainderFn ?NUMBER ?ELEMENT) 0))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
            (equal 
                (RemainderFn ?NUMBER ?ELEMENT) 0))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) ?NUMBER) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds inList ?ELEMENT 
                (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
            (equal 
                (RemainderFn ?NUMBER ?ELEMENT) 0))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0) ?NUMBER) 
    (not 
        (exists
            (?LESS) 
            (and 
                (< ?LESS ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0)) 
                        (equal 
                            (RemainderFn ?LESS ?ELEMENT) 0)))))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1) ?NUMBER) 
    (not 
        (exists
            (?LESS) 
            (and 
                (< ?LESS ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1)) 
                        (equal 
                            (RemainderFn ?LESS ?ELEMENT) 0)))))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) ?NUMBER) 
    (not 
        (exists
            (?LESS) 
            (and 
                (< ?LESS ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
                        (equal 
                            (RemainderFn ?LESS ?ELEMENT) 0)))))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) ?NUMBER) 
    (not 
        (exists
            (?LESS) 
            (and 
                (< ?LESS ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
                        (equal 
                            (RemainderFn ?LESS ?ELEMENT) 0)))))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) ?NUMBER) 
    (not 
        (exists
            (?LESS) 
            (and 
                (< ?LESS ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
                        (equal 
                            (RemainderFn ?LESS ?ELEMENT) 0)))))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) ?NUMBER) 
    (not 
        (exists
            (?LESS) 
            (and 
                (< ?LESS ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
                        (equal 
                            (RemainderFn ?LESS ?ELEMENT) 0)))))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) ?NUMBER) 
    (not 
        (exists
            (?LESS) 
            (and 
                (< ?LESS ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
                        (equal 
                            (RemainderFn ?LESS ?ELEMENT) 0)))))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) ?NUMBER) 
    (not 
        (exists
            (?LESS) 
            (and 
                (< ?LESS ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
                        (equal 
                            (RemainderFn ?LESS ?ELEMENT) 0)))))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) ?NUMBER) 
    (not 
        (exists
            (?LESS) 
            (and 
                (< ?LESS ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
                        (equal 
                            (RemainderFn ?LESS ?ELEMENT) 0)))))))
(=> 
    (equal 
        (LeastCommonMultipleFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) ?NUMBER) 
    (not 
        (exists
            (?LESS) 
            (and 
                (< ?LESS ?NUMBER) 
                (forall
                    (?ELEMENT) 
                    (=> 
                        (holds inList ?ELEMENT 
                            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
                        (equal 
                            (RemainderFn ?LESS ?ELEMENT) 0)))))))
(holds instance LogFn BinaryFunction)
(holds domain LogFn 1 RealNumber)
(holds domain LogFn 2 PositiveInteger)
(holds range LogFn RealNumber)
(holds instance MaxFn BinaryFunction)
(holds instance MaxFn AssociativeFunction)
(holds instance MaxFn CommutativeFunction)
(holds instance MaxFn RelationExtendedToQuantities)
(holds instance MaxFn TotalValuedRelation)
(holds domain MaxFn 1 Quantity)
(holds domain MaxFn 2 Quantity)
(holds range MaxFn Quantity)
(=> 
    (equal 
        (MaxFn ?NUMBER1 ?NUMBER2) ?NUMBER) 
    (or 
        (and 
            (equal ?NUMBER ?NUMBER1) 
            (> ?NUMBER1 ?NUMBER2)) 
        (and 
            (equal ?NUMBER ?NUMBER2) 
            (> ?NUMBER2 ?NUMBER1)) 
        (and 
            (equal ?NUMBER ?NUMBER1) 
            (equal ?NUMBER ?NUMBER2))))
(holds instance MinFn BinaryFunction)
(holds instance MinFn AssociativeFunction)
(holds instance MinFn CommutativeFunction)
(holds instance MinFn RelationExtendedToQuantities)
(holds instance MinFn TotalValuedRelation)
(holds domain MinFn 1 Quantity)
(holds domain MinFn 2 Quantity)
(holds range MinFn Quantity)
(=> 
    (equal 
        (MinFn ?NUMBER1 ?NUMBER2) ?NUMBER) 
    (or 
        (and 
            (equal ?NUMBER ?NUMBER1) 
            (< ?NUMBER1 ?NUMBER2)) 
        (and 
            (equal ?NUMBER ?NUMBER2) 
            (< ?NUMBER2 ?NUMBER1)) 
        (and 
            (equal ?NUMBER ?NUMBER1) 
            (equal ?NUMBER ?NUMBER2))))
(holds instance NumeratorFn UnaryFunction)
(holds instance NumeratorFn TotalValuedRelation)
(holds domain NumeratorFn 1 RealNumber)
(holds range NumeratorFn Integer)
(holds instance Pi PositiveRealNumber)
(holds instance NumberE PositiveRealNumber)
(holds instance RationalNumberFn UnaryFunction)
(holds domain RationalNumberFn 1 Number)
(holds range RationalNumberFn RationalNumber)
(holds instance RealNumberFn UnaryFunction)
(holds domain RealNumberFn 1 Number)
(holds range RealNumberFn RealNumber)
(holds instance ReciprocalFn UnaryFunction)
(holds instance ReciprocalFn RelationExtendedToQuantities)
(holds instance ReciprocalFn TotalValuedRelation)
(holds domain ReciprocalFn 1 Quantity)
(holds range ReciprocalFn Quantity)
(=> 
    (holds instance ?NUMBER Quantity) 
    (equal 
        (ReciprocalFn ?NUMBER) 
        (ExponentiationFn ?NUMBER -1)))
(=> 
    (holds instance ?NUMBER Quantity) 
    (equal 1 
        (MultiplicationFn ?NUMBER 
            (ReciprocalFn ?NUMBER))))
(holds instance RemainderFn BinaryFunction)
(holds instance RemainderFn RelationExtendedToQuantities)
(holds instance RemainderFn PartialValuedRelation)
(holds domain RemainderFn 1 Quantity)
(holds domain RemainderFn 2 Quantity)
(holds range RemainderFn Quantity)
(<=> 
    (equal 
        (RemainderFn ?NUMBER1 ?NUMBER2) ?NUMBER) 
    (equal 
        (AdditionFn 
            (MultiplicationFn 
                (FloorFn 
                    (DivisionFn ?NUMBER1 ?NUMBER2)) ?NUMBER2) ?NUMBER) ?NUMBER1))
(=> 
    (equal 
        (RemainderFn ?NUMBER1 ?NUMBER2) ?NUMBER) 
    (equal 
        (SignumFn ?NUMBER2) 
        (SignumFn ?NUMBER)))
(=> 
    (holds instance ?NUMBER EvenInteger) 
    (equal 
        (RemainderFn ?NUMBER 2) 0))
(=> 
    (holds instance ?NUMBER OddInteger) 
    (equal 
        (RemainderFn ?NUMBER 2) 1))
(=> 
    (holds instance ?PRIME PrimeNumber) 
    (forall
        (?NUMBER) 
        (=> 
            (equal 
                (RemainderFn ?PRIME ?NUMBER) 0) 
            (or 
                (equal ?NUMBER 1) 
                (equal ?NUMBER ?PRIME)))))
(holds instance RoundFn UnaryFunction)
(holds instance RoundFn RelationExtendedToQuantities)
(holds instance RoundFn TotalValuedRelation)
(holds domain RoundFn 1 Quantity)
(holds range RoundFn Quantity)
(=> 
    (equal 
        (RoundFn ?NUMBER1) ?NUMBER2) 
    (or 
        (=> 
            (< 
                (SubtractionFn ?NUMBER1 
                    (FloorFn ?NUMBER1)) 0.5) 
            (equal ?NUMBER2 
                (FloorFn ?NUMBER1))) 
        (=> 
            (>= 
                (SubtractionFn ?NUMBER1 
                    (FloorFn ?NUMBER1)) 0.5) 
            (equal ?NUMBER2 
                (CeilingFn ?NUMBER1)))))
(holds instance SignumFn UnaryFunction)
(holds instance SignumFn TotalValuedRelation)
(holds domain SignumFn 1 RealNumber)
(holds range SignumFn Integer)
(=> 
    (holds instance ?NUMBER NonnegativeRealNumber) 
    (or 
        (equal 
            (SignumFn ?NUMBER) 1) 
        (equal 
            (SignumFn ?NUMBER) 0)))
(=> 
    (holds instance ?NUMBER PositiveRealNumber) 
    (equal 
        (SignumFn ?NUMBER) 1))
(=> 
    (holds instance ?NUMBER NegativeRealNumber) 
    (equal 
        (SignumFn ?NUMBER) -1))
(holds instance SineFn UnaryFunction)
(holds instance SineFn TotalValuedRelation)
(holds domain SineFn 1 PlaneAngleMeasure)
(holds range SineFn RealNumber)
(holds instance SquareRootFn UnaryFunction)
(holds domain SquareRootFn 1 RealNumber)
(holds range SquareRootFn Number)
(=> 
    (equal 
        (SquareRootFn ?NUMBER1) ?NUMBER2) 
    (equal 
        (MultiplicationFn ?NUMBER2 ?NUMBER2) ?NUMBER1))
(holds instance TangentFn UnaryFunction)
(holds instance TangenFn TotalValuedRelation)
(holds domain TangentFn 1 PlaneAngleMeasure)
(holds range TangentFn RealNumber)
(=> 
    (holds instance ?DEGREE PlaneAngleMeasure) 
    (equal 
        (TangentFn ?DEGREE) 
        (DivisionFn 
            (SineFn ?DEGREE) 
            (CosineFn ?DEGREE))))
(holds instance identityElement BinaryPredicate)
(holds instance identityElement AsymmetricRelation)
(holds domain identityElement 1 BinaryFunction)
(holds domain identityElement 2 Entity)
(=> 
    (holds identityElement ?FUNCTION ?ID) 
    (forall
        (?INST) 
        (=> 
            (and 
                (holds domain ?FUNCTION 1 ?CLASS) 
                (holds instance ?INST ?CLASS)) 
            (equal 
                (AssignmentFn ?FUNCTION ?ID ?INST) ?INST))))
(holds identityElement MultiplicationFn 1)
(holds identityElement AdditionFn 0)
(holds identityElement SubtractionFn 0)
(holds identityElement DivisionFn 1)
(holds instance SuccessorFn UnaryFunction)
(holds instance SuccessorFn TotalValuedRelation)
(holds domain SuccessorFn 1 Integer)
(holds range SuccessorFn Integer)
(=> 
    (equal 
        (SuccessorFn ?INT1) 
        (SuccessorFn ?INT2)) 
    (equal ?INT1 ?INT2))
(=> 
    (holds instance ?INT Integer) 
    (< ?INT 
        (SuccessorFn ?INT)))
(=> 
    (and 
        (holds instance ?INT1 Integer) 
        (holds instance ?INT2 Integer)) 
    (not 
        (and 
            (< ?INT1 ?INT2) 
            (< ?INT2 
                (SuccessorFn ?INT1)))))
(=> 
    (holds instance ?INT Integer) 
    (equal ?INT 
        (SuccessorFn 
            (PredecessorFn ?INT))))
(=> 
    (holds instance ?INT Integer) 
    (equal ?INT 
        (PredecessorFn 
            (SuccessorFn ?INT))))
(holds instance PredecessorFn UnaryFunction)
(holds instance PredecessorFn TotalValuedRelation)
(holds domain PredecessorFn 1 Integer)
(holds range PredecessorFn Integer)
(=> 
    (equal 
        (PredecessorFn ?INT1) 
        (PredecessorFn ?INT2)) 
    (equal ?INT1 ?INT2))
(=> 
    (holds instance ?INT Integer) 
    (> ?INT 
        (PredecessorFn ?INT)))
(=> 
    (and 
        (holds instance ?INT1 Integer) 
        (holds instance ?INT2 Integer)) 
    (not 
        (and 
            (< ?INT2 ?INT1) 
            (< 
                (PredecessorFn ?INT1) ?INT2))))
(holds subrelation subset subclass)
(holds domain subset 1 Set)
(holds domain subset 2 Set)
(=> 
    (holds subset ?SUBSET ?SET) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds element ?ELEMENT ?SUBSET) 
            (holds element ?ELEMENT ?SET))))
(holds instance element BinaryPredicate)
(holds instance element AsymmetricRelation)
(holds instance element IntransitiveRelation)
(holds subrelation element instance)
(holds domain element 1 Entity)
(holds domain element 2 Set)
(=> 
    (forall
        (?ELEMENT) 
        (<=> 
            (holds element ?ELEMENT ?SET1) 
            (holds element ?ELEMENT ?SET2))) 
    (equal ?SET1 ?SET2))
(holds instance UnionFn BinaryFunction)
(holds instance UnionFn TotalValuedRelation)
(holds domain UnionFn 1 SetOrClass)
(holds domain UnionFn 2 SetOrClass)
(holds range UnionFn SetOrClass)
(holds instance IntersectionFn BinaryFunction)
(holds instance IntersectionFn TotalValuedRelation)
(holds domain IntersectionFn 1 SetOrClass)
(holds domain IntersectionFn 2 SetOrClass)
(holds range IntersectionFn SetOrClass)
(holds instance RelativeComplementFn BinaryFunction)
(holds instance RelativeComplementFn TotalValuedRelation)
(holds domain RelativeComplementFn 1 SetOrClass)
(holds domain RelativeComplementFn 2 SetOrClass)
(holds range RelativeComplementFn SetOrClass)
(holds instance ComplementFn UnaryFunction)
(holds instance ComplementFn TotalValuedRelation)
(holds domain ComplementFn 1 SetOrClass)
(holds range ComplementFn SetOrClass)
(holds instance GeneralizedUnionFn UnaryFunction)
(holds instance GeneralizedUnionFn TotalValuedRelation)
(holds domainSubclass GeneralizedUnionFn 1 SetOrClass)
(holds range GeneralizedUnionFn SetOrClass)
(holds instance GeneralizedIntersectionFn UnaryFunction)
(holds instance GeneralizedIntersectionFn TotalValuedRelation)
(holds domainSubclass GeneralizedIntersectionFn 1 SetOrClass)
(holds range GeneralizedIntersectionFn SetOrClass)
(holds instance CardinalityFn UnaryFunction)
(holds instance CardinalityFn TotalValuedRelation)
(holds instance CardinalityFn AsymmetricRelation)
(holds domain CardinalityFn 1 
    (UnionFn SetOrClass Collection))
(holds range CardinalityFn Number)
(holds subclass NullSet SetOrClass)
(=> 
    (holds instance ?SET NullSet) 
    (not 
        (exists
            (?INST) 
            (holds instance ?INST ?SET))))
(holds subclass NonNullSet SetOrClass)
(=> 
    (holds instance ?SET NonNullSet) 
    (exists
        (?INST) 
        (holds instance ?INST ?SET)))
(holds subclass FiniteSet Set)
(=> 
    (holds instance ?SET FiniteSet) 
    (exists
        (?NUMBER) 
        (and 
            (holds instance ?NUMBER NonnegativeInteger) 
            (equal ?NUMBER 
                (CardinalityFn ?SET)))))
(holds subclass PairwiseDisjointClass SetOrClass)
(=> 
    (holds instance ?SUPERCLASS PairwiseDisjointClass) 
    (forall
        (?CLASS1 ?CLASS2) 
        (=> 
            (and 
                (holds instance ?CLASS1 ?SUPERCLASS) 
                (holds instance ?CLASS2 ?SUPERCLASS)) 
            (or 
                (equal ?CLASS1 ?CLASS2) 
                (holds disjoint ?CLASS1 ?CLASS2)))))
(holds subclass MutuallyDisjointClass SetOrClass)
(=> 
    (holds instance ?CLASS MutuallyDisjointClass) 
    (forall
        (?INST1 ?INST2) 
        (=> 
            (and 
                (holds instance ?INST1 ?CLASS) 
                (holds instance ?INST2 ?INST1)) 
            (exists
                (?INST3) 
                (and 
                    (holds instance ?INST3 ?CLASS) 
                    (not 
                        (holds instance ?INST2 ?INST3)))))))
(holds instance KappaFn BinaryFunction)
(holds domain KappaFn 1 SymbolicString)
(holds domain KappaFn 2 Formula)
(holds range KappaFn Class)
(holds subclass Graph Abstract)
(=> 
    (and 
        (holds instance ?GRAPH Graph) 
        (holds instance ?NODE1 GraphNode) 
        (holds instance ?NODE2 GraphNode) 
        (holds graphPart ?NODE1 ?GRAPH) 
        (holds graphPart ?NODE2 ?GRAPH) 
        (not 
            (equal ?NODE1 ?NODE2))) 
    (exists
        (?ARC ?PATH) 
        (or 
            (holds links ?NODE1 ?NODE2 ?ARC) 
            (and 
                (holds subGraph ?PATH ?GRAPH) 
                (holds instance ?PATH GraphPath) 
                (or 
                    (and 
                        (equal 
                            (BeginNodeFn ?PATH) ?NODE1) 
                        (equal 
                            (EndNodeFn ?PATH) ?NODE2)) 
                    (and 
                        (equal 
                            (BeginNodeFn ?PATH) ?NODE2) 
                        (equal 
                            (EndNodeFn ?PATH) ?NODE1)))))))
(=> 
    (holds instance ?GRAPH Graph) 
    (exists
        (?NODE1 ?NODE2 ?NODE3 ?ARC1 ?ARC2) 
        (and 
            (holds graphPart ?NODE1 ?GRAPH) 
            (holds graphPart ?NODE2 ?GRAPH) 
            (holds graphPart ?NODE3 ?GRAPH) 
            (holds graphPart ?ARC1 ?GRAPH) 
            (holds graphPart ?ARC2 ?GRAPH) 
            (holds links ?ARC1 ?NODE1 ?NODE2) 
            (holds links ?ARC2 ?NODE2 ?NODE3) 
            (not 
                (equal ?NODE1 ?NODE2)) 
            (not 
                (equal ?NODE2 ?NODE3)) 
            (not 
                (equal ?NODE1 ?NODE3)) 
            (not 
                (equal ?ARC1 ?ARC2)))))
(holds subclass DirectedGraph Graph)
(=> 
    (and 
        (holds instance ?GRAPH DirectedGraph) 
        (holds instance ?ARC GraphArc) 
        (holds graphPart ?ARC ?GRAPH)) 
    (exists
        (?NODE1 ?NODE2) 
        (and 
            (equal 
                (InitialNodeFn ?ARC) ?NODE1) 
            (equal 
                (TerminalNodeFn ?ARC) ?NODE2))))
(holds subclass Tree Graph)
(=> 
    (holds instance ?GRAPH Tree) 
    (not 
        (exists
            (?LOOP) 
            (and 
                (holds instance ?LOOP GraphLoop) 
                (holds graphPart ?LOOP ?GRAPH)))))
(holds subclass GraphPath DirectedGraph)
(=> 
    (and 
        (holds instance ?GRAPH GraphPath) 
        (holds instance ?ARC GraphArc) 
        (holds graphPart ?ARC ?GRAPH)) 
    (=> 
        (equal 
            (InitialNodeFn ?ARC) ?NODE) 
        (not 
            (exists
                (?OTHER) 
                (and 
                    (equal 
                        (InitialNodeFn ?OTHER) ?NODE) 
                    (not 
                        (equal ?OTHER ?ARC)))))))
(=> 
    (and 
        (holds instance ?GRAPH GraphPath) 
        (holds instance ?ARC GraphArc) 
        (holds graphPart ?ARC ?GRAPH)) 
    (=> 
        (equal 
            (TerminalNodeFn ?ARC) ?NODE) 
        (not 
            (exists
                (?OTHER) 
                (and 
                    (equal 
                        (TerminalNodeFn ?OTHER) ?NODE) 
                    (not 
                        (equal ?OTHER ?ARC)))))))
(holds subclass GraphCircuit GraphPath)
(<=> 
    (holds instance ?GRAPH GraphCircuit) 
    (exists
        (?NODE) 
        (and 
            (equal 
                (BeginNodeFn ?GRAPH) ?NODE) 
            (equal 
                (EndNodeFn ?GRAPH) ?NODE))))
(holds subclass MultiGraph Graph)
(<=> 
    (holds instance ?GRAPH MultiGraph) 
    (exists
        (?ARC1 ?ARC2 ?NODE1 ?NODE2) 
        (and 
            (holds graphPart ?ARC1 ?GRAPH) 
            (holds graphPart ?ARC2 ?GRAPH) 
            (holds graphPart ?NODE1 ?GRAPH) 
            (holds graphPart ?NODE2 ?GRAPH) 
            (holds links ?NODE1 ?NODE2 ?ARC1) 
            (holds links ?NODE1 ?NODE2 ?ARC2) 
            (not 
                (equal ?ARC1 ?ARC2)))))
(holds subclass PseudoGraph Graph)
(<=> 
    (holds instance ?GRAPH PseudoGraph) 
    (exists
        (?LOOP) 
        (and 
            (holds instance ?LOOP GraphLoop) 
            (holds graphPart ?LOOP ?GRAPH))))
(holds subclass GraphElement Abstract)
(holds partition GraphElement GraphNode GraphArc)
(=> 
    (holds instance ?PART GraphElement) 
    (exists
        (?GRAPH) 
        (and 
            (holds instance ?GRAPH Graph) 
            (holds graphPart ?PART ?GRAPH))))
(holds subclass GraphNode GraphElement)
(=> 
    (holds instance ?NODE GraphNode) 
    (exists
        (?OTHER ?ARC) 
        (holds links ?NODE ?OTHER ?ARC)))
(holds subclass GraphArc GraphElement)
(=> 
    (holds instance ?ARC GraphArc) 
    (exists
        (?NODE1 ?NODE2) 
        (holds links ?NODE1 ?NODE2 ?ARC)))
(holds subclass GraphLoop GraphArc)
(<=> 
    (holds instance ?LOOP GraphLoop) 
    (exists
        (?NODE) 
        (holds links ?NODE ?NODE ?LOOP)))
(=> 
    (and 
        (equal 
            (InitialNodeFn ?ARC) ?NODE) 
        (equal 
            (TerminalNodeFn ?ARC) ?NODE)) 
    (holds instance ?ARC GraphLoop))
(holds instance links TernaryPredicate)
(holds domain links 1 GraphNode)
(holds domain links 2 GraphNode)
(holds domain links 3 GraphArc)
(=> 
    (holds links ?NODE1 ?NODE2 ?ARC) 
    (holds links ?NODE2 ?NODE1 ?ARC))
(holds instance graphPart BinaryPredicate)
(holds instance graphPart AsymmetricRelation)
(holds instance graphPart IrreflexiveRelation)
(holds domain graphPart 1 GraphElement)
(holds domain graphPart 2 Graph)
(holds instance subGraph BinaryPredicate)
(holds instance subGraph ReflexiveRelation)
(holds instance subGraph TransitiveRelation)
(holds domain subGraph 1 Graph)
(holds domain subGraph 2 Graph)
(=> 
    (and 
        (holds subGraph ?GRAPH1 ?GRAPH2) 
        (holds graphPart ?ELEMENT ?GRAPH1)) 
    (holds graphPart ?ELEMENT ?GRAPH2))
(holds instance pathLength BinaryPredicate)
(holds instance pathLength AsymmetricRelation)
(holds instance pathLength IrreflexiveRelation)
(holds domain pathLength 1 GraphPath)
(holds domain pathLength 2 PositiveInteger)
(holds instance InitialNodeFn UnaryFunction)
(holds instance InitialNodeFn PartialValuedRelation)
(holds domain InitialNodeFn 1 GraphArc)
(holds range InitialNodeFn GraphNode)
(holds instance TerminalNodeFn UnaryFunction)
(holds instance TerminalNodeFn PartialValuedRelation)
(holds domain TerminalNodeFn 1 GraphArc)
(holds range TerminalNodeFn GraphNode)
(holds instance BeginNodeFn UnaryFunction)
(holds instance BeginNodeFn TotalValuedRelation)
(holds domain BeginNodeFn 1 GraphPath)
(holds range BeginNodeFn GraphNode)
(holds relatedInternalConcept BeginNodeFn InitialNodeFn)
(holds instance EndNodeFn UnaryFunction)
(holds instance EndNodeFn TotalValuedRelation)
(holds domain EndNodeFn 1 GraphPath)
(holds range EndNodeFn GraphNode)
(holds relatedInternalConcept EndNodeFn TerminalNodeFn)
(holds instance arcWeight BinaryPredicate)
(holds instance arcWeight SingleValuedRelation)
(holds domain arcWeight 1 GraphArc)
(holds domain arcWeight 2 RealNumber)
(holds instance PathWeightFn UnaryFunction)
(holds domain PathWeightFn 1 GraphPath)
(holds range PathWeightFn RealNumber)
(=> 
    (and 
        (equal 
            (PathWeightFn ?PATH) ?SUM) 
        (holds subGraph ?SUBPATH ?PATH) 
        (holds graphPart ?ARC1 ?PATH) 
        (holds arcWeight ?ARC1 ?NUMBER1) 
        (forall
            (?ARC2) 
            (=> 
                (holds graphPart ?ARC2 ?PATH) 
                (or 
                    (holds graphPart ?ARC2 ?SUBPATH) 
                    (equal ?ARC2 ?ARC1))))) 
    (equal ?SUM 
        (AdditionFn 
            (PathWeightFn ?SUBPATH) ?NUMBER1)))
(=> 
    (and 
        (equal 
            (PathWeightFn ?PATH) ?SUM) 
        (holds graphPart ?ARC1 ?PATH) 
        (holds graphPart ?ARC2 ?PATH) 
        (holds arcWeight ?ARC1 ?NUMBER1) 
        (holds arcWeight ?ARC2 ?NUMBER2) 
        (forall
            (?ARC3) 
            (=> 
                (holds graphPart ?ARC3 ?PATH) 
                (or 
                    (equal ?ARC3 ?ARC1) 
                    (equal ?ARC3 ?ARC2))))) 
    (equal 
        (PathWeightFn ?PATH) 
        (AdditionFn ?NUMBER1 ?NUMBER2)))
(holds instance MinimalWeightedPathFn BinaryFunction)
(holds domain MinimalWeightedPathFn 1 GraphNode)
(holds domain MinimalWeightedPathFn 2 GraphNode)
(holds range MinimalWeightedPathFn GraphPath)
(=> 
    (equal 
        (MinimalWeightedPathFn ?NODE1 ?NODE2) ?PATH) 
    (holds instance ?PATH 
        (GraphPathFn ?NODE1 ?NODE2)))
(=> 
    (and 
        (equal 
            (MinimalWeightedPathFn ?NODE1 ?NODE2) ?PATH) 
        (equal 
            (PathWeightFn ?PATH) ?NUMBER)) 
    (forall
        (?PATH2) 
        (=> 
            (and 
                (holds instance ?PATH2 
                    (GraphPathFn ?NODE1 ?NODE2)) 
                (equal 
                    (PathWeightFn ?PATH2) ?NUMBER2)) 
            (>= ?NUMBER2 ?NUMBER1))))
(holds instance MaximalWeightedPathFn BinaryFunction)
(holds domain MaximalWeightedPathFn 1 GraphNode)
(holds domain MaximalWeightedPathFn 2 GraphNode)
(holds range MaximalWeightedPathFn GraphPath)
(=> 
    (equal 
        (MaximalWeightedPathFn ?NODE1 ?NODE2) ?PATH) 
    (holds instance ?PATH 
        (GraphPathFn ?NODE1 ?NODE2)))
(=> 
    (and 
        (equal 
            (MaximalWeightedPathFn ?NODE1 ?NODE2) ?PATH) 
        (equal 
            (PathWeightFn ?PATH) ?NUMBER)) 
    (forall
        (?PATH2) 
        (=> 
            (and 
                (holds instance ?PATH2 
                    (GraphPathFn ?NODE1 ?NODE2)) 
                (equal 
                    (PathWeightFn ?PATH2) ?NUMBER2)) 
            (<= ?NUMBER2 ?NUMBER1))))
(holds instance GraphPathFn BinaryFunction)
(holds instance GraphPathFn TotalValuedRelation)
(holds domain GraphPathFn 1 GraphNode)
(holds domain GraphPathFn 2 GraphNode)
(holds rangeSubclass GraphPathFn GraphPath)
(=> 
    (and 
        (holds graphPart ?PATH ?GRAPH) 
        (not 
            (holds instance ?GRAPH DirectedGraph))) 
    (<=> 
        (equal 
            (GraphPathFn ?NODE1 ?NODE2) ?PATH) 
        (equal 
            (GraphPathFn ?NODE2 ?NODE1) ?PATH)))
(holds instance CutSetFn UnaryFunction)
(holds domain CutSetFn 1 Graph)
(holds rangeSubclass CutSetFn GraphPath)
(holds instance MinimalCutSetFn UnaryFunction)
(holds domain MinimalCutSetFn 1 Graph)
(holds rangeSubclass MinimalCutSetFn GraphPath)
(holds relatedInternalConcept MinimalCutSetFn CutSetFn)
(=> 
    (holds instance ?GRAPH Graph) 
    (holds subclass 
        (MinimalCutSetFn ?GRAPH) 
        (CutSetFn ?GRAPH)))
(=> 
    (equal 
        (MinimalCutSetFn ?GRAPH) ?PATHCLASS) 
    (exists
        (?NUMBER) 
        (forall
            (?PATH) 
            (=> 
                (holds instance ?PATH ?PATHCLASS) 
                (holds pathLength ?PATH ?NUMBER)))))
(not 
    (exists
        (?PATH1 ?PATH2) 
        (and 
            (holds instance ?PATH1 
                (CutSetFn ?GRAPH)) 
            (holds instance ?PATH2 
                (MinimalCutSetFn ?GRAPH)) 
            (holds pathLength ?PATH1 ?NUMBER1) 
            (holds pathLength ?PATH2 ?NUMBER2) 
            (< ?NUMBER1 ?NUMBER2))))
(holds subclass UnitOfMeasure PhysicalQuantity)
(holds subclass SystemeInternationalUnit UnitOfMeasure)
(holds subclass LengthMeasure ConstantQuantity)
(holds subclass MassMeasure ConstantQuantity)
(holds subclass AreaMeasure ConstantQuantity)
(holds subclass VolumeMeasure ConstantQuantity)
(holds subclass TemperatureMeasure ConstantQuantity)
(holds subclass CurrencyMeasure ConstantQuantity)
(holds subclass AngleMeasure ConstantQuantity)
(holds subclass PlaneAngleMeasure AngleMeasure)
(holds subclass SolidAngleMeasure AngleMeasure)
(holds disjoint SolidAngleMeasure PlaneAngleMeasure)
(holds instance MeasureFn BinaryFunction)
(holds instance MeasureFn TotalValuedRelation)
(holds domain MeasureFn 1 RealNumber)
(holds domain MeasureFn 2 UnitOfMeasure)
(holds range MeasureFn ConstantQuantity)
(=> 
    (and 
        (equal 
            (MeasureFn ?NUMBER ?UNIT) ?QUANT) 
        (holds subclass ?UNIT ?QUANTTYPE)) 
    (holds instance ?QUANT ?QUANTTYPE))
(=> 
    (and 
        (holds instance ?REL RelationExtendedToQuantities) 
        (holds instance ?REL TernaryRelation) 
        (holds instance ?NUMBER1 RealNumber) 
        (holds instance ?NUMBER2 RealNumber) 
        (holds ?REL ?NUMBER1 ?NUMBER2 ?VALUE)) 
    (forall
        (?UNIT) 
        (=> 
            (holds instance ?UNIT UnitOfMeasure) 
            (holds ?REL 
                (MeasureFn ?NUMBER1 ?UNIT) 
                (MeasureFn ?NUMBER2 ?UNIT) 
                (MeasureFn ?VALUE ?UNIT)))))
(=> 
    (and 
        (holds instance ?REL RelationExtendedToQuantities) 
        (holds instance ?REL BinaryRelation) 
        (holds instance ?NUMBER1 RealNumber) 
        (holds instance ?NUMBER2 RealNumber) 
        (holds ?REL ?NUMBER1 ?NUMBER2)) 
    (forall
        (?UNIT) 
        (=> 
            (holds instance ?UNIT UnitOfMeasure) 
            (holds ?REL 
                (MeasureFn ?NUMBER1 ?UNIT) 
                (MeasureFn ?NUMBER2 ?UNIT)))))
(holds instance KiloFn UnaryFunction)
(holds instance KiloFn TotalValuedRelation)
(holds domain KiloFn 1 UnitOfMeasure)
(holds range KiloFn UnitOfMeasure)
(=> 
    (holds instance ?UNIT UnitOfMeasure) 
    (equal 
        (KiloFn ?UNIT) 
        (MeasureFn 1000 ?UNIT)))
(holds instance MegaFn UnaryFunction)
(holds instance MegaFn TotalValuedRelation)
(holds domain MegaFn 1 UnitOfMeasure)
(holds range MegaFn UnitOfMeasure)
(=> 
    (holds instance ?UNIT UnitOfMeasure) 
    (equal 
        (MegaFn ?UNIT) 
        (MeasureFn 1000000 ?UNIT)))
(holds instance GigaFn UnaryFunction)
(holds instance GigaFn TotalValuedRelation)
(holds domain GigaFn 1 UnitOfMeasure)
(holds range GigaFn UnitOfMeasure)
(=> 
    (holds instance ?UNIT UnitOfMeasure) 
    (equal 
        (GigaFn ?UNIT) 
        (MeasureFn 1000000000 ?UNIT)))
(holds instance TeraFn UnaryFunction)
(holds instance TeraFn TotalValuedRelation)
(holds domain TeraFn 1 UnitOfMeasure)
(holds range TeraFn UnitOfMeasure)
(=> 
    (holds instance ?UNIT UnitOfMeasure) 
    (equal 
        (TeraFn ?UNIT) 
        (MeasureFn 1000000000000 ?UNIT)))
(holds instance MilliFn UnaryFunction)
(holds instance MilliFn TotalValuedRelation)
(holds domain MilliFn 1 UnitOfMeasure)
(holds range MilliFn UnitOfMeasure)
(=> 
    (holds instance ?UNIT UnitOfMeasure) 
    (equal 
        (MilliFn ?UNIT) 
        (MeasureFn 0.001 ?UNIT)))
(holds instance MicroFn UnaryFunction)
(holds instance MicroFn TotalValuedRelation)
(holds domain MicroFn 1 UnitOfMeasure)
(holds range MicroFn UnitOfMeasure)
(=> 
    (holds instance ?UNIT UnitOfMeasure) 
    (equal 
        (MicroFn ?UNIT) 
        (MeasureFn 0.000001 ?UNIT)))
(holds instance NanoFn UnaryFunction)
(holds instance NanoFn TotalValuedRelation)
(holds domain NanoFn 1 UnitOfMeasure)
(holds range NanoFn UnitOfMeasure)
(=> 
    (holds instance ?UNIT UnitOfMeasure) 
    (equal 
        (NanoFn ?UNIT) 
        (MeasureFn 0.000000001 ?UNIT)))
(holds instance PicoFn UnaryFunction)
(holds instance PicoFn TotalValuedRelation)
(holds domain PicoFn 1 UnitOfMeasure)
(holds range PicoFn UnitOfMeasure)
(=> 
    (holds instance ?UNIT UnitOfMeasure) 
    (equal 
        (PicoFn ?UNIT) 
        (MeasureFn 0.000000000001 ?UNIT)))
(holds instance IntervalFn BinaryFunction)
(holds domain IntervalFn 1 ConstantQuantity)
(holds domain IntervalFn 2 ConstantQuantity)
(holds rangeSubclass IntervalFn ConstantQuantity)
(holds relatedInternalConcept IntervalFn RecurrentTimeIntervalFn)
(<=> 
    (holds instance ?QUANTITY 
        (IntervalFn ?FROM ?TO)) 
    (and 
        (>= ?QUANTITY ?FROM) 
        (<= ?QUANTITY ?TO)))
(holds instance MagnitudeFn UnaryFunction)
(holds domain MagnitudeFn 1 ConstantQuantity)
(holds range MagnitudeFn RealNumber)
(=> 
    (and 
        (holds instance ?NUMBER RealNumber) 
        (holds instance ?UNIT UnitOfMeasure)) 
    (equal 
        (MagnitudeFn 
            (MeasureFn ?NUMBER ?UNIT)) ?NUMBER))
(holds instance PerFn BinaryFunction)
(holds instance PerFn TotalValuedRelation)
(holds domain PerFn 1 ConstantQuantity)
(holds domain PerFn 2 ConstantQuantity)
(holds range PerFn FunctionQuantity)
(holds subrelation DensityFn PerFn)
(holds instance DensityFn TotalValuedRelation)
(holds domain DensityFn 1 MassMeasure)
(holds domain DensityFn 2 VolumeMeasure)
(holds range DensityFn FunctionQuantity)
(holds subrelation SpeedFn PerFn)
(holds instance SpeedFn TotalValuedRelation)
(holds domain SpeedFn 1 LengthMeasure)
(holds domain SpeedFn 2 TimeDuration)
(holds range SpeedFn FunctionQuantity)
(holds instance VelocityFn QuaternaryFunction)
(holds instance VelocityFn TotalValuedRelation)
(holds domain VelocityFn 1 LengthMeasure)
(holds domain VelocityFn 2 TimeDuration)
(holds domain VelocityFn 3 Region)
(holds domain VelocityFn 4 DirectionalAttribute)
(holds range VelocityFn FunctionQuantity)
(=> 
    (holds measure ?OBJECT 
        (VelocityFn ?DISTANCE ?TIME ?REF ?DIRECTION)) 
    (holds measure ?OBJECT 
        (SpeedFn ?DISTANCE ?TIME)))
(holds subclass Meter LengthMeasure)
(holds instance Meter SystemeInternationalUnit)
(holds subclass Gram MassMeasure)
(holds instance Gram SystemeInternationalUnit)
(holds subclass SecondDuration TimeDuration)
(holds instance SecondDuration SystemeInternationalUnit)
(holds subclass Ampere FunctionQuantity)
(holds instance Ampere SystemeInternationalUnit)
(holds subclass KelvinDegree TemperatureMeasure)
(holds instance KelvinDegree SystemeInternationalUnit)
(holds subclass Mole MassMeasure)
(holds instance Mole SystemeInternationalUnit)
(holds subclass Candela FunctionQuantity)
(holds instance Candela SystemeInternationalUnit)
(holds subclass Liter VolumeMeasure)
(holds instance Liter UnitOfMeasure)
(holds subclass Centimeter LengthMeasure)
(holds instance Centimeter UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER Centimeter) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 0.01) Meter)))
(holds subclass Radian PlaneAngleMeasure)
(holds instance Radian SystemeInternationalUnit)
(holds subclass Steradian SolidAngleMeasure)
(holds instance Steradian SystemeInternationalUnit)
(holds subclass Hertz TimeDependentQuantity)
(holds instance Hertz SystemeInternationalUnit)
(holds subclass Newton FunctionQuantity)
(holds instance Newton SystemeInternationalUnit)
(holds subclass Pascal FunctionQuantity)
(holds instance Pascal SystemeInternationalUnit)
(holds subclass Joule FunctionQuantity)
(holds instance Joule SystemeInternationalUnit)
(holds subclass Watt FunctionQuantity)
(holds instance Watt SystemeInternationalUnit)
(holds subclass Coulomb TimeDependentQuantity)
(holds instance Coulomb SystemeInternationalUnit)
(holds subclass Volt FunctionQuantity)
(holds instance Volt SystemeInternationalUnit)
(holds subclass Farad FunctionQuantity)
(holds instance Farad SystemeInternationalUnit)
(holds subclass Ohm FunctionQuantity)
(holds instance Ohm SystemeInternationalUnit)
(holds subclass Siemens FunctionQuantity)
(holds instance Siemens SystemeInternationalUnit)
(holds subclass Weber FunctionQuantity)
(holds instance Weber SystemeInternationalUnit)
(holds subclass Tesla FunctionQuantity)
(holds instance Tesla SystemeInternationalUnit)
(holds subclass Henry FunctionQuantity)
(holds instance Henry SystemeInternationalUnit)
(holds subclass CelsiusDegree TemperatureMeasure)
(holds instance CelsiusDegree SystemeInternationalUnit)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER CelsiusDegree) 
        (MeasureFn 
            (SubtractionFn ?NUMBER 273.15) KelvinDegree)))
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER CelsiusDegree) 
        (MeasureFn 
            (DivisionFn 
                (SubtractionFn ?NUMBER 32) 1.8) FahrenheitDegree)))
(holds subclass Lumen FunctionQuantity)
(holds instance Lumen SystemeInternationalUnit)
(holds subclass Lux FunctionQuantity)
(holds instance Lux SystemeInternationalUnit)
(holds subclass Becquerel TimeDependentQuantity)
(holds instance Becquerel SystemeInternationalUnit)
(holds subclass Gray FunctionQuantity)
(holds instance Gray SystemeInternationalUnit)
(holds subclass Sievert FunctionQuantity)
(holds instance Sievert SystemeInternationalUnit)
(holds subclass DayDuration TimeDuration)
(holds instance DayDuration UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER DayDuration) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 24) HourDuration)))
(holds subclass HourDuration TimeDuration)
(holds instance HourDuration UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER HourDuration) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 60) MinuteDuration)))
(holds subclass MinuteDuration TimeDuration)
(holds instance MinuteDuration UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER MinuteDuration) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 60) SecondDuration)))
(holds subclass WeekDuration TimeDuration)
(holds instance WeekDuration UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER WeekDuration) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 7) DayDuration)))
(holds subclass YearDuration TimeDuration)
(holds instance YearDuration UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER YearDuration) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 365) DayDuration)))
(holds subclass Amu MassMeasure)
(holds instance Amu UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER Amu) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 1.6605402E-24) Gram)))
(holds subclass ElectronVolt FunctionQuantity)
(holds instance ElectronVolt UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER ElectronVolt) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 1.60217733E-19) Joule)))
(holds subclass Angstrom LengthMeasure)
(holds instance Angstrom UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER Angstrom) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 1.0E-10) Meter)))
(holds subclass FootLength LengthMeasure)
(holds instance FootLength UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER FootLength) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 0.3048) Meter)))
(holds subclass Inch LengthMeasure)
(holds instance Inch UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER Inch) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 0.0254) Meter)))
(holds subclass Mile LengthMeasure)
(holds instance Mile UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER Mile) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 1609.344) Meter)))
(holds subclass UnitedStatesGallon VolumeMeasure)
(holds instance UnitedStatesGallon UnitOfMeasure)
(holds relatedInternalConcept UnitedStatesGallon UnitedKingdomGallon)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER UnitedStatesGallon) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 3.785411784) Liter)))
(holds subclass Quart VolumeMeasure)
(holds instance Quart UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER Quart) 
        (MeasureFn 
            (DivisionFn ?NUMBER 4) UnitedStatesGallon)))
(holds subclass Pint VolumeMeasure)
(holds instance Pint UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER Pint) 
        (MeasureFn 
            (DivisionFn ?NUMBER 2) Quart)))
(holds subclass Cup VolumeMeasure)
(holds instance Cup UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER Cup) 
        (MeasureFn 
            (DivisionFn ?NUMBER 2) Pint)))
(holds subclass Ounce VolumeMeasure)
(holds instance Ounce UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER Ounce) 
        (MeasureFn 
            (DivisionFn ?NUMBER 8) Cup)))
(holds subclass UnitedKingdomGallon VolumeMeasure)
(holds instance UnitedKingdomGallon UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER UnitedKingdomGallon) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 4.54609) Liter)))
(holds subclass AtomGram MassMeasure)
(holds instance AtomGram UnitOfMeasure)
(holds subclass PoundMass MassMeasure)
(holds instance PoundMass UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER PoundMass) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 453.59237) Gram)))
(holds subclass Slug MassMeasure)
(holds instance Slug UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER Slug) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 14593.90) Gram)))
(holds subclass RankineDegree TemperatureMeasure)
(holds instance RankineDegree UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER RankineDegree) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 1.8) KelvinDegree)))
(holds subclass FahrenheitDegree TemperatureMeasure)
(holds instance FahrenheitDegree UnitOfMeasure)
(holds subclass PoundForce FunctionQuantity)
(holds instance PoundForce UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER PoundForce) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 4.448222) Newton)))
(holds subclass Calorie FunctionQuantity)
(holds instance Calorie UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER Calorie) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 4.1868) Joule)))
(holds subclass BritishThermalUnit FunctionQuantity)
(holds instance BritishThermalUnit UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER BritishThermalUnit) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 1055.05585262) Joule)))
(holds subclass AngularDegree PlaneAngleMeasure)
(holds instance AngularDegree UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER AngularDegree) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 
                (DivisionFn Pi 180)) Radian)))
(=> 
    (holds measure ?ANGLE 
        (MeasureFn ?NUMBER AngularDegree)) 
    (and 
        (>= ?NUMBER 0) 
        (<= ?NUMBER 360)))
(equal 
    (MeasureFn 0 AngularDegree) 
    (MeasureFn 360 AngularDegree))
(holds subclass UnitedStatesDollar CurrencyMeasure)
(holds instance UnitedStatesDollar UnitOfMeasure)
(holds subclass UnitedStatesCent CurrencyMeasure)
(holds instance UnitedStatesCent UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER UnitedStatesCent) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 0.01) UnitedStatesDollar)))
(holds subclass EuroDollar CurrencyMeasure)
(holds instance EuroDollar UnitOfMeasure)
(holds subclass EuroCent CurrencyMeasure)
(holds instance EuroCent UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER EuroCent) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 0.01) EuroDollar)))
(holds subclass InformationMeasure ConstantQuantity)
(holds subclass Bit InformationMeasure)
(holds instance Bit UnitOfMeasure)
(holds subclass Byte InformationMeasure)
(holds instance Byte UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER Byte) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 8) Bit)))
(holds subclass KiloByte InformationMeasure)
(holds instance KiloByte UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER KiloByte) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 1024) Byte)))
(holds subclass MegaByte InformationMeasure)
(holds instance MegaByte UnitOfMeasure)
(=> 
    (holds instance ?NUMBER RealNumber) 
    (equal 
        (MeasureFn ?NUMBER MegaByte) 
        (MeasureFn 
            (MultiplicationFn ?NUMBER 1024) KiloByte)))
(holds instance measure BinaryPredicate)
(holds instance measure AsymmetricRelation)
(holds domain measure 1 Object)
(holds domain measure 2 PhysicalQuantity)
(holds instance age SingleValuedRelation)
(holds subrelation age measure)
(holds domain age 2 TimeDuration)
(holds subrelation length measure)
(holds domain length 2 LengthMeasure)
(holds instance width SingleValuedRelation)
(holds subrelation width length)
(holds subrelation diameter width)
(holds instance distance SingleValuedRelation)
(holds instance distance SpatialRelation)
(holds instance distance TernaryPredicate)
(holds domain distance 1 Physical)
(holds domain distance 2 Physical)
(holds domain distance 3 LengthMeasure)
(=> 
    (holds distance ?OBJ1 ?OBJ2 ?QUANT) 
    (holds distance ?OBJ2 ?OBJ1 ?QUANT))
(holds subrelation altitude distance)
(holds instance altitude SingleValuedRelation)
(=> 
    (holds altitude ?OBJ1 ?OBJ2 ?HEIGHT) 
    (holds orientation ?OBJ1 ?OBJ2 Above))
(=> 
    (holds altitude ?OBJ1 ?OBJ2 ?HEIGHT) 
    (exists
        (?TOP) 
        (and 
            (holds top ?TOP ?OBJ1) 
            (holds distance ?TOP ?OBJ2 ?HEIGHT))))
(holds subrelation depth distance)
(holds instance depth SingleValuedRelation)
(=> 
    (holds depth ?OBJ1 ?OBJ2 ?DEPTH) 
    (holds orientation ?OBJ1 ?OBJ2 Below))
(=> 
    (holds depth ?OBJ1 ?OBJ2 ?DEPTH) 
    (exists
        (?BOTTOM) 
        (and 
            (holds bottom ?BOTTOM ?OBJ1) 
            (holds distance ?BOTTOM ?OBJ2 ?DEPTH))))
(holds instance larger BinaryPredicate)
(holds instance larger SpatialRelation)
(holds instance larger TransitiveRelation)
(holds instance larger IrreflexiveRelation)
(holds domain larger 1 Object)
(holds domain larger 2 Object)
(=> 
    (holds larger ?OBJ1 ?OBJ2) 
    (forall
        (?QUANT1 ?QUANT2) 
        (=> 
            (and 
                (holds measure ?OBJ1 
                    (MeasureFn ?QUANT1 LengthMeasure)) 
                (holds measure ?OBJ2 
                    (MeasureFn ?QUANT2 LengthMeasure))) 
            (> ?QUANT1 ?QUANT2))))
(holds instance smaller BinaryPredicate)
(holds instance smaller SpatialRelation)
(holds instance smaller TransitiveRelation)
(holds instance smaller IrreflexiveRelation)
(holds domain smaller 1 Object)
(holds domain smaller 2 Object)
(holds inverse smaller larger)
(holds instance monetaryValue SingleValuedRelation)
(holds subrelation monetaryValue measure)
(holds domain monetaryValue 1 Object)
(holds domain monetaryValue 2 CurrencyMeasure)
(holds instance WealthFn UnaryFunction)
(holds domain WealthFn 1 Agent)
(holds range WealthFn CurrencyMeasure)
(<=> 
    (equal 
        (WealthFn ?PERSON) ?AMOUNT) 
    (holds monetaryValue 
        (PropertyFn ?PERSON) ?AMOUNT))
(holds instance PositiveInfinity TimePoint)
(=> 
    (and 
        (holds instance ?POINT TimePoint) 
        (not 
            (equal ?POINT PositiveInfinity))) 
    (holds before ?POINT PositiveInfinity))
(=> 
    (and 
        (holds instance ?POINT TimePoint) 
        (not 
            (equal ?POINT PositiveInfinity))) 
    (exists
        (?OTHERPOINT) 
        (holds temporallyBetween ?POINT ?OTHERPOINT PositiveInfinity)))
(holds instance NegativeInfinity TimePoint)
(=> 
    (and 
        (holds instance ?POINT TimePoint) 
        (not 
            (equal ?POINT NegativeInfinity))) 
    (holds before NegativeInfinity ?POINT))
(=> 
    (and 
        (holds instance ?POINT TimePoint) 
        (not 
            (equal ?POINT NegativeInfinity))) 
    (exists
        (?OTHERPOINT) 
        (holds temporallyBetween NegativeInfinity ?OTHERPOINT ?POINT)))
(holds instance duration BinaryPredicate)
(holds instance duration AsymmetricRelation)
(holds instance duration TotalValuedRelation)
(holds domain duration 1 TimeInterval)
(holds domain duration 2 TimeDuration)
(holds instance frequency BinaryPredicate)
(holds instance frequency AsymmetricRelation)
(holds domainSubclass frequency 1 Process)
(holds domain frequency 2 TimeDuration)
(=> 
    (holds frequency ?PROC ?TIME1) 
    (forall
        (?TIME2) 
        (=> 
            (holds duration ?TIME2 ?TIME1) 
            (exists
                (?POSITION) 
                (and 
                    (holds temporalPart ?POSITION ?TIME2) 
                    (holds holdsDuring ?POSITION `(exists
                            (?INST) 
                            (holds instance ?INST ?PROC))))))))
(holds instance temporalPart BinaryPredicate)
(holds instance temporalPart TemporalRelation)
(holds instance temporalPart PartialOrderingRelation)
(holds domain temporalPart 1 TimePosition)
(holds domain temporalPart 2 TimePosition)
(=> 
    (holds instance ?POINT TimePoint) 
    (exists
        (?INTERVAL) 
        (and 
            (holds instance ?INTERVAL TimeInterval) 
            (holds temporalPart ?POINT ?INTERVAL))))
(=> 
    (holds instance ?INTERVAL TimeInterval) 
    (exists
        (?POINT) 
        (and 
            (holds instance ?POINT TimePoint) 
            (holds temporalPart ?POINT ?INTERVAL))))
(=> 
    (and 
        (holds holdsDuring ?TIME1 ?SITUATION) 
        (holds temporalPart ?TIME2 ?TIME1)) 
    (holds holdsDuring ?TIME2 ?SITUATION))
(=> 
    (and 
        (holds holdsDuring ?INTERVAL `(holds ?REL ?INST1 ?INST2)) 
        (holds instance ?INST1 Physical) 
        (holds instance ?INST2 Physical)) 
    (and 
        (holds time ?INST1 ?INTERVAL) 
        (holds time ?INST2 ?INTERVAL)))
(<=> 
    (holds temporalPart ?POS 
        (WhenFn ?THING)) 
    (holds time ?THING ?POS))
(holds instance BeginFn TemporalRelation)
(holds instance BeginFn UnaryFunction)
(holds instance BeginFn TotalValuedRelation)
(holds domain BeginFn 1 TimeInterval)
(holds range BeginFn TimePoint)
(=> 
    (holds origin ?PROCESS ?OBJ) 
    (holds located 
        (WhereFn ?PROCESS 
            (BeginFn 
                (WhenFn ?PROCESS))) 
        (WhereFn ?OBJ 
            (BeginFn 
                (WhenFn ?OBJ)))))
(=> 
    (equal 
        (BeginFn ?INTERVAL) ?POINT) 
    (forall
        (?OTHERPOINT) 
        (=> 
            (and 
                (holds temporalPart ?OTHERPOINT ?INTERVAL) 
                (not 
                    (equal ?OTHERPOINT ?POINT))) 
            (holds before ?POINT ?OTHERPOINT))))
(holds instance EndFn TemporalRelation)
(holds instance EndFn UnaryFunction)
(holds instance EndFn TotalValuedRelation)
(holds domain EndFn 1 TimeInterval)
(holds range EndFn TimePoint)
(=> 
    (equal 
        (EndFn ?INTERVAL) ?POINT) 
    (forall
        (?OTHERPOINT) 
        (=> 
            (and 
                (holds temporalPart ?OTHERPOINT ?INTERVAL) 
                (not 
                    (equal ?OTHERPOINT ?POINT))) 
            (holds before ?OTHERPOINT ?POINT))))
(=> 
    (and 
        (holds resource ?PROC ?OBJ) 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?PROC)) `(holds measure ?OBJ ?QUANT1)) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?PROC)) `(holds measure ?OBJ ?QUANT2))) 
    (> ?QUANT1 ?QUANT2))
(holds instance starts BinaryPredicate)
(holds instance starts TemporalRelation)
(holds instance starts TransitiveRelation)
(holds instance starts IrreflexiveRelation)
(holds domain starts 1 TimeInterval)
(holds domain starts 2 TimeInterval)
(<=> 
    (holds starts ?INTERVAL1 ?INTERVAL2) 
    (and 
        (equal 
            (BeginFn ?INTERVAL1) 
            (BeginFn ?INTERVAL2)) 
        (holds before 
            (EndFn ?INTERVAL1) 
            (EndFn ?INTERVAL2))))
(holds instance finishes BinaryPredicate)
(holds instance finishes TemporalRelation)
(holds instance finishes TransitiveRelation)
(holds instance finishes IrreflexiveRelation)
(holds domain finishes 1 TimeInterval)
(holds domain finishes 2 TimeInterval)
(<=> 
    (holds finishes ?INTERVAL1 ?INTERVAL2) 
    (and 
        (holds before 
            (BeginFn ?INTERVAL2) 
            (BeginFn ?INTERVAL1)) 
        (equal 
            (EndFn ?INTERVAL2) 
            (EndFn ?INTERVAL1))))
(holds instance before TemporalRelation)
(holds instance before IrreflexiveRelation)
(holds instance before TransitiveRelation)
(holds subrelation before beforeOrEqual)
(holds relatedInternalConcept before earlier)
(holds domain before 1 TimePoint)
(holds domain before 2 TimePoint)
(=> 
    (holds instance ?OBJ Object) 
    (exists
        (?TIME1 ?TIME2) 
        (and 
            (holds instance ?TIME1 TimePoint) 
            (holds instance ?TIME2 TimePoint) 
            (holds before ?TIME1 ?TIME2) 
            (forall
                (?TIME) 
                (=> 
                    (and 
                        (holds beforeOrEqual ?TIME1 ?TIME) 
                        (holds beforeOrEqual ?TIME ?TIME2)) 
                    (holds time ?OBJ ?TIME))))))
(=> 
    (holds result ?PROC ?OBJ) 
    (forall
        (?TIME) 
        (=> 
            (holds before ?TIME 
                (BeginFn 
                    (WhenFn ?PROC))) 
            (not 
                (holds time ?OBJ ?TIME)))))
(=> 
    (holds instance ?INTERVAL TimeInterval) 
    (holds before 
        (BeginFn ?INTERVAL) 
        (EndFn ?INTERVAL)))
(holds instance beforeOrEqual BinaryPredicate)
(holds instance beforeOrEqual TemporalRelation)
(holds instance beforeOrEqual PartialOrderingRelation)
(holds domain beforeOrEqual 1 TimePoint)
(holds domain beforeOrEqual 2 TimePoint)
(=> 
    (holds beforeOrEqual ?POINT1 ?POINT2) 
    (or 
        (holds before ?POINT1 ?POINT2) 
        (equal ?POINT1 ?POINT2)))
(holds instance temporallyBetween TemporalRelation)
(holds instance temporallyBetween TernaryPredicate)
(holds subrelation temporallyBetween temporallyBetweenOrEqual)
(holds domain temporallyBetween 1 TimePoint)
(holds domain temporallyBetween 2 TimePoint)
(holds domain temporallyBetween 3 TimePoint)
(<=> 
    (holds temporallyBetween ?POINT1 ?POINT2 ?POINT3) 
    (and 
        (holds before ?POINT1 ?POINT2) 
        (holds before ?POINT2 ?POINT3)))
(holds instance temporallyBetweenOrEqual TemporalRelation)
(holds instance temporallyBetweenOrEqual TernaryPredicate)
(holds domain temporallyBetweenOrEqual 1 TimePoint)
(holds domain temporallyBetweenOrEqual 2 TimePoint)
(holds domain temporallyBetweenOrEqual 3 TimePoint)
(<=> 
    (holds temporallyBetweenOrEqual ?POINT1 ?POINT2 ?POINT3) 
    (and 
        (holds beforeOrEqual ?POINT1 ?POINT2) 
        (holds beforeOrEqual ?POINT2 ?POINT3)))
(<=> 
    (and 
        (holds time ?PHYS ?TIME) 
        (holds instance ?TIME TimePoint)) 
    (holds temporallyBetweenOrEqual 
        (BeginFn 
            (WhenFn ?PHYS)) ?TIME 
        (EndFn 
            (WhenFn ?PHYS))))
(holds instance overlapsTemporally BinaryPredicate)
(holds instance overlapsTemporally TemporalRelation)
(holds instance overlapsTemporally ReflexiveRelation)
(holds instance overlapsTemporally SymmetricRelation)
(holds domain overlapsTemporally 1 TimeInterval)
(holds domain overlapsTemporally 2 TimeInterval)
(<=> 
    (holds overlapsTemporally ?INTERVAL1 ?INTERVAL2) 
    (exists
        (?INTERVAL3) 
        (and 
            (holds instance ?INTERVAL3 TimeInterval) 
            (holds temporalPart ?INTERVAL3 ?INTERVAL1) 
            (holds temporalPart ?INTERVAL3 ?INTERVAL2))))
(=> 
    (and 
        (holds instance ?REL SpatialRelation) 
        (holds ?REL ?OBJ1 ?OBJ2)) 
    (holds overlapsTemporally 
        (WhenFn ?OBJ1) 
        (WhenFn ?OBJ2)))
(holds subrelation during temporalPart)
(holds instance during TransitiveRelation)
(holds instance during IrreflexiveRelation)
(holds subrelation during overlapsTemporally)
(holds domain during 1 TimeInterval)
(holds domain during 2 TimeInterval)
(=> 
    (holds during ?INTERVAL1 ?INTERVAL2) 
    (and 
        (holds before 
            (EndFn ?INTERVAL1) 
            (EndFn ?INTERVAL2)) 
        (holds before 
            (BeginFn ?INTERVAL2) 
            (BeginFn ?INTERVAL1))))
(holds instance meetsTemporally BinaryPredicate)
(holds instance meetsTemporally TemporalRelation)
(holds instance meetsTemporally AsymmetricRelation)
(holds instance meetsTemporally IntransitiveRelation)
(holds domain meetsTemporally 1 TimeInterval)
(holds domain meetsTemporally 2 TimeInterval)
(<=> 
    (holds meetsTemporally ?INTERVAL1 ?INTERVAL2) 
    (equal 
        (EndFn ?INTERVAL1) 
        (BeginFn ?INTERVAL2)))
(=> 
    (and 
        (equal 
            (BeginFn ?INTERVAL1) 
            (BeginFn ?INTERVAL2)) 
        (equal 
            (EndFn ?INTERVAL1) 
            (EndFn ?INTERVAL2))) 
    (equal ?INTERVAL1 ?INTERVAL2))
(holds instance earlier BinaryPredicate)
(holds instance earlier TemporalRelation)
(holds instance earlier TransitiveRelation)
(holds instance earlier IrreflexiveRelation)
(holds domain earlier 1 TimeInterval)
(holds domain earlier 2 TimeInterval)
(<=> 
    (holds earlier ?INTERVAL1 ?INTERVAL2) 
    (holds before 
        (EndFn ?INTERVAL1) 
        (BeginFn ?INTERVAL2)))
(holds instance cooccur BinaryPredicate)
(holds instance cooccur TemporalRelation)
(holds instance cooccur EquivalenceRelation)
(holds domain cooccur 1 Physical)
(holds domain cooccur 2 Physical)
(<=> 
    (holds cooccur ?PHYS1 ?PHYS2) 
    (equal 
        (WhenFn ?PHYS1) 
        (WhenFn ?PHYS2)))
(holds instance TimeIntervalFn BinaryFunction)
(holds instance TimeIntervalFn TemporalRelation)
(holds domain TimeIntervalFn 1 TimePoint)
(holds domain TimeIntervalFn 2 TimePoint)
(holds range TimeIntervalFn TimeInterval)
(=> 
    (and 
        (holds instance ?POINT1 TimePoint) 
        (holds instance ?POINT2 TimePoint) 
        (holds instance ?INTERVAL TimeInterval) 
        (equal 
            (TimeIntervalFn ?POINT1 ?POINT2) ?INTERVAL)) 
    (and 
        (equal 
            (BeginFn ?INTERVAL) ?POINT1) 
        (equal 
            (EndFn ?INTERVAL) ?POINT2)))
(=> 
    (and 
        (holds instance ?POINT1 TimePoint) 
        (holds instance ?POINT2 TimePoint) 
        (holds instance ?INTERVAL TimeInterval) 
        (equal 
            (TimeIntervalFn ?POINT1 ?POINT2) ?INTERVAL)) 
    (forall
        (?POINT) 
        (<=> 
            (holds temporallyBetweenOrEqual ?POINT1 ?POINT ?POINT2) 
            (holds temporalPart ?POINT ?INTERVAL))))
(holds instance RecurrentTimeIntervalFn TemporalRelation)
(holds instance RecurrentTimeIntervalFn BinaryFunction)
(holds domainSubclass RecurrentTimeIntervalFn 1 TimeInterval)
(holds domainSubclass RecurrentTimeIntervalFn 2 TimeInterval)
(holds rangeSubclass RecurrentTimeIntervalFn TimeInterval)
(=> 
    (holds instance ?INTERVAL 
        (RecurrentTimeIntervalFn ?TIMECLASS1 ?TIMECLASS2)) 
    (exists
        (?TIME1 ?TIME2) 
        (and 
            (holds instance ?TIME1 ?TIMECLASS1) 
            (holds instance ?TIME2 ?TIMECLASS2) 
            (holds starts ?TIME1 ?INTERVAL) 
            (holds finishes ?TIME2 ?INTERVAL))))
(holds instance WhenFn TemporalRelation)
(holds instance WhenFn UnaryFunction)
(holds instance WhenFn TotalValuedRelation)
(holds domain WhenFn 1 Physical)
(holds range WhenFn TimeInterval)
(holds instance PastFn TemporalRelation)
(holds instance PastFn UnaryFunction)
(holds instance PastFn TotalValuedRelation)
(holds domain PastFn 1 TimePosition)
(holds range PastFn TimeInterval)
(=> 
    (holds instance ?INTERVAL TimeInterval) 
    (holds meetsTemporally 
        (PastFn ?INTERVAL) ?INTERVAL))
(=> 
    (holds instance ?INTERVAL TimeInterval) 
    (equal 
        (PastFn ?INTERVAL) 
        (TimeIntervalFn NegativeInfinity 
            (BeginFn ?INTERVAL))))
(holds instance ImmediatePastFn TemporalRelation)
(holds instance ImmediatePastFn UnaryFunction)
(holds instance ImmediatePastFn TotalValuedRelation)
(holds domain ImmediatePastFn 1 TimePosition)
(holds range ImmediatePastFn TimeInterval)
(=> 
    (holds instance ?INTERVAL TimeInterval) 
    (holds finishes 
        (ImmediatePastFn ?INTERVAL) 
        (PastFn ?INTERVAL)))
(holds instance FutureFn TemporalRelation)
(holds instance FutureFn UnaryFunction)
(holds instance FutureFn TotalValuedRelation)
(holds domain FutureFn 1 TimePosition)
(holds range FutureFn TimeInterval)
(=> 
    (holds instance ?INTERVAL TimeInterval) 
    (holds meetsTemporally ?INTERVAL 
        (FutureFn ?INTERVAL)))
(=> 
    (holds instance ?INTERVAL TimeInterval) 
    (equal 
        (FutureFn ?INTERVAL) 
        (TimeIntervalFn 
            (EndFn ?INTERVAL) PositiveInfinity)))
(holds instance ImmediateFutureFn TemporalRelation)
(holds instance ImmediateFutureFn UnaryFunction)
(holds instance ImmediateFutureFn TotalValuedRelation)
(holds domain ImmediateFutureFn 1 TimePosition)
(holds range ImmediateFutureFn TimeInterval)
(=> 
    (holds instance ?INTERVAL TimeInterval) 
    (holds starts 
        (ImmediateFutureFn ?INTERVAL) 
        (FutureFn ?INTERVAL)))
(holds instance date BinaryPredicate)
(holds instance date SingleValuedRelation)
(holds instance date AsymmetricRelation)
(holds domain date 1 Physical)
(holds domain date 2 Day)
(holds subrelation date time)
(holds instance YearFn TemporalRelation)
(holds instance YearFn UnaryFunction)
(holds domain YearFn 1 Integer)
(holds rangeSubclass YearFn Year)
(holds instance MonthFn TemporalRelation)
(holds instance MonthFn BinaryFunction)
(holds domainSubclass MonthFn 1 Month)
(holds domainSubclass MonthFn 2 Year)
(holds rangeSubclass MonthFn Month)
(holds instance DayFn TemporalRelation)
(holds instance DayFn BinaryFunction)
(holds domain DayFn 1 PositiveRealNumber)
(holds domainSubclass DayFn 2 Month)
(holds rangeSubclass DayFn Day)
(=> 
    (holds instance ?DAY 
        (DayFn ?NUMBER ?MONTH)) 
    (<= ?NUMBER 31))
(=> 
    (and 
        (holds instance ?DAY1 
            (DayFn ?NUMBER1 ?MONTH)) 
        (holds instance ?DAY2 
            (DayFn ?NUMBER2 ?MONTH)) 
        (equal 
            (SubtractionFn ?NUMBER2 ?NUMBER1) 1)) 
    (holds meetsTemporally ?DAY1 ?DAY2))
(holds instance HourFn TemporalRelation)
(holds instance HourFn BinaryFunction)
(holds domain HourFn 1 PositiveRealNumber)
(holds domainSubclass HourFn 2 Day)
(holds rangeSubclass HourFn Hour)
(=> 
    (holds instance ?HOUR 
        (HourFn ?NUMBER ?DAY)) 
    (< ?NUMBER 24))
(=> 
    (and 
        (holds instance ?HOUR1 
            (HourFn ?NUMBER1 ?DAY)) 
        (holds instance ?HOUR2 
            (HourFn ?NUMBER2 ?DAY)) 
        (equal 
            (SubtractionFn ?NUMBER2 ?NUMBER1) 1)) 
    (holds meetsTemporally ?HOUR1 ?HOUR2))
(holds instance MinuteFn TemporalRelation)
(holds instance MinuteFn BinaryFunction)
(holds domain MinuteFn 1 PositiveRealNumber)
(holds domainSubclass MinuteFn 2 Hour)
(holds rangeSubclass MinuteFn Minute)
(=> 
    (holds instance ?MINUTE 
        (MinuteFn ?NUMBER ?HOUR)) 
    (< ?NUMBER 60))
(=> 
    (and 
        (holds instance ?MINUTE1 
            (MinuteFn ?NUMBER1 ?HOUR)) 
        (holds instance ?MINUTE2 
            (MinuteFn ?NUMBER2 ?HOUR)) 
        (equal 
            (SubtractionFn ?NUMBER2 ?NUMBER1) 1)) 
    (holds meetsTemporally ?MINUTE1 ?MINUTE2))
(holds instance SecondFn TemporalRelation)
(holds instance SecondFn BinaryFunction)
(holds domain SecondFn 1 PositiveRealNumber)
(holds domainSubclass SecondFn 2 Minute)
(holds rangeSubclass SecondFn Second)
(=> 
    (holds instance ?SECOND 
        (SecondFn ?NUMBER ?MINUTE)) 
    (< ?NUMBER 60))
(=> 
    (and 
        (holds instance ?SECOND1 
            (SecondFn ?NUMBER1 ?MINUTE)) 
        (holds instance ?SECOND2 
            (SecondFn ?NUMBER2 ?MINUTE)) 
        (equal 
            (SubtractionFn ?NUMBER2 ?NUMBER1) 1)) 
    (holds meetsTemporally ?SECOND1 ?SECOND2))
(holds subclass Year TimeInterval)
(holds relatedInternalConcept Year YearFn)
(holds relatedInternalConcept Year YearDuration)
(=> 
    (holds instance ?YEAR Year) 
    (holds duration ?YEAR 
        (MeasureFn 1 YearDuration)))
(=> 
    (and 
        (holds instance ?YEAR1 Year) 
        (holds instance ?YEAR2 Year) 
        (equal 
            (SubtractionFn ?YEAR2 ?YEAR1) 1)) 
    (holds meetsTemporally ?YEAR1 ?YEAR2))
(holds subclass LeapYear Year)
(=> 
    (and 
        (holds instance ?LEAP LeapYear) 
        (equal ?LEAP 
            (MeasureFn ?NUMBER Year))) 
    (or 
        (and 
            (equal 
                (RemainderFn ?NUMBER 4) 0) 
            (not 
                (equal 
                    (RemainderFn ?NUMBER 100) 0))) 
        (equal 
            (RemainderFn ?NUMBER 400) 0)))
(holds subclass Month TimeInterval)
(holds relatedInternalConcept Month MonthFn)
(holds subclass January Month)
(=> 
    (holds instance ?MONTH January) 
    (holds duration ?MONTH 
        (MeasureFn 31 DayDuration)))
(=> 
    (and 
        (equal ?MONTH1 
            (MonthFn January ?YEAR)) 
        (equal ?MONTH2 
            (MonthFn February ?YEAR))) 
    (holds meetsTemporally ?MONTH1 ?MONTH2))
(holds subclass February Month)
(=> 
    (and 
        (equal 
            (MonthFn February ?YEAR) ?MONTH) 
        (not 
            (holds instance ?YEAR LeapYear))) 
    (holds duration ?MONTH 
        (MeasureFn 28 DayDuration)))
(=> 
    (and 
        (equal 
            (MonthFn February ?YEAR) ?MONTH) 
        (holds instance ?YEAR LeapYear)) 
    (holds duration ?MONTH 
        (MeasureFn 29 DayDuration)))
(=> 
    (and 
        (equal ?MONTH1 
            (MonthFn February ?YEAR)) 
        (equal ?MONTH2 
            (MonthFn March ?YEAR))) 
    (holds meetsTemporally ?MONTH1 ?MONTH2))
(holds subclass March Month)
(=> 
    (holds instance ?MONTH March) 
    (holds duration ?MONTH 
        (MeasureFn 31 DayDuration)))
(=> 
    (and 
        (equal ?MONTH1 
            (MonthFn March ?YEAR)) 
        (equal ?MONTH2 
            (MonthFn April ?YEAR))) 
    (holds meetsTemporally ?MONTH1 ?MONTH2))
(holds subclass April Month)
(=> 
    (holds instance ?MONTH April) 
    (holds duration ?MONTH 
        (MeasureFn 30 DayDuration)))
(=> 
    (and 
        (equal ?MONTH1 
            (MonthFn April ?YEAR)) 
        (equal ?MONTH2 
            (MonthFn May ?YEAR))) 
    (holds meetsTemporally ?MONTH1 ?MONTH2))
(holds subclass May Month)
(=> 
    (holds instance ?MONTH May) 
    (holds duration ?MONTH 
        (MeasureFn 31 DayDuration)))
(=> 
    (and 
        (equal ?MONTH1 
            (MonthFn May ?YEAR)) 
        (equal ?MONTH2 
            (MonthFn June ?YEAR))) 
    (holds meetsTemporally ?MONTH1 ?MONTH2))
(holds subclass June Month)
(=> 
    (holds instance ?MONTH June) 
    (holds duration ?MONTH 
        (MeasureFn 30 DayDuration)))
(=> 
    (and 
        (equal ?MONTH1 
            (MonthFn June ?YEAR)) 
        (equal ?MONTH2 
            (MonthFn July ?YEAR))) 
    (holds meetsTemporally ?MONTH1 ?MONTH2))
(holds subclass July Month)
(=> 
    (holds instance ?MONTH July) 
    (holds duration ?MONTH 
        (MeasureFn 31 DayDuration)))
(=> 
    (and 
        (equal ?MONTH1 
            (MonthFn July ?YEAR)) 
        (equal ?MONTH2 
            (MonthFn August ?YEAR))) 
    (holds meetsTemporally ?MONTH1 ?MONTH2))
(holds subclass August Month)
(=> 
    (holds instance ?MONTH August) 
    (holds duration ?MONTH 
        (MeasureFn 31 DayDuration)))
(=> 
    (and 
        (equal ?MONTH1 
            (MonthFn August ?YEAR)) 
        (equal ?MONTH2 
            (MonthFn September ?YEAR))) 
    (holds meetsTemporally ?MONTH1 ?MONTH2))
(holds subclass September Month)
(=> 
    (holds instance ?MONTH September) 
    (holds duration ?MONTH 
        (MeasureFn 30 DayDuration)))
(=> 
    (and 
        (equal ?MONTH1 
            (MonthFn September ?YEAR)) 
        (equal ?MONTH2 
            (MonthFn October ?YEAR))) 
    (holds meetsTemporally ?MONTH1 ?MONTH2))
(holds subclass October Month)
(=> 
    (holds instance ?MONTH October) 
    (holds duration ?MONTH 
        (MeasureFn 31 DayDuration)))
(=> 
    (and 
        (equal ?MONTH1 
            (MonthFn October ?YEAR)) 
        (equal ?MONTH2 
            (MonthFn November ?YEAR))) 
    (holds meetsTemporally ?MONTH1 ?MONTH2))
(holds subclass November Month)
(=> 
    (holds instance ?MONTH November) 
    (holds duration ?MONTH 
        (MeasureFn 30 DayDuration)))
(=> 
    (and 
        (equal ?MONTH1 
            (MonthFn November ?YEAR)) 
        (equal ?MONTH2 
            (MonthFn December ?YEAR))) 
    (holds meetsTemporally ?MONTH1 ?MONTH2))
(holds subclass December Month)
(=> 
    (holds instance ?MONTH December) 
    (holds duration ?MONTH 
        (MeasureFn 31 DayDuration)))
(=> 
    (and 
        (equal ?MONTH1 
            (MonthFn December ?YEAR1)) 
        (equal ?MONTH2 
            (MonthFn January ?YEAR2)) 
        (holds meetsTemporally ?YEAR1 ?YEAR2)) 
    (holds meetsTemporally ?MONTH1 ?MONTH2))
(holds subclass Day TimeInterval)
(holds relatedInternalConcept Day DayFn)
(holds relatedInternalConcept Day DayDuration)
(=> 
    (holds instance ?DAY Day) 
    (holds duration ?DAY 
        (MeasureFn 1 DayDuration)))
(holds subclass Monday Day)
(holds subclass Tuesday Day)
(=> 
    (and 
        (holds instance ?DAY1 Monday) 
        (holds instance ?DAY2 Tuesday) 
        (holds instance ?WEEK Week) 
        (holds temporalPart ?DAY1 ?WEEK) 
        (holds temporalPart ?DAY2 ?WEEK)) 
    (holds meetsTemporally ?DAY1 ?DAY2))
(holds subclass Wednesday Day)
(=> 
    (and 
        (holds instance ?DAY1 Tuesday) 
        (holds instance ?DAY2 Wednesday) 
        (holds instance ?WEEK Week) 
        (holds temporalPart ?DAY1 ?WEEK) 
        (holds temporalPart ?DAY2 ?WEEK)) 
    (holds meetsTemporally ?DAY1 ?DAY2))
(holds subclass Thursday Day)
(=> 
    (and 
        (holds instance ?DAY1 Wednesday) 
        (holds instance ?DAY2 Thursday) 
        (holds instance ?WEEK Week) 
        (holds temporalPart ?DAY1 ?WEEK) 
        (holds temporalPart ?DAY2 ?WEEK)) 
    (holds meetsTemporally ?DAY1 ?DAY2))
(holds subclass Friday Day)
(=> 
    (and 
        (holds instance ?DAY1 Thursday) 
        (holds instance ?DAY2 Friday) 
        (holds instance ?WEEK Week) 
        (holds temporalPart ?DAY1 ?WEEK) 
        (holds temporalPart ?DAY2 ?WEEK)) 
    (holds meetsTemporally ?DAY1 ?DAY2))
(holds subclass Saturday Day)
(=> 
    (and 
        (holds instance ?DAY1 Friday) 
        (holds instance ?DAY2 Saturday) 
        (holds instance ?WEEK Week) 
        (holds temporalPart ?DAY1 ?WEEK) 
        (holds temporalPart ?DAY2 ?WEEK)) 
    (holds meetsTemporally ?DAY1 ?DAY2))
(holds subclass Sunday Day)
(=> 
    (and 
        (holds instance ?DAY1 Saturday) 
        (holds instance ?DAY2 Sunday) 
        (holds instance ?WEEK Week) 
        (holds temporalPart ?DAY1 ?WEEK) 
        (holds temporalPart ?DAY2 ?WEEK)) 
    (holds meetsTemporally ?DAY1 ?DAY2))
(=> 
    (and 
        (holds instance ?DAY1 Sunday) 
        (holds instance ?DAY2 Monday) 
        (holds instance ?WEEK1 Week) 
        (holds instance ?WEEK2 Week) 
        (holds temporalPart ?DAY1 ?WEEK1) 
        (holds temporalPart ?DAY2 ?WEEK2) 
        (holds meetsTemporally ?WEEK1 ?WEEK2)) 
    (holds meetsTemporally ?DAY1 ?DAY2))
(holds subclass Week TimeInterval)
(=> 
    (holds instance ?WEEK Week) 
    (holds duration ?WEEK 
        (MeasureFn 1 WeekDuration)))
(holds subclass Hour TimeInterval)
(holds relatedInternalConcept Hour HourFn)
(holds relatedInternalConcept Hour HourDuration)
(=> 
    (holds instance ?HOUR Hour) 
    (holds duration ?HOUR 
        (MeasureFn 1 HourDuration)))
(holds subclass Minute TimeInterval)
(holds relatedInternalConcept Minute MinuteFn)
(holds relatedInternalConcept Minute MinuteDuration)
(=> 
    (holds instance ?MINUTE Minute) 
    (holds duration ?MINUTE 
        (MeasureFn 1 MinuteDuration)))
(holds subclass Second TimeInterval)
(holds relatedInternalConcept Second SecondDuration)
(holds relatedInternalConcept Second SecondFn)
(=> 
    (holds instance ?SECOND Second) 
    (holds duration ?SECOND 
        (MeasureFn 1 SecondDuration)))
(holds instance TemporalCompositionFn TemporalRelation)
(holds instance TemporalCompositionFn BinaryFunction)
(holds domain TemporalCompositionFn 1 TimeInterval)
(holds domainSubclass TemporalCompositionFn 2 TimeInterval)
(holds rangeSubclass TemporalCompositionFn TimeInterval)
(=> 
    (equal 
        (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS) 
    (forall
        (?TIME1 ?TIME2) 
        (=> 
            (and 
                (holds instance ?TIME1 ?INTERVAL-TYPE) 
                (holds instance ?TIME2 ?CLASS)) 
            (exists
                (?DURATION) 
                (and 
                    (holds duration ?TIME1 ?DURATION) 
                    (holds duration ?TIME2 ?DURATION))))))
(=> 
    (equal 
        (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS) 
    (forall
        (?TIME1 ?TIME2) 
        (=> 
            (and 
                (holds instance ?TIME1 ?CLASS) 
                (holds instance ?TIME2 ?CLASS) 
                (not 
                    (equal ?TIME1 ?TIME2))) 
            (or 
                (holds meetsTemporally ?TIME1 ?TIME2) 
                (holds meetsTemporally ?TIME2 ?TIME1) 
                (holds earlier ?TIME1 ?TIME2) 
                (holds earlier ?TIME2 ?TIME1)))))
(=> 
    (equal 
        (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS) 
    (exists
        (?TIME) 
        (and 
            (holds instance ?TIME ?CLASS) 
            (holds starts ?TIME ?INTERVAL))))
(=> 
    (equal 
        (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS) 
    (exists
        (?TIME) 
        (and 
            (holds instance ?TIME ?CLASS) 
            (holds finishes ?TIME ?INTERVAL))))
(=> 
    (equal 
        (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS) 
    (forall
        (?TIME1) 
        (=> 
            (and 
                (holds instance ?TIME1 ?CLASS) 
                (not 
                    (holds finishes ?TIME1 ?INTERVAL))) 
            (exists
                (?TIME2) 
                (and 
                    (holds instance ?TIME2 ?CLASS) 
                    (holds meetsTemporally ?TIME1 ?TIME2))))))
(=> 
    (equal 
        (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS) 
    (forall
        (?TIME1) 
        (=> 
            (and 
                (holds instance ?TIME1 ?CLASS) 
                (not 
                    (holds starts ?TIME1 ?INTERVAL))) 
            (exists
                (?TIME2) 
                (and 
                    (holds instance ?TIME2 ?CLASS) 
                    (holds meetsTemporally ?TIME2 ?TIME1))))))
(=> 
    (equal 
        (TemporalCompositionFn ?INTERVAL ?INTERVAL-TYPE) ?CLASS) 
    (forall
        (?TIME) 
        (=> 
            (and 
                (holds instance ?TIME TimePoint) 
                (holds temporalPart ?TIME ?INTERVAL)) 
            (exists
                (?INSTANCE) 
                (and 
                    (holds instance ?INSTANCE ?CLASS) 
                    (holds temporalPart ?TIME ?INSTANCE))))))
(=> 
    (holds instance ?YEAR Year) 
    (equal 
        (CardinalityFn 
            (TemporalCompositionFn ?YEAR Month)) 12))
(=> 
    (and 
        (holds instance ?MONTH Month) 
        (holds duration ?MONTH 
            (MeasureFn ?NUMBER DayDuration))) 
    (equal 
        (CardinalityFn 
            (TemporalCompositionFn ?MONTH Day)) ?NUMBER))
(=> 
    (holds instance ?WEEK Week) 
    (equal 
        (CardinalityFn 
            (TemporalCompositionFn ?WEEK Day)) 7))
(=> 
    (holds instance ?DAY Day) 
    (equal 
        (CardinalityFn 
            (TemporalCompositionFn ?DAY Hour)) 24))
(=> 
    (holds instance ?HOUR Hour) 
    (equal 
        (CardinalityFn 
            (TemporalCompositionFn ?HOUR Minute)) 60))
(=> 
    (holds instance ?MINUTE Minute) 
    (equal 
        (CardinalityFn 
            (TemporalCompositionFn ?MINUTE Second)) 60))
(holds instance connected BinaryPredicate)
(holds instance connected SpatialRelation)
(holds instance connected ReflexiveRelation)
(holds instance connected SymmetricRelation)
(holds domain connected 1 Object)
(holds domain connected 2 Object)
(=> 
    (holds connected ?OBJ1 ?OBJ2) 
    (or 
        (holds meetsSpatially ?OBJ1 ?OBJ2) 
        (holds overlapsSpatially ?OBJ1 ?OBJ2)))
(<=> 
    (holds instance ?OBJ SelfConnectedObject) 
    (forall
        (?PART1 ?PART2) 
        (=> 
            (equal ?OBJ 
                (MereologicalSumFn ?PART1 ?PART2)) 
            (holds connected ?PART1 ?PART2))))
(holds instance connects SpatialRelation)
(holds instance connects TernaryPredicate)
(holds domain connects 1 SelfConnectedObject)
(holds domain connects 2 SelfConnectedObject)
(holds domain connects 3 SelfConnectedObject)
(<=> 
    (holds connects ?OBJ1 ?OBJ2 ?OBJ3) 
    (and 
        (holds connected ?OBJ1 ?OBJ2) 
        (holds connected ?OBJ1 ?OBJ3) 
        (not 
            (holds connected ?OBJ2 ?OBJ3))))
(holds subrelation meetsSpatially connected)
(holds instance meetsSpatially IrreflexiveRelation)
(holds instance meetsSpatially SymmetricRelation)
(holds disjointRelation meetsSpatially overlapsSpatially)
(holds subrelation overlapsSpatially connected)
(holds instance overlapsSpatially ReflexiveRelation)
(holds instance overlapsSpatially SymmetricRelation)
(<=> 
    (holds overlapsSpatially ?OBJ1 ?OBJ2) 
    (exists
        (?OBJ3) 
        (and 
            (holds part ?OBJ3 ?OBJ1) 
            (holds part ?OBJ3 ?OBJ2))))
(=> 
    (and 
        (holds member ?OBJ1 ?COLL) 
        (holds member ?OBJ2 ?COLL) 
        (not 
            (equal ?OBJ1 ?OBJ2))) 
    (not 
        (holds overlapsSpatially ?OBJ1 ?OBJ2)))
(=> 
    (and 
        (holds instance ?REL CaseRole) 
        (holds instance ?OBJ Object) 
        (holds ?REL ?PROCESS ?OBJ)) 
    (exists
        (?TIME) 
        (holds overlapsSpatially 
            (WhereFn ?PROCESS ?TIME) ?OBJ)))
(holds instance overlapsPartially SymmetricRelation)
(holds instance overlapsPartially IrreflexiveRelation)
(holds subrelation overlapsPartially overlapsSpatially)
(<=> 
    (holds overlapsPartially ?OBJ1 ?OBJ2) 
    (and 
        (not 
            (holds part ?OBJ1 ?OBJ2)) 
        (not 
            (holds part ?OBJ2 ?OBJ1)) 
        (exists
            (?OBJ3) 
            (and 
                (holds part ?OBJ3 ?OBJ1) 
                (holds part ?OBJ3 ?OBJ2)))))
(holds subrelation superficialPart part)
(holds instance superficialPart IrreflexiveRelation)
(holds instance superficialPart TransitiveRelation)
(=> 
    (holds superficialPart ?OBJ1 ?OBJ2) 
    (and 
        (not 
            (holds interiorPart ?OBJ1 ?OBJ2)) 
        (not 
            (exists
                (?OBJ3) 
                (holds interiorPart ?OBJ3 ?OBJ1)))))
(holds instance surface AsymmetricRelation)
(holds subrelation surface superficialPart)
(holds domain surface 1 SelfConnectedObject)
(holds domain surface 2 SelfConnectedObject)
(=> 
    (holds surface ?OBJ1 ?OBJ2) 
    (forall
        (?OBJ3) 
        (=> 
            (holds superficialPart ?OBJ3 ?OBJ2) 
            (holds part ?OBJ3 ?OBJ1))))
(holds subrelation interiorPart part)
(holds instance interiorPart AsymmetricRelation)
(holds instance interiorPart TransitiveRelation)
(=> 
    (holds interiorPart ?OBJ1 ?OBJ2) 
    (forall
        (?PART) 
        (=> 
            (holds superficialPart ?PART ?OBJ2) 
            (not 
                (holds overlapsSpatially ?OBJ1 ?PART)))))
(holds subrelation bottom superficialPart)
(holds domain bottom 1 SelfConnectedObject)
(holds domain bottom 2 SelfConnectedObject)
(=> 
    (and 
        (holds bottom ?BOTTOM ?OBJECT) 
        (holds part ?PART ?OBJECT) 
        (not 
            (holds connected ?PART ?BOTTOM))) 
    (holds orientation ?PART ?BOTTOM Above))
(holds subrelation top superficialPart)
(holds domain top 1 SelfConnectedObject)
(holds domain top 2 SelfConnectedObject)
(=> 
    (and 
        (holds top ?TOP ?OBJECT) 
        (holds part ?PART ?OBJECT) 
        (not 
            (holds connected ?PART ?TOP))) 
    (holds orientation ?PART ?TOP Below))
(holds subrelation side superficialPart)
(holds domain side 1 SelfConnectedObject)
(holds domain side 2 SelfConnectedObject)
(=> 
    (and 
        (holds side ?SIDE ?OBJECT) 
        (holds part ?PART ?OBJECT) 
        (not 
            (holds connected ?PART ?SIDE))) 
    (exists
        (?DIRECT) 
        (holds orientation ?SIDE ?PART ?DIRECT)))
(<=> 
    (holds width ?OBJECT ?WIDTH) 
    (exists
        (?SIDE1 ?SIDE2) 
        (and 
            (holds side ?SIDE1 ?OBJECT) 
            (holds side ?SIDE2 ?OBJECT) 
            (holds distance ?SIDE1 ?SIDE2 ?WIDTH))))
(holds subrelation height length)
(holds domain height 1 SelfConnectedObject)
(holds domain height 2 LengthMeasure)
(=> 
    (and 
        (holds height ?OBJECT ?HEIGHT) 
        (holds top ?TOP ?OBJECT) 
        (holds bottom ?BOTTOM ?OBJECT)) 
    (holds distance ?TOP ?BOTTOM ?HEIGHT))
(holds instance MereologicalSumFn SpatialRelation)
(holds instance MereologicalSumFn BinaryFunction)
(holds instance MereologicalSumFn TotalValuedRelation)
(holds domain MereologicalSumFn 1 Object)
(holds domain MereologicalSumFn 2 Object)
(holds range MereologicalSumFn Object)
(holds relatedInternalConcept MereologicalSumFn MereologicalProductFn)
(holds relatedInternalConcept MereologicalSumFn MereologicalDifferenceFn)
(=> 
    (equal ?OBJ3 
        (MereologicalSumFn ?OBJ1 ?OBJ2)) 
    (forall
        (?PART) 
        (<=> 
            (holds part ?PART ?OBJ3) 
            (or 
                (holds part ?PART ?OBJ1) 
                (holds part ?PART ?OBJ2)))))
(holds instance MereologicalProductFn SpatialRelation)
(holds instance MereologicalProductFn BinaryFunction)
(holds instance MereologicalProductFn TotalValuedRelation)
(holds domain MereologicalProductFn 1 Object)
(holds domain MereologicalProductFn 2 Object)
(holds range MereologicalProductFn Object)
(holds relatedInternalConcept MereologicalProductFn MereologicalDifferenceFn)
(=> 
    (equal ?OBJ3 
        (MereologicalProductFn ?OBJ1 ?OBJ2)) 
    (forall
        (?PART) 
        (<=> 
            (holds part ?PART ?OBJ3) 
            (and 
                (holds part ?PART ?OBJ1) 
                (holds part ?PART ?OBJ2)))))
(holds instance MereologicalDifferenceFn SpatialRelation)
(holds instance MereologicalDifferenceFn BinaryFunction)
(holds instance MereologicalDifferenceFn TotalValuedRelation)
(holds domain MereologicalDifferenceFn 1 Object)
(holds domain MereologicalDifferenceFn 2 Object)
(holds range MereologicalDifferenceFn Object)
(=> 
    (equal ?OBJ3 
        (MereologicalDifferenceFn ?OBJ1 ?OBJ2)) 
    (forall
        (?PART) 
        (<=> 
            (holds part ?PART ?OBJ3) 
            (and 
                (holds part ?PART ?OBJ1) 
                (not 
                    (holds part ?PART ?OBJ2))))))
(holds instance hole BinaryPredicate)
(holds instance hole SpatialRelation)
(holds instance hole AsymmetricRelation)
(holds domain hole 1 Hole)
(holds domain hole 2 SelfConnectedObject)
(holds subclass Hole Region)
(<=> 
    (holds instance ?HOLE Hole) 
    (exists
        (?OBJ) 
        (holds hole ?HOLE ?OBJ)))
(=> 
    (holds hole ?HOLE ?OBJ) 
    (not 
        (holds instance ?OBJ Hole)))
(=> 
    (holds hole ?HOLE ?OBJ) 
    (not 
        (holds overlapsSpatially ?HOLE ?OBJ)))
(=> 
    (and 
        (holds hole ?HOLE ?OBJ1) 
        (holds hole ?HOLE ?OBJ2)) 
    (exists
        (?OBJ3) 
        (and 
            (holds properPart ?OBJ3 
                (MereologicalProductFn ?OBJ1 ?OBJ2)) 
            (holds hole ?HOLE ?OBJ3))))
(=> 
    (and 
        (holds hole ?HOLE1 ?OBJ) 
        (holds hole ?HOLE2 ?OBJ)) 
    (forall
        (?HOLE3) 
        (=> 
            (holds part ?HOLE3 
                (MereologicalSumFn ?HOLE1 ?HOLE2)) 
            (holds hole ?HOLE3 ?OBJ))))
(=> 
    (and 
        (holds hole ?HOLE ?OBJ1) 
        (holds part ?OBJ1 ?OBJ2)) 
    (or 
        (holds overlapsSpatially ?HOLE ?OBJ2) 
        (holds hole ?HOLE ?OBJ2)))
(=> 
    (and 
        (holds hole ?HOLE1 ?OBJ1) 
        (holds hole ?HOLE2 ?OBJ2) 
        (holds overlapsSpatially ?HOLE1 ?HOLE2)) 
    (holds overlapsSpatially ?OBJ1 ?OBJ2))
(=> 
    (holds instance ?HOLE1 Hole) 
    (exists
        (?HOLE2) 
        (holds properPart ?HOLE2 ?HOLE1)))
(holds instance PrincipalHostFn SpatialRelation)
(holds instance PrincipalHostFn UnaryFunction)
(holds instance PrincipalHostFn TotalValuedRelation)
(holds instance PrincipalHostFn AsymmetricRelation)
(holds domain PrincipalHostFn 1 Hole)
(holds range PrincipalHostFn Object)
(=> 
    (equal ?OBJ1 
        (PrincipalHostFn ?HOLE)) 
    (forall
        (?OBJ2) 
        (<=> 
            (holds overlapsSpatially ?OBJ2 ?OBJ1) 
            (exists
                (?OBJ3) 
                (and 
                    (holds hole ?HOLE ?OBJ3) 
                    (holds overlapsSpatially ?OBJ2 ?OBJ3))))))
(=> 
    (holds hole ?HOLE ?OBJ) 
    (holds connected ?HOLE ?OBJ))
(=> 
    (and 
        (holds instance ?HOLE1 Hole) 
        (holds properPart ?HOLE2 ?HOLE1)) 
    (exists
        (?OBJ) 
        (and 
            (holds meetsSpatially ?HOLE1 ?OBJ) 
            (not 
                (holds meetsSpatially ?HOLE2 ?OBJ)))))
(holds instance Fillable ShapeAttribute)
(=> 
    (exists
        (?TIME) 
        (holds holdsDuring ?TIME `(holds fills ?OBJ ?HOLE))) 
    (holds attribute ?HOLE Fillable))
(<=> 
    (holds attribute ?HOLE1 Fillable) 
    (exists
        (?HOLE2) 
        (and 
            (holds instance ?HOLE2 Hole) 
            (holds part ?HOLE1 ?HOLE2))))
(holds subrelation partiallyFills located)
(holds instance partiallyFills SpatialRelation)
(holds instance partiallyFills AsymmetricRelation)
(holds domain partiallyFills 1 Object)
(holds domain partiallyFills 2 Hole)
(=> 
    (holds partiallyFills ?OBJ ?HOLE1) 
    (exists
        (?HOLE2) 
        (and 
            (holds part ?HOLE2 ?HOLE1) 
            (holds completelyFills ?OBJ ?HOLE2))))
(holds instance properlyFills AsymmetricRelation)
(holds subrelation properlyFills partiallyFills)
(holds domain properlyFills 1 Object)
(holds domain properlyFills 2 Hole)
(=> 
    (holds properlyFills ?OBJ ?HOLE1) 
    (exists
        (?HOLE2) 
        (and 
            (holds part ?HOLE2 ?HOLE1) 
            (holds fills ?OBJ ?HOLE2))))
(holds instance completelyFills AsymmetricRelation)
(holds subrelation completelyFills partiallyFills)
(=> 
    (holds completelyFills ?OBJ1 ?HOLE) 
    (exists
        (?OBJ2) 
        (and 
            (holds part ?OBJ2 ?OBJ1) 
            (holds fills ?OBJ2 ?HOLE))))
(holds instance fills AsymmetricRelation)
(holds subrelation fills completelyFills)
(holds subrelation fills properlyFills)
(holds domain fills 1 Object)
(holds domain fills 2 Hole)
(holds relatedInternalConcept fills Fillable)
(=> 
    (and 
        (holds fills ?OBJ1 ?HOLE) 
        (holds attribute ?OBJ2 Fillable)) 
    (not 
        (holds overlapsSpatially ?OBJ1 ?OBJ2)))
(=> 
    (holds completelyFills ?OBJ1 ?HOLE) 
    (forall
        (?OBJ2) 
        (=> 
            (holds connected ?OBJ2 ?HOLE) 
            (holds connected ?OBJ2 ?OBJ1))))
(=> 
    (and 
        (holds properlyFills ?OBJ1 ?HOLE) 
        (holds connected ?OBJ2 ?OBJ1)) 
    (holds connected ?HOLE ?OBJ2))
(=> 
    (and 
        (holds fills ?OBJ ?HOLE1) 
        (holds properPart ?HOLE2 ?HOLE1)) 
    (holds completelyFills ?OBJ ?HOLE2))
(=> 
    (and 
        (holds fills ?OBJ1 ?HOLE) 
        (holds properPart ?OBJ2 ?OBJ1)) 
    (holds properlyFills ?OBJ2 ?HOLE))
(holds instance SkinFn SpatialRelation)
(holds instance SkinFn UnaryFunction)
(holds instance SkinFn TotalValuedRelation)
(holds instance SkinFn AsymmetricRelation)
(holds domain SkinFn 1 Hole)
(holds range SkinFn Object)
(=> 
    (equal ?OBJ1 
        (SkinFn ?HOLE)) 
    (forall
        (?OBJ2) 
        (<=> 
            (holds overlapsSpatially ?OBJ2 ?OBJ1) 
            (exists
                (?OBJ3) 
                (and 
                    (holds superficialPart ?OBJ3 
                        (PrincipalHostFn ?HOLE)) 
                    (holds meetsSpatially ?HOLE ?OBJ3) 
                    (holds overlapsSpatially ?OBJ2 ?OBJ3))))))
(holds instance subProcess BinaryPredicate)
(holds instance subProcess PartialOrderingRelation)
(holds domain subProcess 1 Process)
(holds domain subProcess 2 Process)
(=> 
    (holds subProcess ?SUBPROC ?PROC) 
    (or 
        (equal 
            (WhenFn ?SUBPROC) 
            (WhenFn ?PROC)) 
        (holds during 
            (WhenFn ?SUBPROC) 
            (WhenFn ?PROC))))
(=> 
    (holds subProcess ?SUBPROC ?PROC) 
    (forall
        (?REGION) 
        (=> 
            (holds located ?PROC ?REGION) 
            (holds located ?SUBPROC ?REGION))))
(=> 
    (and 
        (holds instance ?PROC Process) 
        (holds subProcess ?SUBPROC ?PROC)) 
    (exists
        (?TIME) 
        (holds time ?SUBPROC ?TIME)))
(holds subclass BiologicalProcess InternalChange)
(=> 
    (holds instance ?PROC BiologicalProcess) 
    (exists
        (?OBJ) 
        (and 
            (holds instance ?OBJ Organism) 
            (holds located ?PROC ?OBJ))))
(=> 
    (and 
        (holds instance ?PROC BiologicalProcess) 
        (holds experiencer ?PROC ?ORG)) 
    (holds instance ?ORG Organism))
(holds subclass PhysiologicProcess BiologicalProcess)
(holds subclass AutonomicProcess PhysiologicProcess)
(holds disjoint AutonomicProcess IntentionalProcess)
(holds subclass OrganismProcess PhysiologicProcess)
(holds subclass Birth OrganismProcess)
(=> 
    (and 
        (holds instance ?BIRTH Birth) 
        (holds experiencer ?BIRTH ?AGENT)) 
    (exists
        (?DEATH) 
        (and 
            (holds instance ?DEATH Death) 
            (holds experiencer ?DEATH ?AGENT))))
(holds subclass Death OrganismProcess)
(=> 
    (and 
        (holds instance ?DEATH Death) 
        (holds experiencer ?DEATH ?AGENT)) 
    (holds holdsDuring 
        (FutureFn 
            (WhenFn ?DEATH)) `(holds attribute ?AGENT Dead)))
(=> 
    (and 
        (holds instance ?DEATH Death) 
        (holds instance ?BIRTH Birth) 
        (holds experiencer ?DEATH ?AGENT) 
        (holds experiencer ?BIRTH ?AGENT)) 
    (exists
        (?TIME) 
        (and 
            (holds meetsTemporally 
                (WhenFn ?BIRTH) ?TIME) 
            (holds meetsTemporally ?TIME 
                (WhenFn ?DEATH)) 
            (holds holdsDuring ?TIME `(holds attribute ?AGENT Living)))))
(holds subclass Breathing OrganismProcess)
(holds subclass Ingesting OrganismProcess)
(=> 
    (and 
        (holds instance ?ACT Ingesting) 
        (holds patient ?ACT ?FOOD)) 
    (holds instance ?FOOD Food))
(holds subclass Eating Ingesting)
(=> 
    (and 
        (holds instance ?ACT Eating) 
        (holds patient ?ACT ?FOOD)) 
    (holds attribute ?FOOD Solid))
(holds subclass Drinking Ingesting)
(holds subclass Digesting OrganismProcess)
(=> 
    (and 
        (holds instance ?DIGEST Digesting) 
        (holds agent ?DIGEST ?ORGANISM)) 
    (exists
        (?INGEST) 
        (and 
            (holds instance ?INGEST Ingesting) 
            (holds agent ?INGEST ?ORGANISM) 
            (holds overlapsTemporally 
                (WhenFn ?INGEST) 
                (WhenFn ?DIGEST)))))
(=> 
    (holds instance ?DIGEST Digesting) 
    (exists
        (?DECOMP) 
        (and 
            (holds instance ?DECOMP ChemicalDecomposition) 
            (holds subProcess ?DECOMP ?DIGEST))))
(holds subclass Growth OrganismProcess)
(holds subclass Replication OrganismProcess)
(=> 
    (and 
        (holds instance ?REP Replication) 
        (holds agent ?REP ?PARENT) 
        (holds result ?REP ?CHILD)) 
    (holds parent ?CHILD ?PARENT))
(=> 
    (holds instance ?REP Replication) 
    (exists
        (?BODY) 
        (and 
            (holds instance ?BODY ReproductiveBody) 
            (holds result ?REP ?BODY))))
(holds subclass SexualReproduction Replication)
(holds disjoint SexualReproduction AsexualReproduction)
(=> 
    (and 
        (holds instance ?REP SexualReproduction) 
        (holds result ?REP ?ORGANISM)) 
    (exists
        (?MOTHER ?FATHER) 
        (and 
            (holds mother ?ORGANISM ?MOTHER) 
            (holds father ?ORGANISM ?FATHER))))
(holds subclass AsexualReproduction Replication)
(=> 
    (and 
        (holds instance ?REP AsexualReproduction) 
        (holds result ?REP ?ORGANISM)) 
    (not 
        (exists
            (?PARENT1 ?PARENT2) 
            (and 
                (holds parent ?ORGANISM ?PARENT1) 
                (holds parent ?ORGANISM ?PARENT2) 
                (not 
                    (equal ?PARENT1 ?PARENT2))))))
(holds subclass PsychologicalProcess BiologicalProcess)
(=> 
    (holds instance ?PROCESS PsychologicalProcess) 
    (exists
        (?ANIMAL) 
        (and 
            (holds instance ?ANIMAL Animal) 
            (holds experiencer ?PROCESS ?ANIMAL))))
(holds subclass OrganOrTissueProcess PhysiologicProcess)
(holds disjoint OrganOrTissueProcess OrganismProcess)
(=> 
    (holds instance ?PROC OrganOrTissueProcess) 
    (exists
        (?THING) 
        (and 
            (holds located ?PROC ?THING) 
            (or 
                (holds instance ?THING Organ) 
                (holds instance ?THING Tissue)))))
(holds subclass PathologicProcess BiologicalProcess)
(holds disjoint PathologicProcess PhysiologicProcess)
(=> 
    (and 
        (holds instance ?PATH PathologicProcess) 
        (holds experiencer ?PATH ?ORG)) 
    (exists
        (?PART ?DISEASE) 
        (and 
            (holds part ?PART ?ORG) 
            (holds instance ?DISEASE DiseaseOrSyndrome) 
            (holds attribute ?PART ?DISEASE))))
(holds subclass Injuring PathologicProcess)
(holds subclass Injuring Damaging)
(=> 
    (holds instance ?INJ Injuring) 
    (exists
        (?STRUCT) 
        (and 
            (holds instance ?STRUCT AnatomicalStructure) 
            (holds patient ?INJ ?STRUCT))))
(<=> 
    (holds instance ?INJ Injuring) 
    (and 
        (holds instance ?INJ Damaging) 
        (exists
            (?ORGANISM) 
            (and 
                (holds instance ?ORGANISM Organism) 
                (holds patient ?INJ ?ORGANISM)))))
(holds subclass Poisoning Injuring)
(=> 
    (holds instance ?POISON Poisoning) 
    (exists
        (?THING) 
        (and 
            (holds patient ?POISON ?THING) 
            (or 
                (holds instance ?THING Organism) 
                (holds instance ?THING AnatomicalStructure)))))
(=> 
    (holds instance ?POISON Poisoning) 
    (exists
        (?SUBSTANCE) 
        (and 
            (holds instance ?SUBSTANCE BiologicallyActiveSubstance) 
            (holds instrument ?POISON ?SUBSTANCE))))
(holds subclass IntentionalProcess Process)
(=> 
    (and 
        (holds instance ?PROC IntentionalProcess) 
        (holds agent ?PROC ?AGENT)) 
    (exists
        (?PURP) 
        (holds hasPurposeForAgent ?PROC ?PURP ?AGENT)))
(=> 
    (holds instance ?PROC IntentionalProcess) 
    (exists
        (?AGENT) 
        (and 
            (holds instance ?AGENT CognitiveAgent) 
            (holds agent ?PROC ?AGENT))))
(=> 
    (and 
        (holds instance ?PROC IntentionalProcess) 
        (holds agent ?PROC ?HUMAN) 
        (holds instance ?HUMAN Animal)) 
    (holds holdsDuring 
        (WhenFn ?PROC) `(holds attribute ?HUMAN Awake)))
(holds subclass IntentionalPsychologicalProcess IntentionalProcess)
(holds subclass IntentionalPsychologicalProcess PsychologicalProcess)
(holds subclass RecreationOrExercise IntentionalProcess)
(holds subclass OrganizationalProcess IntentionalProcess)
(=> 
    (and 
        (holds instance ?ACT OrganizationalProcess) 
        (holds agent ?ACT ?AGENT)) 
    (or 
        (holds instance ?AGENT Organization) 
        (exists
            (?ORG) 
            (and 
                (holds instance ?ORG Organization) 
                (holds member ?AGENT ?ORG)))))
(holds subclass Election OrganizationalProcess)
(holds subclass ReligiousProcess OrganizationalProcess)
(=> 
    (and 
        (holds instance ?ACT ReligiousProcess) 
        (holds agent ?ACT ?AGENT)) 
    (or 
        (holds instance ?AGENT ReligiousOrganization) 
        (exists
            (?ORG) 
            (and 
                (holds member ?AGENT ?ORG) 
                (holds instance ?ORG ReligiousOrganization)))))
(holds subclass JoiningAnOrganization OrganizationalProcess)
(=> 
    (and 
        (holds instance ?JOIN JoiningAnOrganization) 
        (holds instance ?ORG Organization) 
        (holds agent ?JOIN ?PERSON) 
        (holds patient ?JOIN ?ORG)) 
    (and 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?JOIN)) `(not 
                (holds member ?PERSON ?ORG))) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?JOIN)) `(holds member ?PERSON ?ORG))))
(holds subclass LeavingAnOrganization OrganizationalProcess)
(holds disjoint LeavingAnOrganization JoiningAnOrganization)
(=> 
    (and 
        (holds instance ?LEAVE LeavingAnOrganization) 
        (holds instance ?ORG Organization) 
        (holds agent ?LEAVE ?PERSON) 
        (holds patient ?LEAVE ?ORG)) 
    (and 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?LEAVE)) `(holds member ?PERSON ?ORG)) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?LEAVE)) `(not 
                (holds member ?PERSON ?ORG)))))
(holds subclass Graduation LeavingAnOrganization)
(=> 
    (and 
        (holds instance ?GRAD Graduation) 
        (holds agent ?GRAD ?ORG) 
        (holds patient ?GRAD ?PERSON)) 
    (holds instance ?ORG EducationalOrganization))
(holds subclass Matriculation JoiningAnOrganization)
(=> 
    (and 
        (holds instance ?MAT Matriculation) 
        (holds agent ?MAT ?ORG) 
        (holds patient ?MAT ?PERSON)) 
    (holds instance ?ORG EducationalOrganization))
(holds subclass Hiring JoiningAnOrganization)
(=> 
    (and 
        (holds instance ?HIRE Hiring) 
        (holds instance ?ORG Organization) 
        (holds agent ?HIRE ?ORG) 
        (holds patient ?HIRE ?PERSON)) 
    (and 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?HIRE)) `(not 
                (holds employs ?ORG ?PERSON))) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?HIRE)) `(holds employs ?ORG ?PERSON))))
(holds subclass TerminatingEmployment LeavingAnOrganization)
(=> 
    (and 
        (holds instance ?FIRE TerminatingEmployment) 
        (holds instance ?ORG Organization) 
        (holds agent ?FIRE ?ORG) 
        (holds patient ?FIRE ?PERSON)) 
    (and 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?FIRE)) `(holds employs ?ORG ?PERSON)) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?FIRE)) `(not 
                (holds employs ?ORG ?PERSON)))))
(holds subclass PoliticalProcess OrganizationalProcess)
(=> 
    (holds instance ?PROC PoliticalProcess) 
    (exists
        (?POL) 
        (and 
            (or 
                (holds instance ?POL Government) 
                (exists
                    (?GOV) 
                    (and 
                        (holds instance ?GOV Government) 
                        (holds member ?POL ?GOV)))) 
            (or 
                (holds agent ?PROC ?POL) 
                (holds patient ?PROC ?POL)))))
(holds subclass JudicialProcess PoliticalProcess)
(=> 
    (and 
        (holds instance ?PROCESS JudicialProcess) 
        (holds agent ?PROCESS ?ORG) 
        (holds instance ?ORG Organization)) 
    (holds instance ?ORG JudicialOrganization))
(holds subclass MilitaryProcess PoliticalProcess)
(holds subclass RegulatoryProcess Guiding)
(holds subclass Managing OrganizationalProcess)
(holds subclass Managing Guiding)
(holds subclass Planning IntentionalPsychologicalProcess)
(holds subclass Designing IntentionalPsychologicalProcess)
(holds subclass Interpreting IntentionalPsychologicalProcess)
(=> 
    (and 
        (holds instance ?INTERPRET Interpreting) 
        (holds agent ?INTERPRET ?AGENT) 
        (holds patient ?INTERPRET ?CONTENT) 
        (holds instance ?CONTENT ContentBearingObject)) 
    (exists
        (?PROP) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?INTERPRET)) `(holds believes ?AGENT `(holds containsInformation ?CONTENT ?PROP)))))
(holds subclass QuantityChange InternalChange)
(holds partition QuantityChange Increasing Decreasing)
(holds subclass Increasing QuantityChange)
(holds relatedInternalConcept Increasing Putting)
(=> 
    (and 
        (holds instance ?INCREASE Increasing) 
        (holds patient ?INCREASE ?OBJ)) 
    (exists
        (?UNIT ?QUANT1 ?QUANT2) 
        (and 
            (holds holdsDuring 
                (BeginFn 
                    (WhenFn ?INCREASE)) `(equal 
                    (MeasureFn ?OBJ ?UNIT) ?QUANT1)) 
            (holds holdsDuring 
                (EndFn 
                    (WhenFn ?INCREASE)) `(equal 
                    (MeasureFn ?OBJ ?UNIT) ?QUANT2)) 
            (> ?QUANT2 ?QUANT1))))
(holds subclass Heating Increasing)
(holds disjoint Heating Cooling)
(=> 
    (and 
        (holds instance ?HEAT Heating) 
        (holds patient ?HEAT ?OBJ)) 
    (exists
        (?UNIT ?QUANT1 ?QUANT2) 
        (and 
            (holds instance ?UNIT TemperatureMeasure) 
            (holds holdsDuring 
                (BeginFn 
                    (WhenFn ?HEAT)) `(equal 
                    (MeasureFn ?OBJ ?UNIT) ?QUANT1)) 
            (holds holdsDuring 
                (EndFn 
                    (WhenFn ?HEAT)) `(equal 
                    (MeasureFn ?OBJ ?UNIT) ?QUANT2)) 
            (> ?QUANT2 ?QUANT1))))
(holds subclass Decreasing QuantityChange)
(holds relatedInternalConcept Decreasing Removing)
(=> 
    (and 
        (holds instance ?DECREASE Decreasing) 
        (holds patient ?DECREASE ?OBJ)) 
    (exists
        (?UNIT ?QUANT1 ?QUANT2) 
        (and 
            (holds holdsDuring 
                (BeginFn 
                    (WhenFn ?DECREASE)) `(equal 
                    (MeasureFn ?OBJ ?UNIT) ?QUANT1)) 
            (holds holdsDuring 
                (EndFn 
                    (WhenFn ?DECREASE)) `(equal 
                    (MeasureFn ?OBJ ?UNIT) ?QUANT2)) 
            (< ?QUANT2 ?QUANT1))))
(holds subclass Cooling Decreasing)
(=> 
    (and 
        (holds instance ?COOL Cooling) 
        (holds patient ?COOL ?OBJ)) 
    (exists
        (?UNIT ?QUANT1 ?QUANT2) 
        (and 
            (holds instance ?UNIT TemperatureMeasure) 
            (holds holdsDuring 
                (BeginFn 
                    (WhenFn ?COOL)) `(equal 
                    (MeasureFn ?OBJ ?UNIT) ?QUANT1)) 
            (holds holdsDuring 
                (EndFn 
                    (WhenFn ?COOL)) `(equal 
                    (MeasureFn ?OBJ ?UNIT) ?QUANT2)) 
            (< ?QUANT2 ?QUANT1))))
(holds subclass Motion Process)
(=> 
    (and 
        (holds instance ?MOTION Motion) 
        (holds patient ?MOTION ?OBJ) 
        (holds origin ?MOTION ?PLACE)) 
    (holds holdsDuring 
        (BeginFn 
            (WhenFn ?MOTION)) `(holds located ?OBJ ?PLACE)))
(=> 
    (and 
        (holds instance ?MOTION Motion) 
        (holds patient ?MOTION ?OBJ) 
        (holds destination ?MOTION ?PLACE)) 
    (holds holdsDuring 
        (EndFn 
            (WhenFn ?MOTION)) `(holds located ?OBJ ?PLACE)))
(holds instance path CaseRole)
(holds domain path 1 Motion)
(holds domain path 2 Object)
(=> 
    (and 
        (holds path ?PROCESS ?PATH1) 
        (holds origin ?PROCESS ?SOURCE) 
        (holds destination ?PROCESS ?DEST) 
        (holds length ?PATH1 ?MEASURE1) 
        (holds distance ?SOURCE ?DEST ?DISTANCE) 
        (not 
            (> ?MEASURE1 ?DISTANCE))) 
    (forall
        (?OBJ) 
        (=> 
            (holds part ?OBJ ?PATH1) 
            (holds between ?SOURCE ?OBJ ?DEST))))
(holds subclass BodyMotion Motion)
(=> 
    (holds instance ?MOTION BodyMotion) 
    (exists
        (?OBJ ?AGENT) 
        (and 
            (holds instance ?OBJ BodyPart) 
            (holds patient ?MOTION ?OBJ) 
            (holds instance ?AGENT Organism) 
            (holds agent ?MOTION ?AGENT))))
(holds subclass Vocalizing RadiatingSound)
(holds subclass Vocalizing BodyMotion)
(=> 
    (holds instance ?VOCAL Vocalizing) 
    (exists
        (?HUMAN) 
        (and 
            (holds instance ?HUMAN Human) 
            (holds agent ?VOCAL ?HUMAN) 
            (holds instrument ?VOCAL ?HUMAN))))
(holds subclass Speaking LinguisticCommunication)
(holds subclass Speaking Vocalizing)
(holds subclass Singing Speaking)
(holds subclass Singing Music)
(holds subclass Ambulating BodyMotion)
(holds subclass Ambulating Translocation)
(holds partition Ambulating Walking Running)
(holds subclass Walking Ambulating)
(holds subclass Running Ambulating)
(=> 
    (and 
        (holds instance ?WALK Walking) 
        (holds instance ?RUN Running) 
        (holds agent ?WALK ?AGENT) 
        (holds agent ?RUN ?AGENT) 
        (holds holdsDuring 
            (WhenFn ?WALK) `(holds measure ?AGENT 
                (SpeedFn ?LENGTH1 ?TIME))) 
        (holds holdsDuring 
            (WhenFn ?RUN) `(holds measure ?AGENT 
                (SpeedFn ?LENGTH2 ?TIME)))) 
    (> ?LENGTH2 ?LENGTH1))
(holds subclass Swimming BodyMotion)
(=> 
    (and 
        (holds instance ?SWIM Swimming) 
        (holds agent ?SWIM ?AGENT)) 
    (exists
        (?AREA) 
        (and 
            (holds instance ?AREA WaterArea) 
            (holds located ?AGENT ?AREA))))
(holds subclass Dancing BodyMotion)
(holds subclass GeologicalProcess Motion)
(holds disjoint GeologicalProcess IntentionalProcess)
(holds subclass LiquidMotion Motion)
(holds subclass GasMotion Motion)
(holds subclass Wind GasMotion)
(holds subclass DirectionChange Motion)
(=> 
    (holds instance ?PROC DirectionChange) 
    (exists
        (?ATTR) 
        (and 
            (holds instance ?ATTR DirectionalAttribute) 
            (or 
                (and 
                    (holds holdsDuring 
                        (BeginFn 
                            (WhenFn ?PROC)) `(holds manner ?PROC ?ATTR)) 
                    (holds holdsDuring 
                        (EndFn 
                            (WhenFn ?PROC)) `(not 
                            (holds manner ?PROC ?ATTR)))) 
                (and 
                    (holds holdsDuring 
                        (EndFn 
                            (WhenFn ?PROC)) `(holds manner ?PROC ?ATTR)) 
                    (holds holdsDuring 
                        (BeginFn 
                            (WhenFn ?PROC)) `(not 
                            (holds manner ?PROC ?ATTR))))))))
(holds subclass Transfer Translocation)
(=> 
    (and 
        (holds instance ?TRANSFER Transfer) 
        (holds agent ?TRANSFER ?AGENT) 
        (holds patient ?TRANSFER ?PATIENT)) 
    (not 
        (equal ?AGENT ?PATIENT)))
(holds subclass Carrying Transfer)
(=> 
    (holds instance ?CARRY Carrying) 
    (exists
        (?ANIMAL) 
        (and 
            (holds instance ?ANIMAL Animal) 
            (holds instrument ?TRANS ?ANIMAL))))
(holds subclass Removing Transfer)
(=> 
    (and 
        (holds instance ?REMOVE Removing) 
        (holds origin ?REMOVE ?PLACE) 
        (holds patient ?REMOVE ?OBJ)) 
    (and 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?REMOVE)) `(holds located ?OBJ ?PLACE)) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?REMOVE)) `(not 
                (holds located ?OBJ ?PLACE)))))
(holds subclass Uncovering Removing)
(holds disjoint Uncovering Covering)
(holds subclass Putting Transfer)
(=> 
    (and 
        (holds instance ?PUT Putting) 
        (holds destination ?PUT ?PLACE) 
        (holds patient ?PUT ?OBJ)) 
    (and 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?PUT)) `(not 
                (holds located ?OBJ ?PLACE))) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?PUT)) `(holds located ?OBJ ?PLACE))))
(holds subclass Covering Putting)
(holds subclass Dressing Covering)
(=> 
    (and 
        (holds instance ?DRESS Dressing) 
        (holds agent ?DRESS ?AGENT) 
        (holds patient ?DRESS ?CLOTHING)) 
    (and 
        (holds instance ?CLOTHING Clothing) 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?DRESS)) `(not 
                (holds wears ?AGENT ?CLOTHING))) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?DRESS)) `(holds wears ?AGENT ?CLOTHING))))
(holds subclass Inserting Putting)
(=> 
    (and 
        (holds instance ?INSERT Inserting) 
        (holds patient ?INSERT ?OBJ1) 
        (holds destination ?INSERT ?OBJ2)) 
    (and 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?INSERT)) `(not 
                (holds contains ?OBJ2 ?OBJ1))) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?INSERT)) `(holds contains ?OBJ2 ?OBJ1))))
(holds subclass Injecting Inserting)
(=> 
    (holds instance ?INJECT Injecting) 
    (exists
        (?SUBSTANCE ?ANIMAL) 
        (and 
            (holds patient ?INJECT ?SUBSTANCE) 
            (holds instance ?SUBSTANCE BiologicallyActiveSubstance) 
            (holds attribute ?SUBSTANCE Liquid) 
            (holds destination ?INJECT ?ANIMAL) 
            (holds instance ?ANIMAL Animal))))
(holds subclass Substituting Transfer)
(holds subclass Substituting DualObjectProcess)
(=> 
    (holds instance ?SUB Substituting) 
    (exists
        (?PUT ?REMOVE ?OBJ1 ?OBJ2 ?PLACE) 
        (and 
            (holds instance ?PUT Putting) 
            (holds instance ?REMOVE Removing) 
            (holds subProcess ?PUT ?SUB) 
            (holds subProcess ?REMOVE ?SUB) 
            (holds patient ?REMOVE ?OBJ1) 
            (holds origin ?REMOVE ?PLACE) 
            (holds patient ?PUT ?OBJ2) 
            (holds destination ?PUT ?PLACE) 
            (not 
                (equal ?OBJ1 ?OBJ2)))))
(holds subclass Impelling Transfer)
(holds subclass Shooting Impelling)
(holds subclass Touching Transfer)
(=> 
    (and 
        (holds instance ?TOUCH Touching) 
        (holds agent ?TOUCH ?OBJ1) 
        (holds patient ?TOUCH ?OBJ2)) 
    (and 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?TOUCH)) `(not 
                (holds connected ?OBJ1 ?OBJ2))) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?TOUCH)) `(holds connected ?OBJ1 ?OBJ2))))
(holds subrelation grasps meetsSpatially)
(holds domain grasps 1 Animal)
(holds domain grasps 2 Object)
(holds subclass Grabbing Touching)
(=> 
    (and 
        (holds instance ?GRAB Grabbing) 
        (holds agent ?GRAB ?AGENT) 
        (holds patient ?GRAB ?THING)) 
    (and 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?GRAB)) `(not 
                (holds grasps ?AGENT ?THING))) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?GRAB)) `(holds grasps ?AGENT ?THING))))
(holds subclass Releasing Transfer)
(=> 
    (and 
        (holds instance ?RELEASE Releasing) 
        (holds agent ?GRAB ?AGENT) 
        (holds patient ?GRAB ?THING)) 
    (and 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?RELEASE)) `(holds grasps ?AGENT ?THING)) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?RELEASE)) `(not 
                (holds grasps ?AGENT ?THING)))))
(holds subclass Impacting Touching)
(=> 
    (and 
        (holds instance ?IMPACT Impacting) 
        (holds patient ?IMPACT ?OBJ)) 
    (exists
        (?IMPEL) 
        (and 
            (holds instance ?IMPEL Impelling) 
            (holds patient ?IMPEL ?OBJ) 
            (holds earlier 
                (WhenFn ?IMPEL) 
                (WhenFn ?IMPACT)))))
(holds subclass Translocation Motion)
(=> 
    (and 
        (holds instance ?MOVEMENT Translocation) 
        (holds origin ?MOVEMENT ?PLACE1)) 
    (exists
        (?PLACE2 ?STAGE) 
        (and 
            (holds instance ?PLACE2 Region) 
            (not 
                (equal ?PLACE1 ?PLACE2)) 
            (holds subProcess ?STAGE ?MOVEMENT) 
            (holds located ?STAGE ?PLACE2))))
(holds subclass Transportation Translocation)
(holds relatedInternalConcept Transportation TransportationDevice)
(=> 
    (holds instance ?TRANS Transportation) 
    (exists
        (?DEVICE) 
        (and 
            (holds instance ?DEVICE TransportationDevice) 
            (holds instrument ?TRANS ?DEVICE))))
(holds subclass Guiding IntentionalProcess)
(holds subclass Steering Guiding)
(=> 
    (holds instance ?STEER Steering) 
    (exists
        (?VEHICLE) 
        (and 
            (holds instance ?VEHICLE TransportationDevice) 
            (holds patient ?STEER ?VEHICLE))))
(holds subclass EducationalProcess Guiding)
(=> 
    (and 
        (holds instance ?EDUCATION EducationalProcess) 
        (holds patient ?EDUCATION ?PERSON)) 
    (holds hasPurpose ?EDUCATION `(exists
            (?LEARN) 
            (and 
                (holds instance ?LEARN Learning) 
                (holds patient ?LEARN ?PERSON)))))
(holds subclass ChangeOfPossession SocialInteraction)
(holds relatedInternalConcept ChangeOfPossession possesses)
(=> 
    (and 
        (holds instance ?CHANGE ChangeOfPossession) 
        (holds patient ?CHANGE ?OBJ) 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?CHANGE)) `(holds possesses ?AGENT1 ?OBJ)) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?CHANGE)) `(holds possesses ?AGENT2 ?OBJ))) 
    (not 
        (equal ?AGENT1 ?AGENT2)))
(=> 
    (and 
        (holds instance ?CHANGE ChangeOfPossession) 
        (holds origin ?CHANGE ?AGENT1) 
        (holds destination ?CHANGE ?AGENT2) 
        (holds instance ?AGENT1 Agent) 
        (holds instance ?AGENT2 Agent) 
        (holds patient ?CHANGE ?OBJ)) 
    (and 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?CHANGE)) `(holds possesses ?AGENT1 ?OBJ)) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?CHANGE)) `(holds possesses ?AGENT2 ?OBJ))))
(holds subclass Giving ChangeOfPossession)
(=> 
    (and 
        (holds instance ?GIVE Giving) 
        (holds agent ?GIVE ?AGENT1) 
        (holds destination ?GIVE ?AGENT2) 
        (holds instance ?AGENT2 Agent) 
        (holds patient ?GIVE ?OBJ)) 
    (exists
        (?GET) 
        (and 
            (holds instance ?GET Getting) 
            (holds agent ?GET ?AGENT2) 
            (holds origin ?GET ?AGENT1) 
            (holds patient ?GET ?OBJ))))
(=> 
    (and 
        (holds instance ?GIVE Giving) 
        (holds agent ?GIVE ?AGENT)) 
    (holds origin ?GIVE ?AGENT))
(holds subclass Funding Giving)
(=> 
    (holds instance ?FUND Funding) 
    (exists
        (?MONEY) 
        (and 
            (holds instance ?MONEY Currency) 
            (holds patient ?FUND ?MONEY))))
(holds subclass UnilateralGiving Giving)
(=> 
    (holds instance ?GIVE UnilateralGiving) 
    (not 
        (exists
            (?TRANS) 
            (and 
                (holds instance ?TRANS Transaction) 
                (holds subProcess ?GIVE ?TRANS)))))
(holds subclass Lending Giving)
(<=> 
    (exists
        (?BORROW) 
        (and 
            (holds instance ?BORROW Borrowing) 
            (holds agent ?BORROW ?AGENT1) 
            (holds origin ?BORROW ?AGENT2) 
            (holds patient ?BORROW ?OBJECT))) 
    (exists
        (?LEND) 
        (and 
            (holds instance ?LEND Lending) 
            (holds agent ?LEND ?AGENT2) 
            (holds destination ?LEND ?AGENT1) 
            (holds patient ?LEND ?OBJECT))))
(holds subclass GivingBack Giving)
(=> 
    (and 
        (holds instance ?RETURN GivingBack) 
        (holds agent ?RETURN ?AGENT) 
        (holds destination ?RETURN ?DEST)) 
    (exists
        (?GIVE) 
        (and 
            (holds instance ?GIVE Giving) 
            (holds agent ?GIVE ?DEST) 
            (holds destination ?GIVE ?AGENT) 
            (holds earlier 
                (WhenFn ?GIVE) 
                (WhenFn ?RETURN)))))
(holds subclass Getting ChangeOfPossession)
(=> 
    (and 
        (holds instance ?GET Getting) 
        (holds agent ?GET ?AGENT)) 
    (holds destination ?GET ?AGENT))
(holds subclass UnilateralGetting Getting)
(holds relatedInternalConcept UnilateralGetting UnilateralGiving)
(=> 
    (holds instance ?GET UnilateralGetting) 
    (not 
        (exists
            (?TRANS) 
            (and 
                (holds instance ?TRANS Transaction) 
                (holds subProcess ?GET ?TRANS)))))
(holds subclass Borrowing Getting)
(holds subclass Transaction ChangeOfPossession)
(holds subclass Transaction DualObjectProcess)
(=> 
    (holds instance ?TRANS Transaction) 
    (exists
        (?AGENT1 ?AGENT2 ?GIVE1 ?GIVE2 ?OBJ1 ?OBJ2) 
        (and 
            (holds instance ?GIVE1 Giving) 
            (holds instance ?GIVE2 Giving) 
            (holds subProcess ?GIVE1 ?TRANS) 
            (holds subProcess ?GIVE2 ?TRANS) 
            (holds agent ?GIVE1 ?AGENT1) 
            (holds agent ?GIVE2 ?AGENT2) 
            (holds patient ?GIVE1 ?OBJ1) 
            (holds patient ?GIVE2 ?OBJ2) 
            (holds destination ?GIVE1 ?AGENT2) 
            (holds destination ?GIVE2 ?AGENT1) 
            (not 
                (equal ?AGENT1 ?AGENT2)) 
            (not 
                (equal ?OBJ1 ?OBJ2)))))
(holds subclass FinancialTransaction Transaction)
(=> 
    (holds instance ?TRANS FinancialTransaction) 
    (exists
        (?OBJ) 
        (and 
            (holds patient ?TRANS ?OBJ) 
            (holds instance ?OBJ CurrencyMeasure))))
(holds instance transactionAmount BinaryPredicate)
(holds instance transactionAmount SingleValuedRelation)
(holds instance transactionAmount TotalValuedRelation)
(holds domain transactionAmount 1 FinancialTransaction)
(holds domain transactionAmount 2 CurrencyMeasure)
(=> 
    (holds transactionAmount ?TRANS ?AMOUNT) 
    (exists
        (?OBJ) 
        (and 
            (holds patient ?TRANS ?OBJ) 
            (holds monetaryValue ?OBJ ?AMOUNT))))
(holds subclass CommercialService FinancialTransaction)
(=> 
    (holds instance ?BUSINESS CommercialService) 
    (exists
        (?AGENT) 
        (and 
            (holds instance ?AGENT CommercialAgent) 
            (holds agent ?BUSINESS ?AGENT))))
(holds subclass Betting FinancialTransaction)
(holds subclass Buying FinancialTransaction)
(holds relatedInternalConcept Buying Selling)
(=> 
    (and 
        (holds instance ?BUY Buying) 
        (holds agent ?BUY ?AGENT)) 
    (holds destination ?BUY ?AGENT))
(holds subclass Selling FinancialTransaction)
(<=> 
    (exists
        (?BUY) 
        (and 
            (holds instance ?BUY Buying) 
            (holds agent ?BUY ?AGENT1) 
            (holds origin ?BUY ?AGENT2) 
            (holds patient ?BUY ?OBJECT))) 
    (exists
        (?SELL) 
        (and 
            (holds instance ?SELL Selling) 
            (holds agent ?SELL ?AGENT2) 
            (holds destination ?SELL ?AGENT1) 
            (holds patient ?SELL ?OBJECT))))
(=> 
    (and 
        (holds instance ?SELL Selling) 
        (holds agent ?SELL ?AGENT)) 
    (holds origin ?SELL ?AGENT))
(holds subclass Learning IntentionalPsychologicalProcess)
(=> 
    (and 
        (holds instance ?LEARN Learning) 
        (holds agent ?LEARN ?AGENT)) 
    (holds instance ?AGENT CognitiveAgent))
(=> 
    (and 
        (holds instance ?LEARN Learning) 
        (holds agent ?LEARN ?AGENT) 
        (holds patient ?LEARN ?PROP)) 
    (and 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?LEARN)) `(not 
                (holds knows ?AGENT ?PROP))) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?LEARN)) `(holds knows ?AGENT ?PROP))))
(holds subclass Discovering IntentionalPsychologicalProcess)
(=> 
    (and 
        (holds instance ?DISCOVER Discovering) 
        (holds patient ?DISCOVER ?OBJ)) 
    (exists
        (?PURSUE) 
        (and 
            (holds instance ?PURSUE Pursuing) 
            (holds meetsTemporally 
                (WhenFn ?PURSUE) 
                (WhenFn ?DISCOVER)))))
(=> 
    (and 
        (holds instance ?DISCOVER Discovering) 
        (holds patient ?DISCOVER ?OBJ) 
        (holds holdsDuring 
            (WhenFn ?DISCOVER) `(holds located ?OBJ ?PLACE))) 
    (exists
        (?LEARN) 
        (and 
            (holds instance ?LEARN Learning) 
            (holds subProcess ?LEARN ?DISCOVER) 
            (holds patient ?LEARN `(holds located ?OBJ ?PLACE)))))
(holds subclass Classifying IntentionalPsychologicalProcess)
(holds subclass Reasoning IntentionalPsychologicalProcess)
(=> 
    (holds instance ?AGENT CognitiveAgent) 
    (holds capability Reasoning agent ?AGENT))
(holds subclass Selecting IntentionalPsychologicalProcess)
(holds subclass Deciding Selecting)
(=> 
    (and 
        (holds instance ?DECIDE Deciding) 
        (holds agent ?DECIDE ?AGENT) 
        (holds patient ?DECIDE ?PROCESS)) 
    (and 
        (holds instance ?PROCESS IntentionalProcess) 
        (holds agent ?PROCESS ?AGENT)))
(holds subclass LegalDecision Deciding)
(holds subclass LegalDecision Declaring)
(=> 
    (holds instance ?DECISION LegalDecision) 
    (exists
        (?ACTION) 
        (and 
            (holds instance ?ACTION LegalAction) 
            (holds refers ?DECISION ?ACTION))))
(=> 
    (holds instance ?DECISION LegalDecision) 
    (exists
        (?PROCESS) 
        (and 
            (holds instance ?PROCESS JudicialProcess) 
            (holds subProcess ?DECISION ?PROCESS))))
(holds subclass Voting Selecting)
(=> 
    (holds instance ?VOTE Voting) 
    (exists
        (?ELECT) 
        (and 
            (holds instance ?ELECT Election) 
            (holds subProcess ?VOTE ?ELECT))))
(holds subclass Comparing IntentionalPsychologicalProcess)
(holds subclass Comparing DualObjectProcess)
(holds subclass Calculating IntentionalPsychologicalProcess)
(holds subclass Measuring Calculating)
(=> 
    (and 
        (holds instance ?MEAS Measuring) 
        (holds agent ?MEAS ?AGENT) 
        (holds patient ?MEAS ?OBJ)) 
    (exists
        (?QUANT ?UNIT) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?MEAS)) `(holds knows ?AGENT `(holds measure ?OBJ 
                    (MeasureFn ?QUANT ?UNIT))))))
(holds subclass Counting Calculating)
(=> 
    (and 
        (holds instance ?COUNT Counting) 
        (holds agent ?COUNT ?AGENT) 
        (holds patient ?COUNT ?ENTITY)) 
    (exists
        (?NUMBER) 
        (holds knows ?AGENT `(equal 
                (CardinalityFn ?ENTITY) ?NUMBER))))
(holds subclass Predicting IntentionalPsychologicalProcess)
(=> 
    (and 
        (holds instance ?PREDICT Predicting) 
        (holds patient ?PREDICT ?FORMULA)) 
    (exists
        (?TIME) 
        (and 
            (holds holdsDuring ?TIME ?FORMULA) 
            (or 
                (holds before ?TIME 
                    (WhenFn ?PREDICT)) 
                (holds earlier ?TIME 
                    (WhenFn ?PREDICT))))))
(holds subclass Remembering PsychologicalProcess)
(=> 
    (and 
        (holds instance ?REMEMBER Remembering) 
        (holds patient ?REMEMBER ?FORMULA)) 
    (exists
        (?TIME) 
        (and 
            (holds holdsDuring ?TIME ?FORMULA) 
            (or 
                (holds before ?TIME 
                    (WhenFn ?REMEMBER)) 
                (holds earlier ?TIME 
                    (WhenFn ?REMEMBER))))))
(holds subclass Keeping IntentionalProcess)
(=> 
    (and 
        (holds instance ?KEEP Keeping) 
        (holds agent ?KEEP ?AGENT) 
        (holds patient ?KEEP ?OBJ)) 
    (exists
        (?PUT) 
        (and 
            (holds instance ?PUT Putting) 
            (holds agent ?PUT ?AGENT) 
            (holds patient ?PUT ?OBJ) 
            (holds earlier 
                (WhenFn ?PUT) 
                (WhenFn ?KEEP)))))
(=> 
    (and 
        (holds instance ?KEEP Keeping) 
        (holds patient ?KEEP ?OBJ)) 
    (exists
        (?PLACE) 
        (forall
            (?TIME) 
            (=> 
                (holds temporalPart ?TIME 
                    (WhenFn ?KEEP)) 
                (holds holdsDuring ?TIME `(holds located ?OBJ ?PLACE))))))
(holds subclass Confining Keeping)
(=> 
    (holds instance ?CONFINE Confining) 
    (exists
        (?AGENT) 
        (and 
            (or 
                (holds instance ?AGENT Animal) 
                (holds instance ?AGENT Human)) 
            (holds patient ?CONFINE ?AGENT))))
(=> 
    (and 
        (holds instance ?CONFINE Confining) 
        (holds patient ?CONFINE ?PERSON) 
        (holds instance ?PERSON Human)) 
    (not 
        (holds desires ?PERSON `(holds patient ?CONFINE ?PERSON))))
(holds subclass Maintaining IntentionalProcess)
(holds subclass Repairing IntentionalProcess)
(holds relatedInternalConcept Repairing Maintaining)
(=> 
    (and 
        (holds instance ?REPAIR Repairing) 
        (holds patient ?REPAIR ?OBJ)) 
    (exists
        (?DAMAGE) 
        (and 
            (holds instance ?DAMAGE Damaging) 
            (holds patient ?DAMAGE ?OBJ) 
            (holds earlier 
                (WhenFn ?DAMAGE) 
                (WhenFn ?REPAIR)))))
(holds subclass TherapeuticProcess Repairing)
(=> 
    (and 
        (holds instance ?PROC TherapeuticProcess) 
        (holds patient ?PROC ?BIO)) 
    (or 
        (holds instance ?BIO Organism) 
        (exists
            (?ORG) 
            (and 
                (holds instance ?ORG Organism) 
                (holds part ?BIO ?ORG)))))
(holds subclass Surgery TherapeuticProcess)
(=> 
    (and 
        (holds instance ?ACT Surgery) 
        (holds patient ?ACT ?ANIMAL)) 
    (exists
        (?SUBACT) 
        (and 
            (holds instance ?SUBACT Cutting) 
            (holds instance ?ANIMAL Animal) 
            (holds patient ?ANIMAL ?CUTTING) 
            (holds subProcess ?SUBACT ?ACT))))
(holds subclass Damaging InternalChange)
(holds disjoint Damaging Repairing)
(holds subclass Destruction Damaging)
(<=> 
    (holds instance ?PROCESS Destruction) 
    (exists
        (?PATIENT) 
        (and 
            (holds patient ?PROCESS ?PATIENT) 
            (holds time ?PATIENT 
                (BeginFn 
                    (WhenFn ?PROCESS))) 
            (not 
                (holds time ?PATIENT 
                    (EndFn 
                        (WhenFn ?PROCESS)))))))
(holds subclass Killing Destruction)
(=> 
    (and 
        (holds instance ?KILL Killing) 
        (holds agent ?KILL ?AGENT) 
        (holds patient ?KILL ?PATIENT)) 
    (and 
        (holds instance ?AGENT Organism) 
        (holds instance ?PATIENT Organism)))
(=> 
    (and 
        (holds instance ?KILL Killing) 
        (holds patient ?KILL ?PATIENT)) 
    (and 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?KILL)) `(holds attribute ?PATIENT Living)) 
        (holds holdsDuring 
            (FutureFn 
                (WhenFn ?KILL)) `(holds attribute ?PATIENT Dead))))
(=> 
    (and 
        (holds instance ?KILL Killing) 
        (holds patient ?KILL ?OBJ)) 
    (exists
        (?DEATH) 
        (and 
            (holds instance ?DEATH Death) 
            (holds experiencer ?DEATH ?OBJ) 
            (holds causes ?KILL ?DEATH))))
(holds subclass Poking IntentionalProcess)
(=> 
    (and 
        (holds instance ?POKE Poking) 
        (holds agent ?POKE ?AGENT) 
        (holds patient ?POKE ?OBJ) 
        (holds instrument ?POKE ?INST)) 
    (holds holdsDuring 
        (WhenFn ?POKE) `(holds connects ?INST ?AGENT ?OBJ)))
(holds subclass Cutting Poking)
(holds subclass Attaching DualObjectProcess)
(holds disjoint Attaching Detaching)
(holds relatedInternalConcept Attaching Putting)
(=> 
    (and 
        (holds instance ?ATTACH Attaching) 
        (holds patient ?ATTACH ?OBJ1) 
        (holds patient ?ATTACH ?OBJ2)) 
    (and 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?ATTACH)) `(not 
                (holds connected ?OBJ1 ?OBJ2))) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?ATTACH)) `(holds connected ?OBJ1 ?OBJ2))))
(holds subclass Detaching DualObjectProcess)
(=> 
    (and 
        (holds instance ?DETACH Detaching) 
        (holds patient ?DETACH ?OBJ1) 
        (holds patient ?DETACH ?OBJ2)) 
    (and 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?DETACH)) `(holds connected ?OBJ1 ?OBJ2)) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?DETACH)) `(not 
                (holds connected ?OBJ1 ?OBJ2)))))
(holds subclass Combining DualObjectProcess)
(<=> 
    (and 
        (holds instance ?COMBINE Combining) 
        (holds resource ?COMBINE ?OBJ1) 
        (holds result ?COMBINE ?OBJ2)) 
    (and 
        (holds holdsDuring 
            (BeginFn 
                (WhenFn ?COMBINE)) `(not 
                (holds piece ?OBJ1 ?OBJ2))) 
        (holds holdsDuring 
            (EndFn 
                (WhenFn ?COMBINE)) `(holds piece ?OBJ1 ?OBJ2))))
(holds subclass Separating DualObjectProcess)
(holds disjoint Separating Combining)
(holds subclass ChemicalProcess InternalChange)
(holds partition ChemicalProcess ChemicalSynthesis ChemicalDecomposition)
(=> 
    (and 
        (holds instance ?PROC ChemicalProcess) 
        (or 
            (holds resource ?PROC ?STUFF) 
            (holds result ?PROC ?STUFF))) 
    (holds instance ?STUFF PureSubstance))
(holds subclass ChemicalSynthesis ChemicalProcess)
(holds subclass ChemicalSynthesis Combining)
(=> 
    (and 
        (holds resource ?PROC ?SUBSTANCE1) 
        (holds result ?PROC ?SUBSTANCE2) 
        (holds instance ?SUBSTANCE1 ElementalSubstance) 
        (holds instance ?SUBSTANCE2 CompoundSubstance)) 
    (holds instance ?PROC ChemicalSynthesis))
(<=> 
    (holds instance ?COMPOUND CompoundSubstance) 
    (exists
        (?ELEMENT1 ?ELEMENT2 ?PROCESS) 
        (and 
            (holds instance ?ELEMENT1 ElementalSubstance) 
            (holds instance ?ELEMENT2 ElementalSubstance) 
            (not 
                (equal ?ELEMENT1 ?ELEMENT2)) 
            (holds instance ?PROCESS ChemicalSynthesis) 
            (holds resource ?PROCESS ?ELEMENT1) 
            (holds resource ?PROCESS ?ELEMENT2) 
            (holds result ?PROCESS ?COMPOUND))))
(holds subclass ChemicalDecomposition ChemicalProcess)
(holds subclass ChemicalDecomposition Separating)
(=> 
    (and 
        (holds resource ?PROC ?SUBSTANCE1) 
        (holds result ?PROC ?SUBSTANCE2) 
        (holds instance ?SUBSTANCE1 CompoundSubstance) 
        (holds instance ?SUBSTANCE2 ElementalSubstance)) 
    (holds instance ?PROC ChemicalDecomposition))
(holds subclass Combustion ChemicalDecomposition)
(=> 
    (holds instance ?COMBUSTION Combustion) 
    (exists
        (?HEAT ?LIGHT) 
        (and 
            (holds instance ?HEAT Heating) 
            (holds instance ?LIGHT RadiatingLight) 
            (holds subProcess ?HEAT ?COMBUSTION) 
            (holds subProcess ?LIGHT ?COMBUSTION))))
(holds subclass InternalChange Process)
(=> 
    (and 
        (holds instance ?CHANGE InternalChange) 
        (holds patient ?CHANGE ?OBJ)) 
    (exists
        (?PROPERTY) 
        (or 
            (and 
                (holds holdsDuring 
                    (BeginFn 
                        (WhenFn ?CHANGE)) `(holds attribute ?OBJ ?PROPERTY)) 
                (holds holdsDuring 
                    (EndFn 
                        (WhenFn ?CHANGE)) `(not 
                        (holds attribute ?OBJ ?PROPERTY)))) 
            (and 
                (holds holdsDuring 
                    (BeginFn 
                        (WhenFn ?CHANGE)) `(not 
                        (holds attribute ?OBJ ?PROPERTY))) 
                (holds holdsDuring 
                    (EndFn 
                        (WhenFn ?CHANGE)) `(holds attribute ?OBJ ?PROPERTY))))))
(holds subclass WeatherProcess InternalChange)
(holds subclass Precipitation WeatherProcess)
(holds subclass Precipitation WaterMotion)
(=> 
    (holds instance ?PROCESS Precipitation) 
    (exists
        (?STUFF) 
        (and 
            (holds instance ?STUFF Water) 
            (holds patient ?PROCESS ?STUFF))))
(holds subclass SurfaceChange InternalChange)
(=> 
    (and 
        (holds instance ?ALT SurfaceChange) 
        (holds patient ?ALT ?OBJ)) 
    (exists
        (?PART ?PROPERTY) 
        (and 
            (holds superficialPart ?PART ?OBJ) 
            (or 
                (and 
                    (holds holdsDuring 
                        (BeginFn 
                            (WhenFn ?ALT)) `(holds attribute ?PART ?PROPERTY)) 
                    (holds holdsDuring 
                        (EndFn 
                            (WhenFn ?ALT)) `(not 
                            (holds attribute ?PART ?PROPERTY)))) 
                (and 
                    (holds holdsDuring 
                        (BeginFn 
                            (WhenFn ?ALT)) `(not 
                            (holds attribute ?PART ?PROPERTY))) 
                    (holds holdsDuring 
                        (EndFn 
                            (WhenFn ?ALT)) `(holds attribute ?PART ?PROPERTY)))))))
(holds subclass Coloring SurfaceChange)
(=> 
    (and 
        (holds instance ?COLORING Coloring) 
        (holds patient ?COLORING ?OBJ)) 
    (exists
        (?PROPERTY) 
        (and 
            (holds instance ?PROPERTY ColorAttribute) 
            (or 
                (and 
                    (holds holdsDuring 
                        (BeginFn 
                            (WhenFn ?ALT)) `(holds attribute ?PART ?PROPERTY)) 
                    (holds holdsDuring 
                        (EndFn 
                            (WhenFn ?ALT)) `(not 
                            (holds attribute ?PART ?PROPERTY)))) 
                (and 
                    (holds holdsDuring 
                        (BeginFn 
                            (WhenFn ?ALT)) `(not 
                            (holds attribute ?PART ?PROPERTY))) 
                    (holds holdsDuring 
                        (EndFn 
                            (WhenFn ?ALT)) `(holds attribute ?PART ?PROPERTY)))))))
(holds subclass ShapeChange InternalChange)
(=> 
    (and 
        (holds instance ?ALT ShapeChange) 
        (holds patient ?ALT ?OBJ)) 
    (exists
        (?PROPERTY) 
        (and 
            (holds instance ?PROPERTY ShapeAttribute) 
            (or 
                (and 
                    (holds holdsDuring 
                        (BeginFn 
                            (WhenFn ?ALT)) `(holds attribute ?OBJ ?PROPERTY)) 
                    (holds holdsDuring 
                        (EndFn 
                            (WhenFn ?ALT)) `(not 
                            (holds attribute ?OBJ ?PROPERTY)))) 
                (and 
                    (holds holdsDuring 
                        (BeginFn 
                            (WhenFn ?ALT)) `(not 
                            (holds attribute ?OBJ ?PROPERTY))) 
                    (holds holdsDuring 
                        (EndFn 
                            (WhenFn ?ALT)) `(holds attribute ?OBJ ?PROPERTY)))))))
(holds subclass ContentDevelopment IntentionalProcess)
(=> 
    (holds instance ?DEVELOP ContentDevelopment) 
    (exists
        (?OBJ) 
        (and 
            (holds instance ?OBJ ContentBearingObject) 
            (holds patient ?DEVELOP ?OBJ))))
(holds subclass Reading ContentDevelopment)
(holds relatedInternalConcept Reading Interpreting)
(=> 
    (holds instance ?READ Reading) 
    (exists
        (?TEXT ?PROP) 
        (and 
            (holds instance ?TEXT Text) 
            (holds containsInformation ?TEXT ?PROP) 
            (holds realization ?READ ?PROP))))
(holds subclass Writing ContentDevelopment)
(holds subclass Encoding Writing)
(holds subclass Decoding Writing)
(holds disjoint Decoding Encoding)
(=> 
    (and 
        (holds instance ?DECODE Decoding) 
        (holds patient ?DECODE ?DOC1)) 
    (exists
        (?ENCODE ?DOC2 ?TIME) 
        (and 
            (holds containsInformation ?DOC2 ?PROP) 
            (holds containsInformation ?DOC1 ?PROP) 
            (holds temporalPart ?TIME 
                (PastFn 
                    (WhenFn ?DECODE))) 
            (holds holdsDuring ?TIME `(and 
                    (holds instance ?ENCODE Encoding) 
                    (holds patient ?ENCODE ?DOC2))))))
(holds subclass Translating ContentDevelopment)
(holds subclass Translating DualObjectProcess)
(=> 
    (and 
        (holds instance ?TRANSLATE Translating) 
        (holds resource ?TRANSLATE ?EXPRESSION1) 
        (holds result ?TRANSLATE ?EXPRESSION2)) 
    (exists
        (?LANGUAGE1 ?LANGUAGE2 ?ENTITY) 
        (and 
            (holds representsInLanguage ?EXPRESSION1 ?ENTITY ?LANGUAGE1) 
            (holds representsInLanguage ?EXPRESSION2 ?ENTITY ?LANGUAGE2) 
            (not 
                (equal ?LANGUAGE1 ?LANGUAGE2)))))
(holds subclass Wetting Putting)
(=> 
    (and 
        (holds instance ?WET Wetting) 
        (holds patient ?WET ?OBJ)) 
    (holds holdsDuring 
        (EndFn 
            (WhenFn ?WET)) `(or 
            (holds attribute ?OBJ Wet) 
            (holds attribute ?OBJ Damp))))
(=> 
    (holds instance ?WET Wetting) 
    (exists
        (?OBJ) 
        (and 
            (holds attribute ?OBJ Liquid) 
            (holds patient ?WET ?OBJ))))
(holds subclass Drying Removing)
(=> 
    (and 
        (holds instance ?DRY Drying) 
        (holds patient ?DRY ?OBJ)) 
    (holds holdsDuring 
        (EndFn 
            (WhenFn ?DRY)) `(holds attribute ?OBJ Dry)))
(holds subclass Creation InternalChange)
(holds relatedInternalConcept Creation Destruction)
(=> 
    (holds instance ?ACTION Creation) 
    (exists
        (?RESULT) 
        (holds result ?ACTION ?RESULT)))
(<=> 
    (holds instance ?PROCESS Creation) 
    (exists
        (?PATIENT) 
        (and 
            (holds patient ?PROCESS ?PATIENT) 
            (holds time ?PATIENT 
                (EndFn 
                    (WhenFn ?PROCESS))) 
            (not 
                (holds time ?PATIENT 
                    (BeginFn 
                        (WhenFn ?PROCESS)))))))
(holds subclass Making Creation)
(holds subclass Making IntentionalProcess)
(holds subclass Constructing Making)
(<=> 
    (exists
        (?BUILD) 
        (and 
            (holds instance ?BUILD Constructing) 
            (holds result ?BUILD ?ARTIFACT))) 
    (holds instance ?ARTIFACT StationaryArtifact))
(holds subclass Manufacture Making)
(holds subclass Publication Manufacture)
(holds subclass Publication ContentDevelopment)
(=> 
    (and 
        (holds instance ?PUB Publication) 
        (holds patient ?PUB ?TEXT)) 
    (holds subclass ?TEXT Text))
(holds subclass Cooking Making)
(=> 
    (holds instance ?COOK Cooking) 
    (exists
        (?FOOD) 
        (and 
            (holds instance ?FOOD Food) 
            (holds result ?COOK ?FOOD))))
(holds subclass Pursuing IntentionalProcess)
(=> 
    (holds instance ?PURSUE Pursuing) 
    (exists
        (?OBJ) 
        (and 
            (holds instance ?OBJ Object) 
            (holds patient ?PURSUE ?OBJ))))
(=> 
    (and 
        (holds instance ?PURSUE Pursuing) 
        (holds agent ?PURSUE ?AGENT) 
        (holds patient ?PURSUE ?OBJ)) 
    (holds holdsDuring ?PURSUE `(holds wants ?AGENT ?OBJ)))
(=> 
    (and 
        (holds instance ?PURSUE Pursuing) 
        (holds agent ?PURSUE ?AGENT) 
        (holds patient ?PURSUE ?OBJ)) 
    (holds holdsDuring ?PURSUE `(not 
            (holds possesses ?AGENT ?OBJ))))
(holds subclass Investigating IntentionalPsychologicalProcess)
(=> 
    (and 
        (holds instance ?INVESTIGATE Investigating) 
        (holds patient ?INVESTIGATE ?PROP)) 
    (holds instance ?PROP Formula))
(=> 
    (and 
        (holds instance ?INVESTIGATE Investigating) 
        (holds agent ?INVESTIGATE ?AGENT) 
        (holds patient ?INVESTIGATE ?PROP)) 
    (holds holdsDuring 
        (WhenFn ?INVESTIGATE) `(not 
            (holds knows ?AGENT ?PROP))))
(holds subclass DiagnosticProcess Investigating)
(=> 
    (and 
        (holds instance ?PROC DiagnosticProcess) 
        (holds agent ?PROC ?AGENT)) 
    (exists
        (?CAUSE) 
        (holds hasPurposeForAgent ?PROC `(holds knows ?AGENT `(holds causes ?CAUSE ?PROC)) ?AGENT)))
(holds subclass SocialInteraction IntentionalProcess)
(=> 
    (holds instance ?INTERACTION SocialInteraction) 
    (exists
        (?AGENT1 ?AGENT2) 
        (and 
            (holds agent ?INTERACTION ?AGENT1) 
            (holds agent ?INTERACTION ?AGENT2) 
            (not 
                (equal ?AGENT1 ?AGENT2)))))
(holds subclass Pretending SocialInteraction)
(=> 
    (holds instance ?PRETEND Pretending) 
    (exists
        (?PERSON ?PROP) 
        (and 
            (holds hasPurpose ?PRETEND `(holds believes ?PERSON ?PROP)) 
            (holds true ?PROP True))))
(holds subclass Communication SocialInteraction)
(holds relatedInternalConcept Communication ContentDevelopment)
(=> 
    (holds instance ?COMMUNICATE Communication) 
    (exists
        (?PHYS ?ENTITY ?AGENT1 ?AGENT2) 
        (and 
            (holds refers ?PHYS ?ENTITY) 
            (holds patient ?COMMUNICATE ?PHYS) 
            (holds instance ?AGENT1 CognitiveAgent) 
            (holds agent ?COMMUNICATE ?AGENT1) 
            (holds instance ?AGENT2 CognitiveAgent) 
            (holds destination ?COMMUNICATE ?AGENT2))))
(holds subclass Disseminating Communication)
(=> 
    (holds instance ?DISSEMINATE Disseminating) 
    (exists
        (?AGENT1 ?AGENT2) 
        (and 
            (holds destination ?DISSEMINATE ?AGENT1) 
            (holds instance ?AGENT1 CognitiveAgent) 
            (holds destination ?DISSEMINATE ?AGENT2) 
            (holds instance ?AGENT2 CognitiveAgent) 
            (not 
                (equal ?AGENT1 ?AGENT2)))))
(holds subclass Demonstrating Disseminating)
(=> 
    (holds instance ?DEMO Demonstrating) 
    (exists
        (?PERSON) 
        (holds attends ?DEMO ?PERSON)))
(holds subrelation attends experiencer)
(holds domain attends 1 Demonstrating)
(holds domain attends 2 Human)
(holds subclass Advertising Disseminating)
(=> 
    (holds instance ?ADVERT Advertising) 
    (exists
        (?OBJ) 
        (and 
            (holds refers ?ADVERT ?OBJ) 
            (holds hasPurpose ?ADVERT `(exists
                    (?SALE) 
                    (and 
                        (holds instance ?SALE Selling) 
                        (holds patient ?SALE ?OBJ)))))))
(holds subclass Expressing Communication)
(holds partition Expressing Gesture ExpressingInLanguage)
(=> 
    (and 
        (holds instance ?EXPRESS Expressing) 
        (holds agent ?EXPRESS ?AGENT)) 
    (exists
        (?STATE) 
        (and 
            (holds instance ?STATE StateOfMind) 
            (holds attribute ?AGENT ?STATE) 
            (holds represents ?EXPRESS ?STATE))))
(holds subclass Gesture Expressing)
(holds subclass Gesture BodyMotion)
(=> 
    (and 
        (holds instance ?GESTURE Gesture) 
        (holds agent ?GESTURE ?AGENT)) 
    (exists
        (?STATE) 
        (and 
            (holds instance ?STATE StateOfMind) 
            (holds attribute ?AGENT ?STATE) 
            (holds represents ?GESTURE ?STATE))))
(holds subclass ExpressingInLanguage Expressing)
(holds subclass ExpressingInLanguage LinguisticCommunication)
(holds subclass LinguisticCommunication Communication)
(holds partition LinguisticCommunication Stating Supposing Directing Committing ExpressingInLanguage Declaring)
(=> 
    (holds instance ?COMMUNICATE LinguisticCommunication) 
    (exists
        (?OBJ) 
        (and 
            (holds represents ?COMMUNICATE ?OBJ) 
            (holds instance ?OBJ LinguisticExpression) 
            (holds patient ?COMMUNICATE ?OBJ))))
(holds subclass Stating LinguisticCommunication)
(=> 
    (and 
        (holds instance ?STATE Stating) 
        (holds agent ?STATE ?AGENT) 
        (holds patient ?STATE ?FORMULA) 
        (holds instance ?FORMULA Formula)) 
    (holds holdsDuring 
        (WhenFn ?STATE) `(holds believes ?AGENT ?FORMULA)))
(holds subclass Supposing LinguisticCommunication)
(holds subclass Directing LinguisticCommunication)
(holds subclass Ordering Directing)
(=> 
    (and 
        (holds instance ?ORDER Ordering) 
        (holds patient ?ORDER ?FORMULA)) 
    (holds modalAttribute ?FORMULA Obligation))
(holds subclass Requesting Directing)
(=> 
    (and 
        (holds instance ?REQUEST Requesting) 
        (holds agent ?REQUEST ?AGENT) 
        (holds patient ?REQUEST ?FORMULA) 
        (holds instance ?FORMULA Formula)) 
    (holds desires ?AGENT ?FORMULA))
(holds subclass Questioning Directing)
(=> 
    (and 
        (holds instance ?QUESTION Questioning) 
        (holds agent ?QUESTION ?AGENT) 
        (holds patient ?QUESTION ?FORMULA) 
        (holds instance ?FORMULA Formula)) 
    (holds holdsDuring 
        (WhenFn ?QUESTION) `(not 
            (holds knows ?AGENT ?FORMULA))))
(holds subclass Committing LinguisticCommunication)
(=> 
    (and 
        (holds instance ?COMMIT Committing) 
        (holds patient ?COMMIT ?FORMULA) 
        (holds instance ?FORMULA Formula)) 
    (holds modalAttribute ?FORMULA Promise))
(holds subclass Offering Committing)
(holds subclass Declaring LinguisticCommunication)
(=> 
    (and 
        (holds instance ?DECLARE Declaring) 
        (holds agent ?DECLARE ?AGENT1)) 
    (exists
        (?PROC ?AGENT2) 
        (or 
            (holds confersRight ?PROC ?DECLARE ?AGENT2) 
            (holds confersObligation ?PROC ?DECLARE ?AGENT2))))
(holds subclass Wedding Declaring)
(=> 
    (holds instance ?WED Wedding) 
    (exists
        (?PERSON1 ?PERSON2) 
        (holds result ?WED `(holds spouse ?PERSON1 ?PERSON2))))
(holds subclass Naming Declaring)
(=> 
    (and 
        (holds instance ?PROCESS Naming) 
        (holds patient ?PROCESS ?THING) 
        (holds destination ?PROCESS ?NAME)) 
    (holds holdsDuring 
        (FutureFn 
            (WhenFn ?PROCESS)) `(holds names ?NAME ?THING)))
(holds subclass Cooperation SocialInteraction)
(=> 
    (holds instance ?COOPERATE Cooperation) 
    (exists
        (?PURP) 
        (forall
            (?AGENT) 
            (=> 
                (holds agent ?COOPERATE ?AGENT) 
                (holds hasPurposeForAgent ?COOPERATE ?PURP ?AGENT)))))
(holds subclass Meeting SocialInteraction)
(=> 
    (and 
        (holds instance ?MEET Meeting) 
        (holds agent ?MEET ?AGENT1) 
        (holds agent ?MEET ?AGENT2)) 
    (holds holdsDuring 
        (WhenFn ?MEET) `(holds orientation ?AGENT1 ?AGENT2 Near)))
(=> 
    (holds instance ?MEET Meeting) 
    (exists
        (?AGENT1 ?AGENT2) 
        (and 
            (holds agent ?MEET ?AGENT1) 
            (holds agent ?MEET ?AGENT2) 
            (holds hasPurpose ?MEET `(exists
                    (?COMM) 
                    (and 
                        (holds instance ?COMM Communication) 
                        (holds agent ?COMM ?AGENT1) 
                        (holds agent ?COMM ?AGENT2)))))))
(holds subclass Contest SocialInteraction)
(=> 
    (holds instance ?CONTEST Contest) 
    (exists
        (?AGENT1 ?AGENT2 ?PURP1 ?PURP2) 
        (and 
            (holds agent ?CONTEST ?AGENT1) 
            (holds agent ?CONTEST ?AGENT2) 
            (holds hasPurposeForAgent ?CONTEST ?PURP1 ?AGENT1) 
            (holds hasPurposeForAgent ?CONTEST ?PURP2 ?AGENT2) 
            (not 
                (equal ?AGENT1 ?AGENT2)) 
            (not 
                (equal ?PURP1 ?PURP2)))))
(holds subclass ViolentContest Contest)
(holds subclass War ViolentContest)
(=> 
    (holds instance ?WAR War) 
    (exists
        (?BATTLE) 
        (and 
            (holds instance ?BATTLE Battle) 
            (holds subProcess ?BATTLE ?WAR))))
(=> 
    (and 
        (holds instance ?WAR War) 
        (holds agent ?WAR ?AGENT)) 
    (or 
        (holds instance ?AGENT GeopoliticalArea) 
        (and 
            (holds instance ?AGENT Organization) 
            (forall
                (?MEMBER) 
                (=> 
                    (holds member ?MEMBER ?AGENT) 
                    (holds instance ?MEMBER GeopoliticalArea))))))
(holds subclass Battle ViolentContest)
(=> 
    (holds instance ?BATTLE Battle) 
    (exists
        (?WAR) 
        (and 
            (holds instance ?WAR War) 
            (holds subProcess ?BATTLE ?WAR))))
(=> 
    (holds instance ?BATTLE Battle) 
    (exists
        (?ATTACK) 
        (and 
            (holds instance ?ATTACK ViolentContest) 
            (holds subProcess ?ATTACK ?BATTLE))))
(holds subclass Game Contest)
(holds subclass Game RecreationOrExercise)
(holds subclass Sport Game)
(holds subclass LegalAction Contest)
(holds subclass Maneuver IntentionalProcess)
(=> 
    (holds instance ?MOVE Maneuver) 
    (exists
        (?CONTEST) 
        (and 
            (holds instance ?CONTEST Contest) 
            (holds subProcess ?MOVE ?CONTEST))))
(holds subclass Attack Maneuver)
(=> 
    (holds instance ?ATTACK Attack) 
    (exists
        (?CONTEST) 
        (and 
            (holds instance ?CONTEST ViolentContest) 
            (holds subProcess ?ATTACK ?CONTEST))))
(=> 
    (and 
        (holds instance ?ATTACK Attack) 
        (holds agent ?ATTACK ?AGENT) 
        (holds patient ?ATTACK ?OBJ)) 
    (holds hasPurposeForAgent ?ATTACK `(exists
            (?DAMAGE) 
            (and 
                (holds instance ?DAMAGE Damaging) 
                (holds patient ?DAMAGE ?OBJ))) ?AGENT))
(holds subclass DefensiveManeuver Maneuver)
(=> 
    (holds instance ?DEFENSE DefensiveManeuver) 
    (exists
        (?CONTEST) 
        (and 
            (holds instance ?CONTEST ViolentContest) 
            (holds subProcess ?DEFENSE ?CONTEST))))
(=> 
    (and 
        (holds instance ?DEFENSE DefensiveManeuver) 
        (holds agent ?DEFENSE ?AGENT)) 
    (holds hasPurposeForAgent ?DEFENSE `(not 
            (exists
                (?DAMAGE) 
                (and 
                    (holds instance ?DAMAGE Damaging) 
                    (holds patient ?DAMAGE ?AGENT)))) ?AGENT))
(=> 
    (and 
        (holds instance ?MANEUVER Maneuver) 
        (holds instance ?CONTEST ViolentContest) 
        (holds subProcess ?MANEUVER ?CONTEST)) 
    (or 
        (holds instance ?MANEUVER Attack) 
        (holds instance ?MANEUVER DefensiveManeuver)))
(holds subclass Perception PsychologicalProcess)
(=> 
    (and 
        (holds instance ?PERCEPT Perception) 
        (holds agent ?PERCEPT ?AGENT)) 
    (holds instance ?AGENT Animal))
(=> 
    (holds instance ?AGENT SentientAgent) 
    (holds capability Perception experiencer ?AGENT))
(holds subclass Seeing Perception)
(=> 
    (and 
        (holds instance ?SEE Seeing) 
        (holds agent ?SEE ?AGENT) 
        (holds patient ?SEE ?OBJ)) 
    (and 
        (holds attribute ?OBJ Illuminated) 
        (exists
            (?PROP) 
            (and 
                (holds instance ?PROP ColorAttribute) 
                (holds knows ?AGENT `(holds attribute ?OBJ ?PROP))))))
(holds subclass Looking Seeing)
(holds subclass Looking IntentionalProcess)
(holds subclass Smelling Perception)
(=> 
    (and 
        (holds instance ?SMELL Smelling) 
        (holds patient ?SMELL ?OBJ)) 
    (exists
        (?ATTR) 
        (and 
            (holds instance ?ATTR OlfactoryAttribute) 
            (holds attribute ?OBJ ?ATTR))))
(holds subclass Tasting Perception)
(=> 
    (and 
        (holds instance ?TASTE Tasting) 
        (holds patient ?TASTE ?OBJ)) 
    (exists
        (?ATTR) 
        (and 
            (holds instance ?ATTR TasteAttribute) 
            (holds attribute ?OBJ ?ATTR))))
(holds subclass Hearing Perception)
(=> 
    (and 
        (holds instance ?HEAR Hearing) 
        (holds patient ?HEAR ?OBJ)) 
    (exists
        (?ATTR) 
        (and 
            (holds instance ?ATTR SoundAttribute) 
            (holds attribute ?OBJ ?ATTR))))
(holds subclass Listening Hearing)
(holds subclass Listening IntentionalProcess)
(holds subclass TactilePerception Perception)
(=> 
    (holds instance ?TACTILE TactilePerception) 
    (exists
        (?TOUCH) 
        (and 
            (holds instance ?TOUCH Touching) 
            (holds subProcess ?TOUCH ?TACTILE))))
(holds subclass Radiating Motion)
(holds subclass RadiatingLight Radiating)
(<=> 
    (exists
        (?EMIT) 
        (and 
            (holds instance ?EMIT RadiatingLight) 
            (holds patient ?EMIT ?REGION) 
            (holds instance ?REGION Region))) 
    (holds attribute ?REGION Illuminated))
(holds subclass RadiatingSound Radiating)
(=> 
    (and 
        (holds instance ?EMIT RadiatingSound) 
        (holds agent ?EMIT ?SOUND)) 
    (exists
        (?ATTR) 
        (and 
            (holds instance ?ATTR SoundAttribute) 
            (holds attribute ?SOUND ?ATTR))))
(holds subclass Music RadiatingSound)
(holds subclass RadiatingElectromagnetic Radiating)
(holds subclass RadiatingNuclear Radiating)
(holds subclass StateChange InternalChange)
(=> 
    (and 
        (holds instance ?PROCESS StateChange) 
        (holds patient ?PROCESS ?OBJ)) 
    (exists
        (?PART ?STATE1 ?STATE2) 
        (and 
            (holds part ?PART ?OBJ) 
            (holds instance ?STATE1 PhysicalState) 
            (holds instance ?STATE2 PhysicalState) 
            (not 
                (equal ?STATE1 ?STATE2)) 
            (holds holdsDuring 
                (BeginFn 
                    (WhenFn ?PROCESS)) `(holds attribute ?PART ?STATE1)) 
            (holds holdsDuring 
                (EndFn 
                    (WhenFn ?PROCESS)) `(holds attribute ?PART ?STATE2)))))
(holds subclass Melting StateChange)
(=> 
    (holds instance ?MELT Melting) 
    (exists
        (?HEAT) 
        (and 
            (holds instance ?HEAT Heating) 
            (holds subProcess ?HEAT ?MELT))))
(=> 
    (and 
        (holds instance ?MELT Melting) 
        (holds patient ?MELT ?OBJ)) 
    (exists
        (?PART) 
        (and 
            (holds part ?PART ?OBJ) 
            (holds holdsDuring 
                (BeginFn 
                    (WhenFn ?MELT)) `(holds attribute ?PART Solid)) 
            (holds holdsDuring 
                (EndFn 
                    (WhenFn ?MELT)) `(holds attribute ?PART Liquid)))))
(holds subclass Boiling StateChange)
(=> 
    (holds instance ?BOIL Boiling) 
    (exists
        (?HEAT) 
        (and 
            (holds instance ?HEAT Heating) 
            (holds subProcess ?HEAT ?BOIL))))
(=> 
    (and 
        (holds instance ?BOIL Boiling) 
        (holds patient ?BOIL ?OBJ)) 
    (exists
        (?PART) 
        (and 
            (holds part ?PART ?OBJ) 
            (holds holdsDuring 
                (BeginFn 
                    (WhenFn ?BOIL)) `(holds attribute ?PART Liquid)) 
            (holds holdsDuring 
                (EndFn 
                    (WhenFn ?BOIL)) `(holds attribute ?PART Gas)))))
(holds subclass Condensing StateChange)
(=> 
    (holds instance ?COND Condensing) 
    (exists
        (?COOL) 
        (and 
            (holds instance ?COOL Cooling) 
            (holds subProcess ?COOL ?COND))))
(=> 
    (and 
        (holds instance ?COND Condensing) 
        (holds patient ?COND ?OBJ)) 
    (exists
        (?PART) 
        (and 
            (holds part ?PART ?OBJ) 
            (holds holdsDuring 
                (BeginFn 
                    (WhenFn ?COND)) `(holds attribute ?PART Gas)) 
            (holds holdsDuring 
                (EndFn 
                    (WhenFn ?COND)) `(holds attribute ?PART Liquid)))))
(holds subclass Freezing StateChange)
(=> 
    (holds instance ?FREEZE Freezing) 
    (exists
        (?COOL) 
        (and 
            (holds instance ?COOL Cooling) 
            (holds subProcess ?COOL ?FREEZE))))
(=> 
    (and 
        (holds instance ?FREEZE Freezing) 
        (holds patient ?FREEZE ?OBJ)) 
    (exists
        (?PART) 
        (and 
            (holds part ?PART ?OBJ) 
            (holds holdsDuring 
                (BeginFn 
                    (WhenFn ?FREEZE)) `(holds attribute ?PART Liquid)) 
            (holds holdsDuring 
                (EndFn 
                    (WhenFn ?FREEZE)) `(holds attribute ?PART Solid)))))
(holds subclass AstronomicalBody Region)
(holds disjoint AstronomicalBody GeographicArea)
(holds subclass GeographicArea Region)
(holds partition GeographicArea WaterArea LandArea)
(holds instance geographicSubregion BinaryPredicate)
(holds instance geographicSubregion TransitiveRelation)
(holds instance geographicSubregion AsymmetricRelation)
(holds subrelation geographicSubregion properPart)
(holds subrelation geographicSubregion located)
(holds domain geographicSubregion 1 GeographicArea)
(holds domain geographicSubregion 2 GeographicArea)
(holds subclass GeopoliticalArea GeographicArea)
(holds subclass GeopoliticalArea Agent)
(=> 
    (and 
        (holds instance ?AREA GeopoliticalArea) 
        (holds leader 
            (GovernmentFn ?AREA) ?PERSON)) 
    (holds leader ?AREA ?PERSON))
(=> 
    (and 
        (holds instance ?AREA GeopoliticalArea) 
        (holds leader ?AREA ?PERSON)) 
    (holds leader 
        (GovernmentFn ?AREA) ?PERSON))
(=> 
    (and 
        (holds instance ?EVENT Election) 
        (holds agent ?EVENT ?AGENT) 
        (holds instance ?AGENT GeopoliticalArea)) 
    (holds instance ?EVENT PoliticalProcess))
(=> 
    (and 
        (holds instance ?EVENT Election) 
        (holds agent ?EVENT ?AGENT) 
        (holds instance ?AREA GeopoliticalArea) 
        (holds instance ?AGENT 
            (GovernmentFn ?AREA))) 
    (holds instance ?EVENT PoliticalProcess))
(holds instance geopoliticalSubdivision AsymmetricRelation)
(holds instance geopoliticalSubdivision TransitiveRelation)
(holds subrelation geopoliticalSubdivision geographicSubregion)
(holds domain geopoliticalSubdivision 1 GeopoliticalArea)
(holds domain geopoliticalSubdivision 2 GeopoliticalArea)
(=> 
    (holds geopoliticalSubdivision ?SUB ?AREA) 
    (not 
        (holds instance ?SUB Nation)))
(holds subclass WaterArea GeographicArea)
(=> 
    (holds instance ?AREA WaterArea) 
    (exists
        (?BED ?HOLE ?WATER) 
        (and 
            (equal 
                (PrincipalHostFn ?HOLE) ?BED) 
            (holds instance ?WATER Water) 
            (holds properlyFills ?WATER ?HOLE) 
            (equal 
                (MereologicalSumFn ?BED ?WATER) ?AREA))))
(holds subclass SaltWaterArea WaterArea)
(holds disjoint SaltWaterArea FreshWaterArea)
(holds subclass FreshWaterArea WaterArea)
(holds subclass StreamWaterArea WaterArea)
(holds disjoint StreamWaterArea StaticWaterArea)
(holds subclass StaticWaterArea WaterArea)
(holds subclass LandArea GeographicArea)
(=> 
    (holds instance ?LAND1 LandArea) 
    (exists
        (?LAND2) 
        (and 
            (holds part ?LAND1 ?LAND2) 
            (or 
                (holds instance ?LAND2 Continent) 
                (holds instance ?LAND2 Island)))))
(holds subclass ShoreArea LandArea)
(=> 
    (holds instance ?BANK ShoreArea) 
    (exists
        (?WATER) 
        (and 
            (holds instance ?WATER WaterArea) 
            (holds meetsSpatially ?BANK ?WATER))))
(holds subclass Continent LandArea)
(equal 
    (CardinalityFn Continent) 7)
(holds subclass Island LandArea)
(=> 
    (holds instance ?ISLAND Island) 
    (not 
        (exists
            (?AREA ?PART1 ?PART2) 
            (and 
                (holds instance ?AREA LandArea) 
                (holds part ?PART1 ?ISLAND) 
                (holds part ?PART2 ?AREA) 
                (not 
                    (holds part ?ISLAND ?AREA)) 
                (not 
                    (holds part ?AREA ?ISLAND)) 
                (holds meetsSpatially ?PART1 ?PART2)))))
(=> 
    (and 
        (holds instance ?ISLE Island) 
        (holds instance ?AREA GeographicArea) 
        (holds meetsSpatially ?ISLE ?AREA)) 
    (not 
        (holds instance ?AREA LandArea)))
(=> 
    (holds instance ?ISLE Island) 
    (exists
        (?WATER) 
        (and 
            (holds instance ?WATER WaterArea) 
            (holds meetsSpatially ?ISLE ?WATER))))
(holds subclass Nation GeopoliticalArea)
(holds subclass Nation LandArea)
(holds subclass StateOrProvince GeopoliticalArea)
(holds subclass StateOrProvince LandArea)
(=> 
    (holds instance ?STATE StateOrProvince) 
    (exists
        (?LAND) 
        (and 
            (holds instance ?LAND Nation) 
            (holds properPart ?STATE ?LAND))))
(holds subclass City GeopoliticalArea)
(holds subclass City LandArea)
(holds subclass Transitway Region)
(holds subclass Transitway SelfConnectedObject)
(holds subclass LandTransitway Transitway)
(holds subclass LandTransitway LandArea)
(=> 
    (holds instance ?WAY LandTransitway) 
    (holds hasPurpose `(exists
            (?TRANSPORT) 
            (and 
                (holds instance ?TRANSPORT Transportation) 
                (holds path ?TRANSPORT ?WAY)))))
(holds subclass Roadway LandTransitway)
(holds subclass Roadway LandArea)
(holds subclass Water CompoundSubstance)
(holds subclass Mineral Mixture)
(holds instance developmentalForm BinaryPredicate)
(holds instance developmentalForm AsymmetricRelation)
(holds instance developmentalForm TransitiveRelation)
(holds subrelation developmentalForm attribute)
(holds domain developmentalForm 1 OrganicObject)
(holds domain developmentalForm 2 DevelopmentalAttribute)
(=> 
    (and 
        (holds holdsDuring ?TIME1 `(holds developmentalForm ?OBJ ?ATTR1)) 
        (holds successorAttributeClosure ?ATTR2 ?ATTR1)) 
    (exists
        (?TIME2) 
        (and 
            (holds earlier ?TIME2 ?TIME1) 
            (holds holdsDuring ?TIME2 `(holds developmentalForm ?OBJ ?ATTR2)))))
(holds subclass OrganicObject CorpuscularObject)
(holds partition OrganicObject Organism AnatomicalStructure)
(holds subclass Organism OrganicObject)
(holds subclass Organism Agent)
(holds partition Organism Animal Plant Microorganism)
(=> 
    (holds instance ?ORGANISM Organism) 
    (exists
        (?BIRTH) 
        (and 
            (holds instance ?BIRTH Birth) 
            (holds experiencer ?BIRTH ?ORGANISM))))
(holds instance inhabits BinaryPredicate)
(holds instance inhabits AsymmetricRelation)
(holds domain inhabits 1 Organism)
(holds domain inhabits 2 Object)
(=> 
    (holds inhabits ?ORGANISM ?OBJ) 
    (exists
        (?TIME) 
        (holds holdsDuring ?TIME `(holds located ?ORGANISM ?OBJ))))
(holds subrelation home inhabits)
(holds domain home 1 Human)
(holds domain home 2 StationaryArtifact)
(holds instance parent BinaryPredicate)
(holds subrelation parent familyRelation)
(holds instance parent AsymmetricRelation)
(holds instance parent IntransitiveRelation)
(holds domain parent 1 Organism)
(holds domain parent 2 Organism)
(=> 
    (holds parent ?CHILD ?PARENT) 
    (holds before 
        (BeginFn 
            (WhenFn ?PARENT)) 
        (BeginFn 
            (WhenFn ?CHILD))))
(=> 
    (and 
        (holds parent ?CHILD ?PARENT) 
        (holds subclass ?CLASS Organism) 
        (holds instance ?PARENT ?CLASS)) 
    (holds instance ?CHILD ?CLASS))
(=> 
    (holds parent ?CHILD ?PARENT) 
    (or 
        (holds mother ?CHILD ?PARENT) 
        (holds father ?CHILD ?PARENT)))
(=> 
    (holds instance ?ORGANISM Organism) 
    (exists
        (?PARENT) 
        (holds parent ?ORGANISM ?PARENT)))
(holds instance mother SingleValuedRelation)
(holds subrelation mother parent)
(holds domain mother 1 Organism)
(holds domain mother 2 Organism)
(=> 
    (holds mother ?CHILD ?MOTHER) 
    (holds attribute ?MOTHER Female))
(holds instance father SingleValuedRelation)
(holds subrelation father parent)
(holds domain father 1 Organism)
(holds domain father 2 Organism)
(=> 
    (holds father ?CHILD ?FATHER) 
    (holds attribute ?FATHER Male))
(holds instance sibling BinaryPredicate)
(holds subrelation sibling familyRelation)
(holds instance sibling SymmetricRelation)
(holds instance sibling IrreflexiveRelation)
(holds domain sibling 1 Organism)
(holds domain sibling 2 Organism)
(<=> 
    (holds sibling ?ANIMAL1 ?ANIMAL2) 
    (and 
        (not 
            (equal ?ANIMAL1 ?ANIMAL2)) 
        (exists
            (?FATHER ?MOTHER) 
            (and 
                (holds father ?ANIMAL1 ?FATHER) 
                (holds father ?ANIMAL2 ?FATHER) 
                (holds mother ?ANIMAL1 ?MOTHER) 
                (holds mother ?ANIMAL2 ?MOTHER)))))
(holds subrelation daughter parent)
(holds domain daughter 1 Woman)
(holds domain daughter 2 Human)
(holds subrelation son parent)
(holds domain son 1 Man)
(holds domain son 2 Human)
(holds subrelation brother sibling)
(holds instance brother IrreflexiveRelation)
(holds instance brother TransitiveRelation)
(holds domain brother Man)
(holds domain brother Human)
(holds subrelation sister sibling)
(holds instance sister IrreflexiveRelation)
(holds instance sister TransitiveRelation)
(holds domain sister Woman)
(holds domain sister Human)
(holds subrelation ancestor familyRelation)
(holds instance ancestor TransitiveRelation)
(holds instance ancestor IrreflexiveRelation)
(holds domain ancestor 1 Organism)
(holds domain ancestor 2 Organism)
(=> 
    (holds parent ?PARENT ?CHILD) 
    (holds ancestor ?PARENT ?CHILD))
(holds subclass Plant Organism)
(holds subclass FloweringPlant Plant)
(holds subclass NonFloweringPlant Plant)
(holds disjoint NonFloweringPlant FloweringPlant)
(holds disjointDecomposition NonFloweringPlant Alga Fern Fungus Moss)
(holds subclass Alga NonFloweringPlant)
(=> 
    (holds instance ?ALGA Alga) 
    (exists
        (?WATER) 
        (and 
            (holds inhabits ?ALGA ?WATER) 
            (holds instance ?WATER Water))))
(holds subclass Fungus NonFloweringPlant)
(=> 
    (and 
        (holds instance ?FUNGUS Fungus) 
        (holds inhabits ?FUNGUS ?OBJ)) 
    (holds instance ?OBJ Organism))
(holds subclass Moss NonFloweringPlant)
(holds subclass Fern NonFloweringPlant)
(holds subclass Animal Organism)
(holds partition Animal Vertebrate Invertebrate)
(holds subclass Microorganism Organism)
(holds subclass Bacterium Microorganism)
(=> 
    (holds instance ?BACTERIUM Bacterium) 
    (exists
        (?CELL1) 
        (and 
            (holds component ?CELL1 ?BACTERIUM) 
            (holds instance ?CELL1 Cell) 
            (forall
                (?CELL2) 
                (=> 
                    (and 
                        (holds component ?CELL2 ?BACTERIUM) 
                        (holds instance ?CELL2 Cell)) 
                    (equal ?CELL1 ?CELL2))))))
(=> 
    (and 
        (holds instance ?BACTERIUM Bacterium) 
        (holds inhabits ?BACTERIUM ?OBJ)) 
    (holds instance ?OBJ Organism))
(holds subclass Virus Microorganism)
(=> 
    (holds instance ?VIRUS Virus) 
    (exists
        (?MOL1) 
        (and 
            (holds component ?MOL1 ?VIRUS) 
            (holds instance ?MOL1 Molecule) 
            (forall
                (?MOL2) 
                (=> 
                    (and 
                        (holds component ?MOL2 ?VIRUS) 
                        (holds instance ?MOL2 Molecule)) 
                    (equal ?MOL1 ?MOL2))))))
(=> 
    (and 
        (holds instance ?VIRUS Virus) 
        (holds inhabits ?VIRUS ?OBJ)) 
    (holds instance ?OBJ Organism))
(=> 
    (and 
        (holds instance ?VIRUS Virus) 
        (holds instance ?PROC Replication) 
        (holds agent ?PROC ?VIRUS)) 
    (exists
        (?CELL) 
        (and 
            (holds located ?PROC ?CELL) 
            (holds instance ?CELL Cell))))
(holds subclass Vertebrate Animal)
(holds subclass Invertebrate Animal)
(holds disjointDecomposition Invertebrate Worm Mollusk Arthropod)
(holds subclass Worm Invertebrate)
(holds subclass Mollusk Invertebrate)
(holds subclass Arthropod Invertebrate)
(holds disjointDecomposition Arthropod Arachnid Myriapod Insect Crustacean)
(holds subclass Arachnid Arthropod)
(holds subclass Myriapod Arthropod)
(holds subclass Insect Arthropod)
(holds subclass Crustacean Arthropod)
(holds subclass ColdBloodedVertebrate Vertebrate)
(holds disjointDecomposition ColdBloodedVertebrate Amphibian Fish Reptile)
(holds subclass WarmBloodedVertebrate Vertebrate)
(holds disjoint WarmBloodedVertebrate ColdBloodedVertebrate)
(holds subclass Amphibian ColdBloodedVertebrate)
(holds subclass Bird WarmBloodedVertebrate)
(holds disjoint Bird Mammal)
(holds subclass Fish ColdBloodedVertebrate)
(=> 
    (holds instance ?FISH Fish) 
    (exists
        (?WATER) 
        (and 
            (holds inhabits ?FISH ?WATER) 
            (holds instance ?WATER Water))))
(holds subclass Mammal WarmBloodedVertebrate)
(holds disjointDecomposition Mammal AquaticMammal HoofedMammal Marsupial Rodent Primate)
(holds subclass AquaticMammal Mammal)
(holds subclass HoofedMammal Mammal)
(holds subclass Marsupial Mammal)
(holds subclass Carnivore Mammal)
(=> 
    (and 
        (holds instance ?CARNIVORE Carnivore) 
        (holds instance ?EAT Eating) 
        (holds agent ?EAT ?CARNIVORE) 
        (holds patient ?EAT ?PREY)) 
    (holds instance ?PREY Animal))
(holds subclass Canine Carnivore)
(holds disjoint Canine Feline)
(holds subclass Feline Carnivore)
(holds subclass Rodent Mammal)
(holds subclass Primate Mammal)
(holds disjointDecomposition Primate Ape Monkey Hominid)
(holds subclass Ape Primate)
(holds subclass Monkey Primate)
(holds subclass Hominid Primate)
(holds subclass Human Hominid)
(holds subclass Human CognitiveAgent)
(holds subclass Man Human)
(holds subclass Woman Human)
(holds subclass Reptile ColdBloodedVertebrate)
(holds subclass BiologicallyActiveSubstance Substance)
(holds subclass Nutrient BiologicallyActiveSubstance)
(holds disjointDecomposition Nutrient Protein Carbohydrate Vitamin)
(holds subclass Protein Nutrient)
(holds subclass Enzyme Protein)
(holds subclass Carbohydrate Nutrient)
(holds subclass Vitamin Nutrient)
(holds subclass GasMixture Mixture)
(holds subclass Smoke GasMixture)
(=> 
    (holds instance ?SMOKE Smoke) 
    (exists
        (?BURNING) 
        (and 
            (holds instance ?BURNING Combustion) 
            (holds result ?BURNING ?SMOKE))))
(holds subclass Cloud GasMixture)
(=> 
    (holds instance ?CLOUD Cloud) 
    (holds capability Seeing patient ?CLOUD))
(holds subclass WaterCloud Cloud)
(=> 
    (holds instance ?CLOUD WaterCloud) 
    (exists
        (?WATER) 
        (and 
            (holds instance ?WATER Water) 
            (holds part ?WATER ?CLOUD))))
(=> 
    (holds instance ?CLOUD WaterCloud) 
    (forall
        (?PART) 
        (=> 
            (and 
                (holds part ?PART ?CLOUD) 
                (not 
                    (holds instance ?PART Water))) 
            (exists
                (?WATER) 
                (and 
                    (holds instance ?WATER Water) 
                    (holds part ?WATER ?CLOUD) 
                    (holds measure ?WATER ?MEASURE1) 
                    (holds measure ?PART ?MEASURE2) 
                    (> ?WATER ?PART))))))
(holds subclass Air GasMixture)
(=> 
    (holds instance ?WIND Wind) 
    (exists
        (?AIR) 
        (and 
            (holds patient ?WIND ?AIR) 
            (holds instance ?AIR Air))))
(holds subclass BodySubstance Mixture)
(holds subclass AnimalSubstance BodySubstance)
(=> 
    (and 
        (holds instance ?SUBSTANCE AnimalSubstance) 
        (holds instance ?ANIMAL Organism) 
        (holds part ?SUBSTANCE ?ANIMAL)) 
    (holds instance ?ANIMAL Animal))
(holds subclass PlantSubstance BodySubstance)
(=> 
    (and 
        (holds instance ?SUBSTANCE PlantSubstance) 
        (holds instance ?PLANT Organism) 
        (holds part ?SUBSTANCE ?PLANT)) 
    (holds instance ?PLANT Plant))
(holds subclass Hormone BodySubstance)
(holds subclass Hormone BiologicallyActiveSubstance)
(=> 
    (holds instance ?HORMONE Hormone) 
    (exists
        (?PROCESS ?GLAND) 
        (and 
            (holds instance ?GLAND Gland) 
            (holds instrument ?PROCESS ?GLAND) 
            (holds result ?PROCESS ?HORMONE))))
(holds subclass Blood BodySubstance)
(holds subclass Food SelfConnectedObject)
(holds disjointDecomposition Food Meat Beverage)
(=> 
    (holds instance ?FOOD Food) 
    (exists
        (?NUTRIENT) 
        (and 
            (holds instance ?NUTRIENT Nutrient) 
            (holds part ?NUTRIENT ?FOOD))))
(=> 
    (holds instance ?FOOD Food) 
    (forall
        (?PART1) 
        (=> 
            (holds part ?PART1 ?FOOD) 
            (exists
                (?PART2 ?ANIMAL) 
                (and 
                    (holds part ?PART1 ?PART2) 
                    (holds part ?PART2 ?ANIMAL) 
                    (holds instance ?ANIMAL Animal))))))
(holds subclass Meat Food)
(=> 
    (holds instance ?MEAT Meat) 
    (forall
        (?PART) 
        (=> 
            (holds part ?PART ?MEAT) 
            (exists
                (?SUBPART ?TIME ?ANIMAL) 
                (and 
                    (holds part ?SUBPART ?PART) 
                    (holds holdsDuring ?TIME `(and 
                            (holds instance ?ANIMAL Animal) 
                            (holds part ?SUBPART ?ANIMAL))))))))
(holds subclass Beverage Food)
(=> 
    (holds instance ?BEV Beverage) 
    (holds attribute ?BEV Liquid))
(=> 
    (and 
        (holds instance ?DRINK Drinking) 
        (holds patient ?DRINK ?BEV)) 
    (holds instance ?BEV Beverage))
(holds subclass AnatomicalStructure OrganicObject)
(holds partition AnatomicalStructure BodyPart AbnormalAnatomicalStructure)
(holds partition AnatomicalStructure AnimalAnatomicalStructure PlantAnatomicalStructure)
(=> 
    (holds instance ?ANAT AnatomicalStructure) 
    (exists
        (?ORGANISM ?TIME) 
        (and 
            (holds instance ?ORGANISM Organism) 
            (holds temporalPart ?TIME 
                (WhenFn ?ORGANISM)) 
            (holds holdsDuring ?TIME `(holds part ?ANAT ?ORGANISM)))))
(=> 
    (holds instance ?PART AnatomicalStructure) 
    (exists
        (?CELL) 
        (and 
            (holds instance ?CELL Cell) 
            (holds part ?CELL ?PART))))
(holds subclass AbnormalAnatomicalStructure AnatomicalStructure)
(=> 
    (holds instance ?STRUCTURE AbnormalAnatomicalStructure) 
    (exists
        (?PROC) 
        (and 
            (holds instance ?PROC PathologicProcess) 
            (holds result ?PROC ?PART))))
(holds subclass BodyPart AnatomicalStructure)
(=> 
    (holds instance ?PART BodyPart) 
    (exists
        (?ORGANISM ?TIME) 
        (and 
            (holds instance ?ORGANISM Organism) 
            (holds temporalPart ?TIME 
                (WhenFn ?ORGANISM)) 
            (holds holdsDuring ?TIME `(holds part ?ANAT ?ORGANISM)))))
(=> 
    (holds instance ?PART BodyPart) 
    (exists
        (?PROC) 
        (and 
            (holds instance ?PROC PhysiologicProcess) 
            (holds result ?PROC ?PART))))
(holds subclass AnimalAnatomicalStructure AnatomicalStructure)
(=> 
    (and 
        (holds instance ?STRUCTURE AnimalAnatomicalStructure) 
        (holds instance ?ANIMAL Organism) 
        (holds part ?STRUCTURE ?ANIMAL)) 
    (holds instance ?ANIMAL Animal))
(holds subclass PlantAnatomicalStructure AnatomicalStructure)
(=> 
    (and 
        (holds instance ?STRUCTURE PlantAnatomicalStructure) 
        (holds instance ?PLANT Organism) 
        (holds part ?STRUCTURE ?PLANT)) 
    (holds instance ?PLANT Plant))
(holds subclass ReproductiveBody BodyPart)
(holds subclass Egg ReproductiveBody)
(holds subclass Egg AnimalAnatomicalStructure)
(holds subclass Seed ReproductiveBody)
(holds subclass Seed PlantAnatomicalStructure)
(=> 
    (holds instance ?SEED Seed) 
    (exists
        (?PLANT ?TIME) 
        (and 
            (holds instance ?PLANT FloweringPlant) 
            (holds holdsDuring ?TIME `(holds part ?SEED ?PLANT)))))
(holds subclass Pollen ReproductiveBody)
(holds subclass Pollen PlantAnatomicalStructure)
(holds subclass FruitOrVegetable PlantAnatomicalStructure)
(holds subclass FruitOrVegetable ReproductiveBody)
(holds subclass Spore ReproductiveBody)
(holds subclass Spore PlantAnatomicalStructure)
(=> 
    (holds instance ?SPORE Spore) 
    (exists
        (?PLANT ?TIME) 
        (and 
            (holds instance ?PLANT NonFloweringPlant) 
            (holds holdsDuring ?TIME `(holds part ?SPORE ?PLANT)))))
(holds subclass BodyCovering BodyPart)
(=> 
    (holds instance ?COVER BodyCovering) 
    (exists
        (?BODY) 
        (and 
            (holds superficialPart ?COVER ?BODY) 
            (or 
                (holds instance ?BODY Organism) 
                (holds instance ?BODY BodyPart)))))
(holds subclass BodyJunction BodyPart)
(=> 
    (holds instance ?JUNCT BodyJunction) 
    (exists
        (?STRUCT) 
        (and 
            (holds instance ?STRUCT BodyPart) 
            (holds component ?JUNCT ?STRUCT))))
(=> 
    (holds instance ?JUNCT BodyJunction) 
    (exists
        (?STRUCT1 ?STRUCT2) 
        (and 
            (holds connected ?JUNCT ?STRUCT1) 
            (holds connected ?JUNCT ?STRUCT2) 
            (holds instance ?STRUCT1 BodyPart) 
            (holds instance ?STRUCT2 BodyPart) 
            (not 
                (equal ?STRUCT1 ?STRUCT2)))))
(holds subclass BodyVessel BodyPart)
(holds subclass Cell BodyPart)
(holds subclass Organ BodyPart)
(=> 
    (holds instance ?ORGAN Organ) 
    (exists
        (?PURP) 
        (holds hasPurpose ?ORGAN ?PURP)))
(holds subclass Gland Organ)
(holds subclass Tissue BodySubstance)
(holds disjointDecomposition Tissue Bone Muscle FatTissue)
(=> 
    (holds instance ?STUFF Tissue) 
    (exists
        (?PART) 
        (and 
            (holds instance ?PART Cell) 
            (holds part ?PART ?STUFF))))
(=> 
    (holds instance ?STUFF Tissue) 
    (exists
        (?ORGANISM) 
        (and 
            (holds instance ?ORGANISM Organism) 
            (holds part ?STUFF ?ORGANISM))))
(holds subclass Bone Tissue)
(=> 
    (holds instance ?BONE Bone) 
    (exists
        (?VERT) 
        (and 
            (holds instance ?VERT Vertebrate) 
            (holds part ?BONE ?VERT))))
(holds subclass Muscle Tissue)
(holds subclass FatTissue Tissue)
(holds subclass Noun Word)
(holds partition Word Noun Verb Adjective Adverb Particle)
(holds subclass Verb Word)
(holds subclass Adjective Word)
(holds subclass Adverb Word)
(holds subclass Particle Word)
(holds subclass Morpheme LinguisticExpression)
(=> 
    (holds instance ?MORPH Morpheme) 
    (not 
        (exists
            (?OTHERMORPH) 
            (and 
                (holds instance ?OTHERMORPH Morpheme) 
                (holds part ?OTHERMORPH ?MORPH) 
                (not 
                    (equal ?OTHERMORPH ?MORPH))))))
(=> 
    (holds instance ?MORPH Morpheme) 
    (exists
        (?WORD) 
        (and 
            (holds instance ?WORD Word) 
            (holds part ?MORPH ?WORD))))
(=> 
    (holds instance ?WORD Word) 
    (exists
        (?PART) 
        (and 
            (holds part ?PART ?WORD) 
            (holds instance ?PART Morpheme))))
(holds subclass Phrase LinguisticExpression)
(holds disjointDecomposition Phrase VerbPhrase NounPhrase PrepositionalPhrase)
(=> 
    (holds instance ?PHRASE Phrase) 
    (exists
        (?PART1 ?PART2) 
        (and 
            (holds part ?PART1 ?PHRASE) 
            (holds part ?PART2 ?PHRASE) 
            (holds instance ?PART1 Word) 
            (holds instance ?PART2 Word) 
            (not 
                (equal ?PART1 ?PART2)))))
(holds subclass VerbPhrase Phrase)
(=> 
    (holds instance ?PHRASE VerbPhrase) 
    (exists
        (?VERB) 
        (and 
            (holds instance ?VERB Verb) 
            (holds part ?VERB ?PHRASE))))
(holds subclass NounPhrase Phrase)
(holds disjoint NounPhrase VerbPhrase)
(=> 
    (holds instance ?SENTENCE Sentence) 
    (exists
        (?PHRASE1 ?PHRASE2) 
        (and 
            (holds instance ?PHRASE1 NounPhrase) 
            (holds instance ?PHRASE2 VerbPhrase) 
            (holds part ?PHRASE1 ?SENTENCE) 
            (holds part ?PHRASE2 ?SENTENCE))))
(=> 
    (holds instance ?PHRASE NounPhrase) 
    (exists
        (?NOUN) 
        (and 
            (holds instance ?NOUN Noun) 
            (holds part ?NOUN ?PHRASE))))
(holds subclass PrepositionalPhrase Phrase)
(=> 
    (holds instance ?PHRASE PrepositionalPhrase) 
    (exists
        (?PREP) 
        (and 
            (holds instance ?PREP Particle) 
            (holds part ?PREP ?PHRASE))))
(holds subclass Text LinguisticExpression)
(holds subclass Text Artifact)
(=> 
    (holds instance ?TEXT Text) 
    (exists
        (?PART) 
        (and 
            (holds part ?PART ?TEXT) 
            (holds instance ?PART LinguisticExpression))))
(=> 
    (holds instance ?TEXT Text) 
    (exists
        (?WRITE) 
        (and 
            (holds instance ?WRITE Writing) 
            (holds result ?WRITE ?TEXT))))
(holds subclass FactualText Text)
(holds disjoint FactualText FictionalText)
(=> 
    (and 
        (holds instance ?TEXT FactualText) 
        (holds authors ?AGENT ?TEXT) 
        (holds subsumesContentInstance ?TEXT ?CONTENT) 
        (holds instance ?CONTENT Formula)) 
    (holds believes ?AGENT ?CONTENT))
(holds subclass FictionalText Text)
(=> 
    (and 
        (holds instance ?TEXT FactualText) 
        (holds authors ?AGENT ?TEXT)) 
    (exists
        (?CONTENT) 
        (and 
            (holds subsumesContentInstance ?TEXT ?CONTENT) 
            (holds instance ?CONTENT Formula) 
            (not 
                (holds believes ?AGENT ?CONTENT)))))
(holds subclass Sentence LinguisticExpression)
(=> 
    (holds instance ?SENT Sentence) 
    (exists
        (?NOUN ?VERB) 
        (and 
            (holds instance ?NOUN NounPhrase) 
            (holds instance ?VERB VerbPhrase) 
            (holds part ?NOUN ?SENT) 
            (holds part ?VERB ?SENT))))
(=> 
    (holds instance ?SENT Sentence) 
    (exists
        (?PROP) 
        (and 
            (holds instance ?PROP Proposition) 
            (holds containsInformation ?SENT ?PROP))))
(holds instance authors BinaryPredicate)
(holds instance authors AsymmetricRelation)
(holds domain authors 1 Agent)
(holds domainSubclass authors 2 Text)
(=> 
    (holds authors ?AGENT ?TEXT) 
    (exists
        (?PROCESS ?INSTANCE) 
        (and 
            (holds agent ?PROCESS ?AGENT) 
            (holds instance ?INSTANCE ?TEXT) 
            (holds result ?PROCESS ?TEXT))))
(holds instance editor BinaryPredicate)
(holds instance editor AsymmetricRelation)
(holds domain editor 1 Agent)
(holds domainSubclass editor 2 Text)
(holds instance publishes BinaryPredicate)
(holds instance publishes AsymmetricRelation)
(holds domain publishes 1 Organization)
(holds domainSubclass publishes 2 Text)
(<=> 
    (holds publishes ?ORG ?TEXT) 
    (exists
        (?PUB) 
        (and 
            (holds instance ?PUB Publication) 
            (holds agent ?PUB ?ORG) 
            (holds patient ?PUB ?TEXT))))
(holds instance EditionFn BinaryFunction)
(holds instance EditionFn PartialValuedRelation)
(holds domainSubclass EditionFn 1 ContentBearingObject)
(holds domain EditionFn 2 PositiveInteger)
(holds rangeSubclass EditionFn ContentBearingObject)
(=> 
    (and 
        (equal 
            (EditionFn ?TEXT ?INT1) ?EDITION1) 
        (equal 
            (EditionFn ?TEXT ?INT2) ?EDITION2) 
        (> ?INT2 ?INT1) 
        (holds instance ?PUB1 Publication) 
        (holds instance ?PUB2 Publication) 
        (holds patient ?PUB1 ?EDITION1) 
        (holds patient ?PUB2 ?EDITION2) 
        (holds date ?PUB1 ?DATE1) 
        (holds date ?PUB2 ?DATE2)) 
    (holds before 
        (EndFn ?DATE1) 
        (EndFn ?DATE2)))
(=> 
    (equal 
        (EditionFn ?TEXT1 ?NUMBER) ?TEXT2) 
    (holds subsumesContentClass ?TEXT1 ?TEXT2))
(holds instance SeriesVolumeFn BinaryFunction)
(holds instance SeriesVolumeFn PartialValuedRelation)
(holds domainSubclass SeriesVolumeFn 1 Series)
(holds domain SeriesVolumeFn 2 PositiveInteger)
(holds rangeSubclass SeriesVolumeFn Text)
(=> 
    (and 
        (holds subclass ?TEXT Periodical) 
        (equal 
            (SeriesVolumeFn ?TEXT ?INT1) ?VOLUME1) 
        (equal 
            (SeriesVolumeFn ?TEXT ?INT2) ?VOLUME2) 
        (> ?INT2 ?INT1) 
        (holds instance ?PUB1 Publication) 
        (holds instance ?PUB2 Publication) 
        (holds patient ?PUB1 ?VOLUME1) 
        (holds patient ?PUB2 ?VOLUME2) 
        (holds date ?PUB1 ?DATE1) 
        (holds date ?PUB2 ?DATE2)) 
    (holds before 
        (EndFn ?DATE1) 
        (EndFn ?DATE2)))
(=> 
    (equal 
        (SeriesVolumeFn ?SERIES ?NUMBER) ?VOLUME) 
    (holds subsumesContentClass ?SERIES ?VOLUME))
(holds instance PeriodicalIssueFn BinaryFunction)
(holds instance PeriodicalIssueFn PartialValuedRelation)
(holds domainSubclass PeriodicalIssueFn 1 Periodical)
(holds domain PeriodicalIssueFn 2 PositiveInteger)
(holds rangeSubclass PeriodicalIssueFn Periodical)
(=> 
    (equal 
        (PeriodicalIssueFn ?PERIODICAL ?NUMBER) ?ISSUE) 
    (holds subsumesContentClass ?PERIODICAL ?ISSUE))
(holds subclass Book Text)
(holds subclass Summary Text)
(=> 
    (holds instance ?TEXT Summary) 
    (exists
        (?TEXT2) 
        (and 
            (holds instance ?TEXT2 Text) 
            (holds subsumesContentInstance ?TEXT2 ?TEXT))))
(holds subclass Series Text)
(=> 
    (holds instance ?SERIES Series) 
    (exists
        (?BOOK1 ?BOOK2) 
        (and 
            (holds instance ?BOOK1 Book) 
            (holds instance ?BOOK2 Book) 
            (holds subsumesContentInstance ?SERIES ?BOOK1) 
            (holds subsumesContentInstance ?SERIES ?BOOK2) 
            (not 
                (equal ?BOOK1 ?BOOK2)))))
(holds subclass Periodical Series)
(holds subclass Article Text)
(holds disjoint Article Book)
(=> 
    (and 
        (holds instance ?ARTICLE1 Article) 
        (holds instance ?BOOK Book) 
        (holds subsumesContentInstance ?BOOK ?ARTICLE1)) 
    (exists
        (?ARTICLE2) 
        (and 
            (holds instance ?ARTICLE2 Article) 
            (not 
                (equal ?ARTICLE2 ?ARTICLE1)) 
            (holds subsumesContentInstance ?BOOK ?ARTICLE2))))
(holds subclass Certificate Text)
(=> 
    (and 
        (holds instance ?DOC Certificate) 
        (holds possesses ?AGENT ?DOC)) 
    (exists
        (?PROC) 
        (or 
            (holds confersRight ?PROC ?DOC ?AGENT) 
            (holds confersObligation ?PROC ?DOC ?AGENT))))
(holds subclass FinancialInstrument Certificate)
(holds subclass Currency FinancialInstrument)
(holds partition Currency CurrencyBill CurrencyCoin)
(=> 
    (holds instance ?CURRENCY Currency) 
    (exists
        (?MEASURE) 
        (holds monetaryValue ?CURRENCY ?MEASURE)))
(holds subclass CurrencyBill Currency)
(=> 
    (holds instance ?BILL CurrencyBill) 
    (exists
        (?PAPER) 
        (and 
            (holds instance ?PAPER Paper) 
            (holds part ?PAPER ?BILL))))
(holds subclass CurrencyCoin Currency)
(=> 
    (holds instance ?COIN CurrencyCoin) 
    (exists
        (?METAL) 
        (and 
            (holds subclass ?METAL Metal) 
            (holds material ?METAL ?COIN))))
(holds subclass Patent Certificate)
(holds subclass Molecule CompoundSubstance)
(=> 
    (holds instance ?MOLE Molecule) 
    (exists
        (?ATOM1 ?ATOM2) 
        (and 
            (holds instance ?ATOM1 Atom) 
            (holds instance ?ATOM2 Atom) 
            (holds part ?ATOM1 ?MOLE) 
            (holds part ?ATOM2 ?MOLE) 
            (not 
                (equal ?ATOM1 ?ATOM2)))))
(holds subclass Artifact CorpuscularObject)
(<=> 
    (holds instance ?ARTIFACT Artifact) 
    (exists
        (?MAKING) 
        (and 
            (holds instance ?MAKING Making) 
            (holds result ?MAKING ?ARTIFACT))))
(holds subclass Product Artifact)
(=> 
    (holds instance ?PRODUCT Product) 
    (exists
        (?MANUFACTURE) 
        (and 
            (holds instance ?MANUFACTURE Manufacture) 
            (holds result ?MANUFACTURE ?PRODUCT))))
(holds instance version BinaryPredicate)
(holds instance version AsymmetricRelation)
(holds instance version TransitiveRelation)
(holds domainSubclass version 1 Artifact)
(holds domainSubclass version 2 Artifact)
(=> 
    (holds version ?ARTIFACT1 ?ARTIFACT2) 
    (holds subclass ?ARTIFACT1 ?ARTIFACT2))
(holds subclass StationaryArtifact Artifact)
(=> 
    (holds instance ?ARTIFACT StationaryArtifact) 
    (exists
        (?PLACE) 
        (holds holdsDuring 
            (WhenFn ?ARTIFACT) `(holds located ?ARTIFACT ?PLACE))))
(holds subclass Building StationaryArtifact)
(=> 
    (holds instance ?BUILDING Building) 
    (exists
        (?HUMAN) 
        (and 
            (holds instance ?HUMAN Human) 
            (or 
                (holds inhabits ?HUMAN ?BUILDING) 
                (exists
                    (?ACT) 
                    (and 
                        (holds agent ?ACT ?HUMAN) 
                        (holds located ?ACT ?BUILDING)))))))
(holds subclass Room StationaryArtifact)
(holds disjoint Room Building)
(=> 
    (holds instance ?ROOM Room) 
    (exists
        (?BUILD) 
        (and 
            (holds instance ?BUILD Building) 
            (holds properPart ?ROOM ?BUILD))))
(holds subclass Residence StationaryArtifact)
(holds partition Residence PermanentResidence TemporaryResidence)
(=> 
    (holds instance ?RESIDENCE Residence) 
    (or 
        (holds instance ?RESIDENCE House) 
        (exists
            (?BUILDING) 
            (and 
                (holds instance ?BUILDING ResidentialBuilding) 
                (holds part ?RESIDENCE ?BUILDING)))))
(holds subclass PermanentResidence Residence)
(=> 
    (holds instance ?RESIDENCE PermanentResidence) 
    (exists
        (?PERSON) 
        (holds home ?PERSON ?HOTEL)))
(holds subclass TemporaryResidence Residence)
(=> 
    (holds instance ?RESIDENCE TemporaryResidence) 
    (not 
        (exists
            (?PERSON) 
            (holds home ?PERSON ?HOTEL))))
(holds subclass ResidentialBuilding Building)
(holds subclass ResidentialBuilding Residence)
(holds subclass Hotel ResidentialBuilding)
(holds subclass Hotel TemporaryResidence)
(holds subclass Hotel CommercialAgent)
(holds subclass SingleFamilyResidence PermanentResidence)
(=> 
    (holds instance ?RESIDENCE SingleFamilyResidence) 
    (holds hasPurpose ?RESIDENCE `(forall
            (?AGENT1 ?AGENT2) 
            (=> 
                (and 
                    (holds home ?AGENT1 ?RESIDENCE) 
                    (holds home ?AGENT2 ?RESIDENCE)) 
                (exists
                    (?UNIT) 
                    (and 
                        (holds instance ?UNIT SocialUnit) 
                        (holds member ?AGENT1 ?UNIT) 
                        (holds member ?AGENT2 ?UNIT)))))))
(holds subclass ArtWork Artifact)
(holds subclass RepresentationalArtWork ArtWork)
(holds subclass RepresentationalArtWork Icon)
(holds subclass Fabric Artifact)
(holds disjoint Fabric StationaryArtifact)
(holds subclass Clothing Artifact)
(holds disjoint Clothing StationaryArtifact)
(=> 
    (holds instance ?CLOTHING Clothing) 
    (exists
        (?FABRIC) 
        (and 
            (holds instance ?FABRIC Fabric) 
            (holds part ?FABRIC ?CLOTHING))))
(holds instance wears BinaryPredicate)
(holds domain wears 1 Animal)
(holds domain wears 2 Clothing)
(=> 
    (holds wears ?AGENT ?CLOTHING) 
    (holds located ?CLOTHING ?AGENT))
(holds subclass Device Artifact)
(=> 
    (holds instance ?DEVICE Device) 
    (exists
        (?PROC) 
        (holds capability ?PROC instrument ?DEVICE)))
(=> 
    (holds instance ?DEVICE Device) 
    (exists
        (?PROC) 
        (holds hasPurpose ?DEVICE `(exists
                (?INST) 
                (and 
                    (holds instance ?INST ?PROC) 
                    (holds instrument ?INST ?DEVICE))))))
(holds subclass MusicalInstrument Device)
(=> 
    (holds instance ?INSTRUMENT MusicalInstrument) 
    (holds capability Music instrument ?INSTRUMENT))
(holds subclass TransportationDevice Device)
(=> 
    (holds instance ?DEVICE TransportationDevice) 
    (holds capability Transportation instrument ?DEVICE))
(holds subclass Vehicle TransportationDevice)
(=> 
    (and 
        (holds instance ?TRANSPORT Vehicle) 
        (holds instance ?MOVE Translocation) 
        (holds instrument ?MOVE ?TRANSPORT) 
        (holds origin ?MOVE ?FROM)) 
    (holds holdsDuring 
        (BeginFn 
            (WhenFn ?MOVE)) `(holds located ?TRANSPORT ?FROM)))
(=> 
    (and 
        (holds instance ?TRANSPORT Vehicle) 
        (holds instance ?MOVE Translocation) 
        (holds instrument ?MOVE ?TRANSPORT) 
        (holds destination ?MOVE ?TO)) 
    (holds holdsDuring 
        (BeginFn 
            (WhenFn ?MOVE)) `(holds located ?TRANSPORT ?TO)))
(holds subclass MeasuringDevice Device)
(=> 
    (holds instance ?DEVICE MeasuringDevice) 
    (holds hasPurpose ?DEVICE `(exists
            (?MEASURE) 
            (and 
                (holds instance ?MEASURE Measuring) 
                (holds instrument ?MEASURE ?DEVICE)))))
(holds subclass AttachingDevice Device)
(=> 
    (holds instance ?DEVICE AttachingDevice) 
    (exists
        (?ATTACH) 
        (and 
            (holds instance ?ATTACH Attaching) 
            (holds instrument ?ATTACH ?DEVICE))))
(holds subclass Weapon Device)
(=> 
    (holds instance ?WEAPON Weapon) 
    (holds capability Damaging instrument ?WEAPON))
(=> 
    (holds instance ?WEAPON Weapon) 
    (holds hasPurpose ?WEAPON `(exists
            (?DEST ?PATIENT) 
            (and 
                (holds instance ?DEST Damaging) 
                (holds patient ?DEST ?PATIENT) 
                (or 
                    (holds instance ?PATIENT StationaryArtifact) 
                    (holds instance ?PATIENT Animal) 
                    (exists
                        (?ANIMAL) 
                        (and 
                            (holds instance ?ANIMAL Animal) 
                            (holds inhabits ?ANIMAL ?PATIENT))))))))
(holds subclass Machine Device)
(=> 
    (holds instance ?MACHINE Machine) 
    (forall
        (?PROC) 
        (=> 
            (holds instrument ?PROC ?MACHINE) 
            (exists
                (?RESOURCE ?RESULT) 
                (and 
                    (holds resource ?PROC ?RESOURCE) 
                    (holds result ?PROC ?RESULT))))))
(=> 
    (holds instance ?MACHINE Machine) 
    (exists
        (?COMP1 ?COMP2) 
        (and 
            (holds instance ?COMP1 EngineeringComponent) 
            (holds instance ?COMP2 EngineeringComponent) 
            (not 
                (equal ?COMP1 ?COMP2)) 
            (holds part ?COMP1 ?MACHINE) 
            (holds part ?COMP2 ?MACHINE))))
(holds subclass EngineeringComponent Device)
(=> 
    (holds instance ?COMP EngineeringComponent) 
    (exists
        (?DEVICE) 
        (and 
            (holds instance ?DEVICE Device) 
            (holds component ?COMP ?DEVICE))))
(holds subrelation engineeringSubcomponent properPart)
(holds domain engineeringSubcomponent 1 EngineeringComponent)
(holds domain engineeringSubcomponent 2 EngineeringComponent)
(holds instance connectedEngineeringComponents SymmetricRelation)
(holds instance connectedEngineeringComponents IrreflexiveRelation)
(holds subrelation connectedEngineeringComponents connected)
(holds domain connectedEngineeringComponents 1 EngineeringComponent)
(holds domain connectedEngineeringComponents 2 EngineeringComponent)
(=> 
    (holds connectedEngineeringComponents ?COMP1 ?COMP2) 
    (and 
        (not 
            (holds engineeringSubcomponent ?COMP1 ?COMP2)) 
        (not 
            (holds engineeringSubcomponent ?COMP2 ?COMP1))))
(=> 
    (holds connectedEngineeringComponents ?COMP1 ?COMP2) 
    (not 
        (or 
            (holds instance ?COMP1 EngineeringConnection) 
            (holds instance ?COMP2 EngineeringConnection))))
(<=> 
    (holds connectedEngineeringComponents ?COMP1 ?COMP2) 
    (exists
        (?CONNECTION) 
        (holds connectsEngineeringComponents ?CONNECTION ?COMP1 ?COMP2)))
(holds subclass EngineeringConnection EngineeringComponent)
(=> 
    (holds instance ?CONNECTION EngineeringConnection) 
    (exists
        (?COMP1 ?COMP2) 
        (holds connectsEngineeringComponents ?CONNECTION ?COMP1 ?COMP2)))
(holds subrelation connectsEngineeringComponents connects)
(holds domain connectsEngineeringComponents 1 EngineeringConnection)
(holds domain connectsEngineeringComponents 2 EngineeringComponent)
(holds domain connectsEngineeringComponents 3 EngineeringComponent)
(holds subclass CommercialAgent Agent)
(holds subclass Corporation CommercialAgent)
(holds subclass Corporation Organization)
(holds subclass Manufacturer Corporation)
(=> 
    (holds instance ?ORG Manufacturer) 
    (holds hasPurpose `(exists
            (?MANUFACTURE) 
            (and 
                (holds instance ?MANUFACTURE Manufacturing) 
                (holds instance ?MANUFACTURE CommercialService) 
                (holds agent ?MANUFACTURE ?ORG)))))
(holds subclass MercantileOrganization Corporation)
(=> 
    (holds instance ?ORG MercantileOrganization) 
    (holds hasPurpose `(exists
            (?SELL) 
            (and 
                (holds instance ?SELL Selling) 
                (holds instance ?SELL CommercialService) 
                (holds agent ?SELL ?ORG)))))
(holds subclass Group Collection)
(holds subclass Group Agent)
(=> 
    (and 
        (holds instance ?GROUP Group) 
        (holds member ?MEMB ?GROUP)) 
    (holds instance ?MEMB Agent))
(holds subclass GroupOfPeople Group)
(=> 
    (and 
        (holds instance ?GROUP GroupOfPeople) 
        (holds member ?MEMBER ?GROUP)) 
    (holds instance ?MEMBER Human))
(holds subclass AgeGroup Group)
(=> 
    (holds instance ?GROUP AgeGroup) 
    (forall
        (?MEMB1 ?MEMB2 ?AGE1 ?AGE2) 
        (=> 
            (and 
                (holds member ?MEMB1 ?GROUP) 
                (holds member ?MEMB2 ?GROUP) 
                (holds age ?MEMB1 ?AGE1) 
                (holds age ?MEMB2 ?AGE2)) 
            (equal ?AGE1 ?AGE2))))
(holds subclass FamilyGroup Group)
(=> 
    (holds instance ?GROUP FamilyGroup) 
    (forall
        (?MEMB1 ?MEMB2) 
        (=> 
            (and 
                (holds member ?MEMB1 ?GROUP) 
                (holds member ?MEMB2 ?GROUP)) 
            (holds familyRelation ?MEMB1 ?MEMB2))))
(holds subclass SocialUnit Group)
(=> 
    (holds instance ?UNIT SocialUnit) 
    (exists
        (?HOME) 
        (=> 
            (holds member ?MEMBER ?UNIT) 
            (holds home ?MEMBER ?HOME))))
(holds instance ImmediateFamilyFn UnaryFunction)
(holds domain ImmediateFamilyFn 1 Human)
(holds range ImmediateFamilyFn FamilyGroup)
(=> 
    (and 
        (holds instance ?PERSON Human) 
        (equal 
            (ImmediateFamilyFn ?PERSON) ?FAMILY)) 
    (forall
        (?MEMBER) 
        (<=> 
            (holds member ?MEMBER ?FAMILY) 
            (or 
                (holds parent ?MEMBER ?PERSON) 
                (holds parent ?PERSON ?MEMBER)))))
(holds instance familyRelation BinaryPredicate)
(holds instance familyRelation EquivalenceRelation)
(holds domain familyRelation 1 Organism)
(holds domain familyRelation 2 Organism)
(=> 
    (holds familyRelation ?ORGANISM1 ?ORGANISM2) 
    (exists
        (?ORGANISM3) 
        (and 
            (holds familyRelation ?ORGANISM3 ?ORGANISM1) 
            (holds familyRelation ?ORGANISM3 ?ORGANISM2))))
(holds instance legalRelation BinaryPredicate)
(holds instance legalRelation SymmetricRelation)
(holds domain legalRelation 1 CognitiveAgent)
(holds domain legalRelation 2 CognitiveAgent)
(=> 
    (holds legalRelation ?AGENT1 ?AGENT2) 
    (exists
        (?DECLARE ?OBLIGATION) 
        (and 
            (holds instance ?DECLARE Declaring) 
            (holds confersObligation ?OBLIGATION ?DECLARE ?AGENT1) 
            (holds confersObligation ?OBLIGATION ?DECLARE ?AGENT2))))
(holds subrelation spouse legalRelation)
(holds instance spouse IrreflexiveRelation)
(holds instance spouse SymmetricRelation)
(holds domain spouse 1 Human)
(holds domain spouse 2 Human)
(holds subrelation husband spouse)
(holds instance husband AsymmetricRelation)
(holds instance husband IrreflexiveRelation)
(holds domain husband 1 Man)
(holds domain husband 2 Woman)
(holds inverse husband wife)
(holds subrelation wife spouse)
(holds instance wife AsymmetricRelation)
(holds instance wife IrreflexiveRelation)
(holds domain wife 1 Woman)
(holds domain wife 2 Man)
(holds subclass EthnicGroup Group)
(holds subclass BeliefGroup Group)
(=> 
    (holds instance ?GROUP BeliefGroup) 
    (exists
        (?BELIEF) 
        (forall
            (?MEMB) 
            (=> 
                (holds member ?MEMB ?GROUP) 
                (holds believes ?MEMB ?BELIEF)))))
(holds subclass Organization Group)
(holds subclass Organization CognitiveAgent)
(=> 
    (holds instance ?ORG Organization) 
    (exists
        (?PURP) 
        (forall
            (?MEMBER) 
            (=> 
                (holds member ?MEMBER ?ORG) 
                (holds hasPurpose ?MEMBER ?PURP)))))
(=> 
    (and 
        (holds instance ?ORG Organization) 
        (holds member ?AGENT ?ORG)) 
    (holds instance ?AGENT Agent))
(holds instance employs BinaryPredicate)
(holds domain employs 1 Organization)
(holds domain employs 2 CognitiveAgent)
(=> 
    (holds employs ?ORG ?PERSON) 
    (holds member ?PERSON ?ORG))
(holds subclass PoliticalOrganization Organization)
(=> 
    (holds instance ?POL PoliticalOrganization) 
    (exists
        (?PROC) 
        (and 
            (holds instance ?PROC PoliticalProcess) 
            (holds agent ?PROC ?POL))))
(holds subclass GovernmentOrganization Organization)
(<=> 
    (holds instance ?ORG GovernmentOrganization) 
    (or 
        (holds instance ?ORG Government) 
        (exists
            (?GOV) 
            (and 
                (holds instance ?GOV Government) 
                (holds subOrganization ?ORG ?GOV)))))
(holds subclass Government GovernmentOrganization)
(holds instance GovernmentFn UnaryFunction)
(holds domain GovernmentFn 1 GeopoliticalArea)
(holds range GovernmentFn Government)
(holds subclass MilitaryOrganization GovernmentOrganization)
(holds subclass PoliceOrganization GovernmentOrganization)
(holds subclass JudicialOrganization Organization)
(=> 
    (and 
        (holds instance ?ORG JudicialOrganization) 
        (holds subOrganization ?ORG ?GOV) 
        (holds instance ?GOV GovernmentOrganization)) 
    (holds instance ?ORG GovernmentOrganization))
(holds subclass EducationalOrganization Organization)
(holds subclass ReligiousOrganization Organization)
(holds subclass ReligiousOrganization BeliefGroup)
(holds subrelation subOrganization subCollection)
(holds instance subOrganization IrreflexiveRelation)
(holds instance subOrganization TransitiveRelation)
(holds domain subOrganization 1 Organization)
(holds domain subOrganization 2 Organization)
(holds instance citizen BinaryPredicate)
(holds instance citizen AsymmetricRelation)
(holds domain citizen 1 Human)
(holds domain citizen 2 Nation)
(holds subclass FieldOfStudy Proposition)
(holds subclass Procedure Proposition)
(holds subclass ComputerProgram Procedure)
(holds subclass Plan Procedure)
(=> 
    (and 
        (holds instance ?PLAN Plan) 
        (holds instance ?OBJ ContentBearingObject) 
        (holds containsInformation ?OBJ ?PLAN)) 
    (exists
        (?PLANNING) 
        (and 
            (holds instance ?PLANNING Planning) 
            (holds result ?PLANNING ?OBJ))))
(=> 
    (holds instance ?PLAN Plan) 
    (exists
        (?PURP) 
        (holds hasPurpose ?PLAN ?PURP)))
(holds subclass Argument Proposition)
(=> 
    (holds instance ?REASON Reasoning) 
    (exists
        (?ARGUMENT) 
        (and 
            (holds instance ?ARGUMENT Argument) 
            (holds realization ?REASON ?ARGUMENT))))
(=> 
    (holds instance ?ARGUMENT Argument) 
    (exists
        (?PREMISES ?CONCLUSION) 
        (and 
            (equal 
                (PremisesFn ?ARGUMENT) ?PREMISES) 
            (holds conclusion ?CONCLUSION ?ARGUMENT))))
(holds subclass DeductiveArgument Argument)
(holds partition DeductiveArgument ValidDeductiveArgument InvalidDeductiveArgument)
(holds subclass ValidDeductiveArgument DeductiveArgument)
(=> 
    (and 
        (holds instance ?ARGUMENT ValidDeductiveArgument) 
        (equal ?PREMISES 
            (PremisesFn ?ARGUMENT)) 
        (holds conclusion ?CONCLUSION ?ARGUMENT)) 
    (exists
        (?FORMULA1 ?FORMULA2) 
        (and 
            (holds containsInformation ?FORMULA1 ?PREMISES) 
            (holds containsInformation ?FORMULA2 ?CONCLUSION) 
            (holds entails ?PREMISES ?CONCLUSION))))
(holds subclass InvalidDeductiveArgument DeductiveArgument)
(holds subclass Explanation DeductiveArgument)
(holds instance premise BinaryPredicate)
(holds instance premise TotalValuedRelation)
(holds domain premise 1 Argument)
(holds domain premise 2 Proposition)
(holds instance PremisesFn UnaryFunction)
(holds domain PremisesFn Argument)
(holds range PremisesFn Proposition)
(=> 
    (and 
        (holds instance ?ARGUMENT Argument) 
        (equal ?PREMISES 
            (PremisesFn ?ARGUMENT))) 
    (<=> 
        (holds subProposition ?PROPOSITION ?PREMISES) 
        (holds premise ?ARGUMENT ?PROPOSITION)))
(holds instance conclusion BinaryPredicate)
(holds instance conclusion SingleValuedRelation)
(holds instance conclusion TotalValuedRelation)
(holds domain conclusion 1 Argument)
(holds domain conclusion 2 Proposition)
(holds instance consistent BinaryPredicate)
(holds instance consistent SymmetricRelation)
(holds domain consistent 1 Proposition)
(holds domain consistent 2 Proposition)
(holds instance orientation SpatialRelation)
(holds instance orientation TernaryPredicate)
(holds domain orientation 1 Object)
(holds domain orientation 2 Object)
(holds domain orientation 3 PositionalAttribute)
(=> 
    (and 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR1) 
        (holds contraryAttribute ?ROW_arg0) 
        (holds inList ?ATTR1 
            (ListFn ?ROW_arg0)) 
        (holds inList ?ATTR2 
            (ListFn ?ROW_arg0)) 
        (not 
            (equal ?ATTR1 ?ATTR2))) 
    (not 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR2)))
(=> 
    (and 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR1) 
        (holds contraryAttribute ?ROW_arg0 ?ROW_arg1) 
        (holds inList ?ATTR1 
            (ListFn ?ROW_arg0 ?ROW_arg1)) 
        (holds inList ?ATTR2 
            (ListFn ?ROW_arg0 ?ROW_arg1)) 
        (not 
            (equal ?ATTR1 ?ATTR2))) 
    (not 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR2)))
(=> 
    (and 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR1) 
        (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2) 
        (holds inList ?ATTR1 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
        (holds inList ?ATTR2 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2)) 
        (not 
            (equal ?ATTR1 ?ATTR2))) 
    (not 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR2)))
(=> 
    (and 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR1) 
        (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3) 
        (holds inList ?ATTR1 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
        (holds inList ?ATTR2 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3)) 
        (not 
            (equal ?ATTR1 ?ATTR2))) 
    (not 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR2)))
(=> 
    (and 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR1) 
        (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4) 
        (holds inList ?ATTR1 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
        (holds inList ?ATTR2 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4)) 
        (not 
            (equal ?ATTR1 ?ATTR2))) 
    (not 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR2)))
(=> 
    (and 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR1) 
        (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5) 
        (holds inList ?ATTR1 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
        (holds inList ?ATTR2 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5)) 
        (not 
            (equal ?ATTR1 ?ATTR2))) 
    (not 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR2)))
(=> 
    (and 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR1) 
        (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6) 
        (holds inList ?ATTR1 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
        (holds inList ?ATTR2 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6)) 
        (not 
            (equal ?ATTR1 ?ATTR2))) 
    (not 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR2)))
(=> 
    (and 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR1) 
        (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7) 
        (holds inList ?ATTR1 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
        (holds inList ?ATTR2 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7)) 
        (not 
            (equal ?ATTR1 ?ATTR2))) 
    (not 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR2)))
(=> 
    (and 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR1) 
        (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8) 
        (holds inList ?ATTR1 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
        (holds inList ?ATTR2 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8)) 
        (not 
            (equal ?ATTR1 ?ATTR2))) 
    (not 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR2)))
(=> 
    (and 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR1) 
        (holds contraryAttribute ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9) 
        (holds inList ?ATTR1 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
        (holds inList ?ATTR2 
            (ListFn ?ROW_arg0 ?ROW_arg1 ?ROW_arg2 ?ROW_arg3 ?ROW_arg4 ?ROW_arg5 ?ROW_arg6 ?ROW_arg7 ?ROW_arg8 ?ROW_arg9)) 
        (not 
            (equal ?ATTR1 ?ATTR2))) 
    (not 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR2)))
(holds instance direction CaseRole)
(holds domain direction 1 Process)
(holds domain direction 2 DirectionalAttribute)
(=> 
    (holds holdsDuring ?TIME `(holds direction ?PROC ?ATTR1)) 
    (forall
        (?ATTR2) 
        (=> 
            (holds holdsDuring ?TIME `(holds direction ?PROC ?ATTR2)) 
            (equal ?ATTR2 ?ATTR1))))
(holds instance faces BinaryPredicate)
(holds domain faces 1 Object)
(holds domain faces 2 DirectionalAttribute)
(=> 
    (holds holdsDuring ?TIME `(holds faces ?PROC ?ATTR1)) 
    (forall
        (?ATTR2) 
        (=> 
            (holds holdsDuring ?TIME `(holds faces ?PROC ?ATTR2)) 
            (equal ?ATTR2 ?ATTR1))))
(holds subclass TruthValue RelationalAttribute)
(=> 
    (and 
        (holds property ?ITEM ?VALUE) 
        (holds instance ?VALUE TruthValue)) 
    (or 
        (holds instance ?ITEM Sentence) 
        (holds instance ?ITEM Proposition)))
(holds instance True TruthValue)
(holds instance False TruthValue)
(holds contraryAttribute False True)
(holds instance Likely TruthValue)
(holds contraryAttribute Likely Unlikely)
(=> 
    (holds property ?FORMULA Likely) 
    (> 
        (ProbabilityFn `(holds true ?FORMULA True)) 
        (ProbabilityFn `(holds true ?FORMULA False))))
(holds instance Unlikely TruthValue)
(=> 
    (holds property ?FORMULA Unlikely) 
    (> 
        (ProbabilityFn `(holds true ?FORMULA False)) 
        (ProbabilityFn `(holds true ?FORMULA True))))
(holds subrelation true property)
(holds domain true 1 Sentence)
(holds domain true 2 TruthValue)
(holds subclass PositionalAttribute RelationalAttribute)
(holds subclass DirectionalAttribute PositionalAttribute)
(=> 
    (and 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR1) 
        (holds instance ?ATTR1 DirectionalAttribute) 
        (holds instance ?ATTR2 DirectionalAttribute) 
        (not 
            (equal ?ATTR1 ?ATTR2))) 
    (not 
        (holds orientation ?OBJ1 ?OBJ2 ?ATTR2)))
(=> 
    (and 
        (holds instance ?DIRECT DirectionalAttribute) 
        (holds orientation ?OBJ1 ?OBJ2 ?DIRECT) 
        (holds orientation ?OBJ2 ?OBJ3 ?DIRECT)) 
    (holds between ?OBJ1 ?OBJ2 ?OBJ33))
(holds instance North DirectionalAttribute)
(holds contraryAttribute North South East West)
(holds instance South DirectionalAttribute)
(<=> 
    (holds orientation ?OBJ1 ?OBJ2 North) 
    (holds orientation ?OBJ2 ?OBJ1 South))
(holds instance East DirectionalAttribute)
(holds instance West DirectionalAttribute)
(<=> 
    (holds orientation ?OBJ1 ?OBJ2 East) 
    (holds orientation ?OBJ2 ?OBJ1 West))
(holds instance Vertical PositionalAttribute)
(<=> 
    (holds orientation ?OBJ1 ?OBJ2 Vertical) 
    (holds orientation ?OBJ2 ?OBJ1 Vertical))
(holds instance Horizontal PositionalAttribute)
(holds contraryAttribute Horizontal Vertical)
(<=> 
    (holds orientation ?OBJ1 ?OBJ2 Horizontal) 
    (holds orientation ?OBJ2 ?OBJ1 Horizontal))
(holds instance Above PositionalAttribute)
(holds contraryAttribute Above Below)
(=> 
    (holds orientation ?OBJ1 ?OBJ2 Above) 
    (not 
        (holds connected ?OBJ1 ?OBJ2)))
(holds instance Below PositionalAttribute)
(<=> 
    (holds orientation ?OBJ1 ?OBJ2 Below) 
    (or 
        (holds orientation ?OBJ2 ?OBJ1 On) 
        (holds orientation ?OBJ2 ?OBJ1 Above)))
(holds instance Adjacent PositionalAttribute)
(<=> 
    (holds orientation ?OBJ1 ?OBJ2 Adjacent) 
    (or 
        (holds orientation ?OBJ1 ?OBJ2 Near) 
        (holds connected ?OBJ1 ?OBJ2)))
(holds instance Left PositionalAttribute)
(holds instance Right PositionalAttribute)
(holds contraryAttribute Right Left)
(<=> 
    (holds orientation ?OBJ1 ?OBJ2 Right) 
    (holds orientation ?OBJ2 ?OBJ1 Left))
(holds instance Near PositionalAttribute)
(=> 
    (holds orientation ?OBJ1 ?OBJ2 Near) 
    (not 
        (holds connected ?OBJ1 ?OBJ2)))
(=> 
    (holds orientation ?OBJ1 ?OBJ2 Near) 
    (holds orientation ?OBJ2 ?OBJ1 Near))
(holds instance On PositionalAttribute)
(=> 
    (holds orientation ?OBJ1 ?OBJ2 On) 
    (holds connected ?OBJ1 ?OBJ2))
(=> 
    (holds orientation ?OBJ1 ?OBJ2 On) 
    (holds located ?OBJ1 ?OBJ2))
(=> 
    (holds orientation ?OBJ1 ?OBJ2 On) 
    (not 
        (holds orientation ?OBJ2 ?OBJ1 On)))
(holds subclass TimeZone RelationalAttribute)
(holds instance CoordinatedUniversalTimeZone TimeZone)
(holds instance PacificTimeZone TimeZone)
(=> 
    (equal 
        (RelativeTimeFn ?TIME1 PacificTimeZone) ?TIME2) 
    (equal ?TIME2 
        (AdditionFn ?TIME1 8)))
(holds instance MountainTimeZone TimeZone)
(=> 
    (equal 
        (RelativeTimeFn ?TIME1 MountainTimeZone) ?TIME2) 
    (equal ?TIME2 
        (AdditionFn ?TIME1 7)))
(holds instance CentralTimeZone TimeZone)
(=> 
    (equal 
        (RelativeTimeFn ?TIME1 CentralTimeZone) ?TIME2) 
    (equal ?TIME2 
        (AdditionFn ?TIME1 6)))
(holds instance EasternTimeZone TimeZone)
(=> 
    (equal 
        (RelativeTimeFn ?TIME1 EasternTimeZone) ?TIME2) 
    (equal ?TIME2 
        (AdditionFn ?TIME1 5)))
(holds instance RelativeTimeFn BinaryFunction)
(holds instance RelativeTimeFn TemporalRelation)
(holds instance RelativeTimeFn TotalValuedRelation)
(holds domain RelativeTimeFn 1 TimePosition)
(holds domain RelativeTimeFn 2 TimeZone)
(holds range RelativeTimeFn TimePosition)
(holds subclass SocialRole RelationalAttribute)
(=> 
    (and 
        (holds attribute ?PERSON ?ATTRIBUTE) 
        (holds instance ?ATTRIBUTE SocialRole)) 
    (holds instance ?PERSON Human))
(holds instance Unemployed SocialRole)
(<=> 
    (forall
        (?ORG) 
        (not 
            (holds employs ?ORG ?PERSON))) 
    (holds attribute ?PERSON Unemployed))
(holds subclass Position SocialRole)
(holds instance occupiesPosition TernaryPredicate)
(holds domain occupiesPosition 1 Human)
(holds domain occupiesPosition 2 Position)
(holds domain occupiesPosition 3 Organization)
(=> 
    (holds occupiesPosition ?AGENT ?POSITION ?ORG) 
    (holds attribute ?AGENT ?POSITION))
(<=> 
    (holds employs ?ORG ?PERSON) 
    (exists
        (?POSITION) 
        (holds occupiesPosition ?PERSON ?POSITION ?ORG)))
(holds subclass NormativeAttribute RelationalAttribute)
(holds instance modalAttribute BinaryPredicate)
(holds instance modalAttribute AsymmetricRelation)
(holds instance modalAttribute IrreflexiveRelation)
(holds subrelation modalAttribute property)
(holds domain modalAttribute 1 Formula)
(holds domain modalAttribute 2 NormativeAttribute)
(=> 
    (and 
        (holds modalAttribute ?FORMULA1 ?PROP) 
        (holds entails ?FORMULA1 ?FORMULA2)) 
    (holds modalAttribute ?FORMULA2 ?PROP))
(=> 
    (holds modalAttribute ?FORMULA Obligation) 
    (exists
        (?AGENT) 
        (holds holdsObligation ?FORMULA ?AGENT)))
(=> 
    (holds modalAttribute ?FORMULA Permission) 
    (exists
        (?AGENT) 
        (holds holdsRight ?FORMULA ?AGENT)))
(=> 
    (holds holdsRight ?FORMULA ?AGENT) 
    (holds modalAttribute ?FORMULA Possibility))
(=> 
    (holds holdsObligation ?FORMULA ?AGENT) 
    (holds modalAttribute ?FORMULA Obligation))
(holds subclass SubjectiveAssessmentAttribute NormativeAttribute)
(holds disjoint SubjectiveAssessmentAttribute ObjectiveNorm)
(holds subclass ObjectiveNorm NormativeAttribute)
(holds subclass ContestAttribute ObjectiveNorm)
(=> 
    (and 
        (holds property ?THING ?ATTR) 
        (holds instance ?ATTR ContestAttribute)) 
    (exists
        (?CONTEST) 
        (and 
            (holds instance ?CONTEST Contest) 
            (or 
                (holds agent ?CONTEST ?THING) 
                (holds patient ?CONTEST ?THING) 
                (holds subProcess ?THING ?CONTEST)))))
(holds subclass AlethicAttribute ObjectiveNorm)
(holds instance Possibility AlethicAttribute)
(holds instance Necessity AlethicAttribute)
(<=> 
    (holds modalAttribute ?FORMULA Necessity) 
    (not 
        (holds modalAttribute `(not ?FORMULA) Possibility)))
(=> 
    (holds modalAttribute ?FORMULA Necessity) 
    (holds modalAttribute ?FORMULA Possibility))
(holds subclass DeonticAttribute ObjectiveNorm)
(holds instance Permission DeonticAttribute)
(holds instance Obligation DeonticAttribute)
(<=> 
    (holds modalAttribute ?FORMULA Obligation) 
    (not 
        (holds modalAttribute `(not ?FORMULA) Permission)))
(=> 
    (holds modalAttribute ?FORMULA Obligation) 
    (holds modalAttribute ?FORMULA Permission))
(holds subAttribute Law Obligation)
(holds subAttribute Promise Obligation)
(=> 
    (holds property ?ENTITY Promise) 
    (or 
        (holds property ?ENTITY Contract) 
        (holds property ?ENTITY NakedPromise)))
(holds subAttribute Contract Promise)
(holds subAttribute PurchaseContract Contract)
(holds subAttribute ServiceContract Contract)
(holds subAttribute Warranty ServiceContract)
(holds subAttribute NakedPromise Promise)
(holds contraryAttribute NakedPromise Contract)
(holds subclass PhysicalState InternalAttribute)
(holds contraryAttribute Solid Liquid Gas)
(holds exhaustiveAttribute PhysicalState Solid Fluid Liquid Gas)
(holds instance Solid PhysicalState)
(holds instance Fluid PhysicalState)
(holds instance Liquid PhysicalState)
(holds subAttribute Liquid Fluid)
(=> 
    (holds instance ?OBJ Solution) 
    (holds attribute ?OBJ Liquid))
(=> 
    (and 
        (holds instance ?MOTION LiquidMotion) 
        (holds patient ?MOTION ?OBJ)) 
    (holds attribute ?OBJ Liquid))
(holds instance Gas PhysicalState)
(holds subAttribute Gas Fluid)
(<=> 
    (holds instance ?OBJ Substance) 
    (exists
        (?ATTR) 
        (and 
            (holds instance ?ATTR PhysicalState) 
            (holds attribute ?OBJ ?ATTR))))
(=> 
    (and 
        (holds instance ?MOTION GasMotion) 
        (holds patient ?MOTION ?OBJ)) 
    (holds attribute ?OBJ Gas))
(holds subclass PerceptualAttribute InternalAttribute)
(=> 
    (and 
        (holds instance ?PERCEPTION Perception) 
        (holds patient ?PERCEPTION ?OBJ)) 
    (exists
        (?PROP) 
        (and 
            (holds instance ?PROP PerceptualAttribute) 
            (holds attribute ?OBJ ?PROP))))
(holds subclass TasteAttribute PerceptualAttribute)
(=> 
    (holds instance ?OBJ Food) 
    (exists
        (?ATTR) 
        (and 
            (holds instance ?ATTR TasteAttribute) 
            (holds attribute ?OBJ ?ATTR))))
(holds subclass OlfactoryAttribute PerceptualAttribute)
(holds subclass VisualAttribute PerceptualAttribute)
(holds instance Illuminated VisualAttribute)
(holds instance Unilluminated VisualAttribute)
(holds contraryAttribute Unilluminated Illuminated)
(holds subclass ColorAttribute VisualAttribute)
(holds subclass PrimaryColor ColorAttribute)
(holds instance Red PrimaryColor)
(holds instance Blue PrimaryColor)
(holds instance Yellow PrimaryColor)
(holds instance White PrimaryColor)
(holds instance Black PrimaryColor)
(holds instance Monochromatic ColorAttribute)
(=> 
    (and 
        (holds attribute ?OBJ Monochromatic) 
        (holds superficialPart ?PART ?OBJ) 
        (holds attribute ?PART ?COLOR) 
        (holds instance ?COLOR PrimaryColor)) 
    (forall
        (?ELEMENT) 
        (=> 
            (holds superficialPart ?ELEMENT ?OBJ) 
            (holds attribute ?ELEMENT ?COLOR))))
(=> 
    (holds instance ?OBJ Object) 
    (or 
        (holds attribute ?OBJ Monochromatic) 
        (holds attribute ?OBJ Polychromatic)))
(holds instance Polychromatic ColorAttribute)
(holds contraryAttribute Polychromatic Monochromatic)
(=> 
    (holds attribute ?OBJ Polychromatic) 
    (exists
        (?PART1 ?PART2 ?COLOR1 ?COLOR2) 
        (and 
            (holds superficialPart ?PART1 ?OBJ) 
            (holds superficialPart ?PART2 ?OBJ) 
            (holds attribute ?PART1 ?COLOR1) 
            (holds attribute ?PART2 ?COLOR2) 
            (holds instance ?COLOR1 ColorAttribute) 
            (holds instance ?COLOR2 ColorAttribute) 
            (not 
                (equal ?COLOR1 ?COLOR2)))))
(holds subclass ShapeAttribute InternalAttribute)
(holds instance Pliable ShapeAttribute)
(=> 
    (exists
        (?CHANGE) 
        (and 
            (holds instance ?CHANGE ShapeChange) 
            (holds patient ?CHANGE ?OBJ))) 
    (holds attribute ?OBJ Pliable))
(holds instance Rigid ShapeAttribute)
(holds contraryAttribute Rigid Pliable)
(=> 
    (holds instance ?OBJ SelfConnectedObject) 
    (or 
        (holds attribute ?OBJ Pliable) 
        (holds attribute ?OBJ Rigid)))
(holds subclass GeometricFigure ShapeAttribute)
(holds partition GeometricFigure GeometricPoint OneDimensionalFigure TwoDimensionalFigure ThreeDimensionalFigure)
(holds subclass GeometricPoint GeometricFigure)
(holds subclass OneDimensionalFigure GeometricFigure)
(holds subclass TwoDimensionalFigure GeometricFigure)
(holds partition TwoDimensionalFigure OpenTwoDimensionalFigure ClosedTwoDimensionalFigure)
(holds subclass OpenTwoDimensionalFigure TwoDimensionalFigure)
(holds subclass TwoDimensionalAngle OpenTwoDimensionalFigure)
(holds subclass RightAngle TwoDimensionalAngle)
(=> 
    (holds instance ?ANGLE RightAngle) 
    (holds angularMeasure ?ANGLE 
        (MeasureFn 90 AngularDegree)))
(holds subclass ClosedTwoDimensionalFigure TwoDimensionalFigure)
(holds subclass Polygon ClosedTwoDimensionalFigure)
(=> 
    (holds instance ?POLYGON Polygon) 
    (=> 
        (holds geometricPart ?PART ?POLYGON) 
        (or 
            (holds sideOfFigure ?PART ?POLYGON) 
            (exists
                (?SIDE) 
                (and 
                    (holds sideOfFigure ?SIDE ?POLYGON) 
                    (holds geometricPart ?PART ?SIDE))))))
(holds subclass Triangle Polygon)
(=> 
    (holds instance ?TRIANGLE Triangle) 
    (equal 
        (CardinalityFn 
            (KappaFn ?SIDE `(holds sideOfFigure ?SIDE ?TRIANGLE))) 3))
(holds subclass Quadrilateral Polygon)
(=> 
    (holds instance ?QUAD Quadrilateral) 
    (equal 
        (CardinalityFn 
            (KappaFn ?SIDE `(holds sideOfFigure ?SIDE ?QUAD))) 4))
(holds subclass Rectangle Quadrilateral)
(=> 
    (holds instance ?RECTANGLE Rectangle) 
    (=> 
        (holds angleOfFigure ?ANGLE ?RECTANGLE) 
        (holds instance ?ANGLE RightAngle)))
(holds subclass Square Rectangle)
(=> 
    (holds instance ?SQUARE Square) 
    (exists
        (?LENGTH) 
        (forall
            (?SIDE) 
            (=> 
                (holds sideOfFigure ?SIDE ?SQUARE) 
                (holds lineMeasure ?SIDE ?LENGTH)))))
(holds subclass Circle ClosedTwoDimensionalFigure)
(=> 
    (holds instance ?CIRCLE Circle) 
    (exists
        (?RADIUS) 
        (holds radius ?CIRCLE ?RADIUS)))
(holds subclass ThreeDimensionalFigure GeometricFigure)
(holds instance geometricPart BinaryPredicate)
(holds instance geometricPart PartialOrderingRelation)
(holds domain geometricPart 1 GeometricFigure)
(holds domain geometricPart 2 GeometricFigure)
(holds subrelation pointOfFigure geometricPart)
(holds domain pointOfFigure 1 GeometricPoint)
(holds domain pointOfFigure 2 GeometricFigure)
(holds subrelation sideOfFigure geometricPart)
(holds domain sideOfFigure 1 OneDimensionalFigure)
(holds domain sideOfFigure 2 GeometricFigure)
(holds subrelation angleOfFigure geometricPart)
(holds domain angleOfFigure 1 TwoDimensionalAngle)
(holds domain angleOfFigure 2 GeometricFigure)
(holds instance pointOfIntersection TernaryPredicate)
(holds domain pointOfIntersection 1 OneDimensionalFigure)
(holds domain pointOfIntersection 2 OneDimensionalFigure)
(holds domain pointOfIntersection 3 GeometricPoint)
(=> 
    (holds pointOfIntersection ?FIGURE1 ?FIGURE2 ?POINT) 
    (and 
        (holds pointOfFigure ?POINT ?FIGURE1) 
        (holds pointOfFigure ?POINT ?FIGURE2)))
(holds instance parallel BinaryPredicate)
(holds domain parallel 1 OneDimensionalFigure)
(holds domain parallel 2 OneDimensionalFigure)
(=> 
    (holds parallel ?LINE1 ?LINE2) 
    (not 
        (exists
            (?POINT) 
            (holds pointOfIntersection ?LINE1 ?LINE2 ?POINT))))
(holds instance angularMeasure BinaryPredicate)
(holds instance angularMeasure TotalValuedRelation)
(holds domain angularMeasure 1 TwoDimensionalAngle)
(holds domain angularMeasure 2 PlaneAngleMeasure)
(holds instance lineMeasure BinaryPredicate)
(holds instance lineMeasure TotalValuedRelation)
(holds domain lineMeasure 1 OneDimensionalFigure)
(holds domain lineMeasure 2 LengthMeasure)
(holds instance geometricDistance TernaryPredicate)
(holds instance geometricDistance SingleValuedRelation)
(holds instance geometricDistance TotalValuedRelation)
(holds domain geometricDistance 1 GeometricPoint)
(holds domain geometricDistance 2 GeometricPoint)
(holds domain geometricDistance 3 LengthMeasure)
(=> 
    (holds geometricDistance ?POINT1 ?POINT2 ?LENGTH) 
    (holds geometricDistance ?POINT2 ?POINT1 ?LENGTH))
(holds instance radius BinaryPredicate)
(holds instance radius SingleValuedRelation)
(holds instance radius TotalValuedRelation)
(holds domain radius 1 Circle)
(holds domain radius 2 LengthMeasure)
(=> 
    (holds radius ?CIRCLE ?RADIUS) 
    (exists
        (?POINT) 
        (forall
            (?PART) 
            (=> 
                (holds pointOfFigure ?PART ?CIRCLE) 
                (holds geometricDistance ?PART ?POINT ?RADIUS)))))
(holds instance diameter BinaryPredicate)
(holds instance diameter SingleValuedRelation)
(holds instance diameter TotalValuedRelation)
(holds domain diameter 1 Circle)
(holds domain diameter 2 LengthMeasure)
(=> 
    (holds diameter ?CIRCLE ?LENGTH) 
    (exists
        (?HALF) 
        (and 
            (holds radius ?CIRCLE ?HALF) 
            (equal 
                (MultiplicationFn ?HALF 2) ?LENGTH))))
(holds instance tangent BinaryPredicate)
(holds domain tangent 1 OneDimensionalFigure)
(holds domain tangent 2 Circle)
(=> 
    (holds tangent ?LINE ?CIRCLE) 
    (exists
        (?POINT1) 
        (and 
            (holds pointOfFigure ?POINT1 ?LINE) 
            (holds pointOfFigure ?POINT1 ?CIRCLE) 
            (forall
                (?POINT2) 
                (=> 
                    (and 
                        (holds pointOfFigure ?POINT2 ?LINE) 
                        (holds pointOfFigure ?POINT2 ?CIRCLE)) 
                    (equal ?POINT1 ?POINT2))))))
(holds subclass TextureAttribute PerceptualAttribute)
(holds subclass TextureAttribute ShapeAttribute)
(=> 
    (and 
        (holds instance ?ATTRIBUTE TextureAttribute) 
        (holds attribute ?OBJ ?ATTRIBUTE) 
        (holds surface ?SURFACE ?OBJ)) 
    (holds attribute ?SURFACE ?ATTRIBUTE))
(holds subclass SoundAttribute PerceptualAttribute)
(holds subclass SaturationAttribute InternalAttribute)
(holds instance Dry SaturationAttribute)
(holds contraryAttribute Dry Damp)
(=> 
    (holds attribute ?OBJ Dry) 
    (not 
        (exists
            (?SUBOBJ) 
            (and 
                (holds part ?SUBOBJ ?OBJ) 
                (holds attribute ?SUBOBJ Liquid)))))
(holds instance Damp SaturationAttribute)
(holds instance Wet SaturationAttribute)
(holds subAttribute Wet Damp)
(=> 
    (holds attribute ?OBJ Wet) 
    (forall
        (?PART) 
        (=> 
            (holds part ?PART ?OBJ) 
            (exists
                (?SUBPART) 
                (and 
                    (holds part ?SUBPART ?PART) 
                    (holds attribute ?SUBPART Liquid))))))
(holds subclass BreakabilityAttribute InternalAttribute)
(holds instance Fragile BreakabilityAttribute)
(holds instance Unbreakable BreakabilityAttribute)
(holds contraryAttribute Unbreakable Fragile)
(=> 
    (holds attribute ?OBJ Unbreakable) 
    (not 
        (exists
            (?DAMAGE) 
            (and 
                (holds instance ?DAMAGE Damaging) 
                (holds patient ?DAMAGE ?OBJ)))))
(holds subclass BiologicalAttribute InternalAttribute)
(=> 
    (and 
        (holds attribute ?ORG ?ATT) 
        (holds instance ?ATT BiologicalAttribute)) 
    (holds instance ?ORG Organism))
(holds subclass BodyPosition BiologicalAttribute)
(=> 
    (holds instance ?ANIMAL Animal) 
    (or 
        (exists
            (?MOTION) 
            (and 
                (holds instance ?MOTION BodyMotion) 
                (holds agent ?MOTION ?ANIMAL))) 
        (exists
            (?ATTR) 
            (and 
                (holds instance ?ATTR BodyPosition) 
                (holds attribute ?ANIMAL ?ATTR)))))
(holds instance Standing BodyPosition)
(=> 
    (and 
        (holds instance ?AMBULATE Ambulating) 
        (holds agent ?AMBULATE ?AGENT)) 
    (holds attribute ?AGENT Standing))
(holds instance Sitting BodyPosition)
(holds instance Prostrate BodyPosition)
(holds subclass AnimacyAttribute BiologicalAttribute)
(holds exhaustiveAttribute AnimacyAttribute Living Dead)
(holds instance Living AnimacyAttribute)
(=> 
    (and 
        (holds instance ?ORGANISM Organism) 
        (holds agent ?PROCESS ?ORGANISM)) 
    (holds holdsDuring 
        (WhenFn ?PROCESS) `(holds attribute ?ORGANISM Living)))
(holds instance Dead AnimacyAttribute)
(holds subAttribute Dead Unconscious)
(holds contraryAttribute Dead Living)
(=> 
    (holds instance ?ORG Organism) 
    (exists
        (?ATTR) 
        (and 
            (holds instance ?ATTR AnimacyAttribute) 
            (holds attribute ?ORG ?ATTR))))
(holds subclass SexAttribute BiologicalAttribute)
(holds exhaustiveAttribute SexAttribute Female Male)
(holds instance Female SexAttribute)
(=> 
    (and 
        (holds instance ?BODY ReproductiveBody) 
        (holds part ?BODY ?ORG) 
        (holds instance ?ORG Organism)) 
    (holds attribute ?ORG Female))
(=> 
    (holds instance ?WOMAN Woman) 
    (holds attribute ?WOMAN Female))
(holds instance Male SexAttribute)
(holds contraryAttribute Male Female)
(=> 
    (holds instance ?ANIMAL Animal) 
    (exists
        (?ATTR) 
        (and 
            (holds instance ?ATTR SexAttribute) 
            (holds attribute ?ANIMAL ?ATTR))))
(=> 
    (holds instance ?MAN Man) 
    (holds attribute ?MAN Male))
(holds subclass DevelopmentalAttribute BiologicalAttribute)
(holds exhaustiveAttribute DevelopmentalAttribute FullyFormed NonFullyFormed)
(holds instance FullyFormed DevelopmentalAttribute)
(=> 
    (holds attribute ?OBJ FullyFormed) 
    (exists
        (?GROWTH) 
        (and 
            (holds instance ?GROWTH Growth) 
            (holds experiencer ?GROWTH ?OBJ) 
            (holds holdsDuring 
                (BeginFn 
                    (WhenFn ?OBJ)) `(holds attribute ?OBJ NonFullyFormed)))))
(holds instance NonFullyFormed DevelopmentalAttribute)
(holds contraryAttribute NonFullyFormed FullyFormed)
(holds successorAttribute NonFullyFormed FullyFormed)
(=> 
    (holds instance ?ORG Organism) 
    (exists
        (?ATTR) 
        (and 
            (holds instance ?ATTR DevelopmentalAttribute) 
            (holds attribute ?ORG ?ATTR))))
(holds instance Larval DevelopmentalAttribute)
(holds subAttribute Larval NonFullyFormed)
(=> 
    (holds holdsDuring ?TIME `(holds attribute ?ORG Larval)) 
    (holds holdsDuring 
        (PastFn ?TIME) `(exists
            (?BIRTH) 
            (and 
                (holds instance ?BIRTH Birth) 
                (holds experiencer ?BIRTH ?ORG)))))
(holds instance Embryonic DevelopmentalAttribute)
(holds subAttribute Embryonic NonFullyFormed)
(holds contraryAttribute Embryonic Larval)
(=> 
    (holds attribute ?ORG Embryonic) 
    (exists
        (?BODY) 
        (and 
            (holds instance ?BODY ReproductiveBody) 
            (holds located ?ORG ?BODY))))
(=> 
    (holds holdsDuring ?TIME `(holds attribute ?ORG Embryonic)) 
    (holds holdsDuring ?TIME `(not 
            (exists
                (?BIRTH) 
                (and 
                    (holds instance ?BIRTH Birth) 
                    (holds experiencer ?BIRTH ?ORG))))))
(holds subclass DiseaseOrSyndrome BiologicalAttribute)
(holds subclass PsychologicalAttribute BiologicalAttribute)
(holds partition PsychologicalAttribute StateOfMind TraitAttribute)
(=> 
    (holds instance ?ATTR PsychologicalAttribute) 
    (=> 
        (holds holdsDuring ?TIME `(holds attribute ?ORGANISM ?ATTR)) 
        (holds holdsDuring ?TIME `(holds attribute ?ORGANISM Living))))
(=> 
    (and 
        (holds instance ?ATTR PsychologicalAttribute) 
        (holds attribute ?AGENT ?ATTR)) 
    (holds instance ?AGENT SentientAgent))
(holds subclass StateOfMind PsychologicalAttribute)
(holds subclass EmotionalState StateOfMind)
(holds subclass ConsciousnessAttribute StateOfMind)
(<=> 
    (and 
        (holds instance ?AGENT SentientAgent) 
        (holds attribute ?AGENT Living)) 
    (exists
        (?ATTR) 
        (and 
            (holds instance ?ATTR ConsciousnessAttribute) 
            (holds attribute ?AGENT ?ATTR))))
(holds subAttribute Asleep Unconscious)
(holds instance Unconscious ConsciousnessAttribute)
(holds contraryAttribute Unconscious Awake)
(holds instance Awake ConsciousnessAttribute)
(=> 
    (or 
        (holds attribute ?AGENT Asleep) 
        (holds attribute ?AGENT Awake)) 
    (holds attribute ?AGENT Living))
(holds subclass TraitAttribute PsychologicalAttribute)
(holds subclass PsychologicalDysfunction PsychologicalAttribute)
(holds subclass PsychologicalDysfunction DiseaseOrSyndrome)
(<=> 
    (holds instance ?ENTITY 
        (UnionFn ?CLASS1 ?CLASS2)) 
    (or 
        (holds instance ?ENTITY ?CLASS1) 
        (holds instance ?ENTITY ?CLASS2)))
(<=> 
    (holds instance ?ENTITY 
        (IntersectionFn ?CLASS1 ?CLASS2)) 
    (and 
        (holds instance ?ENTITY ?CLASS1) 
        (holds instance ?ENTITY ?CLASS2)))
(<=> 
    (holds instance ?ENTITY 
        (ComplementFn ?CLASS)) 
    (not 
        (holds instance ?ENTITY ?CLASS)))
(=> 
    (and 
        (holds instance ?CLASS1 SetOrClass) 
        (holds instance ?CLASS2 SetOrClass)) 
    (equal 
        (RelativeComplementFn ?CLASS1 ?CLASS2) 
        (IntersectionFn ?CLASS1 
            (ComplementFn ?CLASS2))))
(<=> 
    (holds instance ?ENTITY 
        (GeneralizedUnionFn ?SUPERCLASS)) 
    (exists
        (?CLASS) 
        (and 
            (holds instance ?CLASS ?SUPERCLASS) 
            (holds instance ?ENTITY ?CLASS))))
(<=> 
    (holds instance ?ENTITY 
        (GeneralizedIntersectionFn ?SUPERCLASS)) 
    (forall
        (?CLASS) 
        (=> 
            (holds instance ?CLASS ?SUPERCLASS) 
            (holds instance ?ENTITY ?CLASS))))
(<=> 
    (holds instance ?SUBCLASS 
        (PowerSetFn ?CLASS)) 
    (holds subclass ?SUBCLASS ?CLASS))
