;;; some additions that might prove useful for inference

;;; these are not thoroughly tested and might require modification for
;;; inclusion into SUMO


;;; subProcess vs. CaseRoles

(=>
  (and
    (subProcess ?SUB ?SUPER)
    (agent ?SUB ?X))
  (agent ?SUPER ?X))

(=>
  (and
    (subProcess ?SUB ?SUPER)
    (instrument ?SUB ?X))
  (instrument ?SUPER ?X))

(=>
  (and
    (subProcess ?SUB ?SUPER)
    (experiencer ?SUB ?X))
  (experiencer ?SUPER ?X))

(=>
  (and
    (subProcess ?SUB ?SUPER)
    (resource ?SUB ?X))
  (resource ?SUPER ?X))

(=>
  (and
    (subProcess ?SUB ?SUPER)
    (resourceUsed ?SUB ?X))
  (resourceUsed ?SUPER ?X))

(=>
  (and
    (subProcess ?SUB ?SUPER)
    (dataProcessed ?SUB ?X))
  (dataProcessed ?SUPER ?X))

(=>
  (and
    (subProcess ?SUB ?SUPER)
    (experimentalControl  ?SUB ?X))
  (experimentalControl  ?SUPER ?X))



;;; subProcess vs. other relations between Processes

;; Inhibition of concrete Processes

(instance ProcessInhibited RelationalAttribute)

(documentation ProcessInhibited "This &%Attribute means that some
specific &%Process is inhibited by some other &%Process, e.g., a
&%Translocation along some path is inhibited by &%Barriers on that
path.")

;; If a subProcess is hindered by an external process so is the super
;; process

(=>
  (and
    (subProcess ?SUB ?SUPER)
    (attribute ?SUB ProcessInhibited))
  (attribute ?SUPER ProcessInhibited))

;;; transitivity of Translocation

(=>
  (and
    (instance ?T1 Translocation)
    (instance ?T2 Translocation)
    (origin ?T1 ?O1)
    (origin ?T2 ?D1)
    (destination ?T1 ?D1)
    (destination ?T2 ?D2)
    (experiencer ?T1 ?P)
    (experiencer ?T2 ?P))
  (exists (?T)
    (and
      (instance ?T Translocation)
      (origin ?T ?O1)
      (destination ?T ?D2)
      (subProcess ?T1 ?T)
      (subProcess ?T2 ?T)
      (experiencer ?T ?P)
      (starts
        (WhenFn ?T1)
        (WhenFn ?T))
      (finishes
        (WhenFn ?T2)
        (WhenFn ?T)))))


;;; if a group or organization takes part in a process so does every member and
;;; subOrganization and subCollection

(=>
  (and
    (instance ?REL CaseRole)
    (holds ?REL ?PROCESS ?COLL)
    (or
      (member ?M ?COLL)
      (subCollection ?M ?COLL)))
  (holds ?REL ?PROCESS ?M))
    
;; if every member of a group takes part in a process so does the
;; whole group removed this rule because it is really dangerous when
;; open world semantics is implemented: You cann never be sure to have
;; all the members of a collection at hand!

;;(=>
;;  (and
;;    (instance ?REL CaseRole)
;;    (forall (?P)
;;      (=>
;;        (member ?P ?COLL)
;;        (holds ?REL ?PROCESS ?P))))
;;  (holds ?REL ?PROCESS ?COLL))

;; if a group is located somewhere so is every subgroup and member

(=>
  (and
    (located ?COLL ?PLACE)
    (member ?M ?COLL))
  (located ?M ?PLACE))


;; if the origin of a process is some location then the process is
;; partly located at this location

(=>
  (origin ?PROCESS ?LOC)
  (partlyLocated ?PROCESS ?LOC))

;; if the destination of a process is some location then the process is
;; partly located at this location

(=>
  (destination ?PROCESS ?LOC)
  (partlyLocated ?PROCESS ?LOC))

;; LandTransportation is over Land

(=>
  (and
    (instance ?T LandTransportation)
    (path ?T ?P))
  (instance ?P LandTransitway))

;; WaterTransportation is through Water

(=>
  (and
    (instance ?T WaterTransportation)
    (path ?T ?P))
  (instance ?P Waterway))

;; AirTransportation is through Air

(=>
  (and
    (instance ?T AirTransportation)
    (path ?T ?P))
  (instance ?P AirTransitway))

