;; ============================================================================
;;                  	 REARDEN COMMERCE, INC.
;;                	Catalog and Selling Ontology
;; ============================================================================

;; Created by: Stephen Pinto (spinto [at] reardencommerce [dot] com)
;; Created on: 
;; Last modified: August 4, 2011
;; Modified by: Karen Joy Nomorosa (karen.nomorosa [at] reardencommerce [dot] com)

;; Description:  This ontology creates relationships and related concepts that map to
;; Wikipeda Infobox relations if they are not already present in SUMO and other KIFs

;; Access to and use of these products is governed by the GNU General Public 
;; License <http://www.gnu.org/copyleft/gpl.html>. 
;; By using these products, you agree to be bound by the terms 
;; of the GPL.

;; We ask the people using or referencing this work cite our primary paper:

;; Niles, I., and Pease, A.  2001.  Towards a Standard Upper Ontology.  In 
;; Proceedings of the 2nd International Conference on Formal Ontology in 
;; Information Systems (FOIS-2001), Chris Welty and Barry Smith, eds, 
;; Ogunquit, Maine, October 17-19, 2001.  See also http://www.ontologyportal.org

;;============================================================
;;                   AIRLINE FRAME RELATIONS 
;;============================================================
;;               HELPER TERMS:

(subclass FlyingAircraft Driving)
(documentation FlyingAircraft EnglishLanguage "Controlling the direction, speed, and altitude of an &%Aircraft")
(termFormat EnglishLanguage FlyingAircraft "Flying")
(=>
  (and
    (instance ?FLY FlyingAircraft)
    (instance ?AIRCRAFT Aircraft)
    (patient ?FLY ?AIRCRAFT))
  (exists (?FLIGHT)
    (and
      (instance ?FLIGHT AirTransportation)
      (subProcess ?FLIGHT ?FLY))))

(instance Pilot SkilledOccupation)
(documentation Pilot EnglishLanguage "Any &%SkilledOccupation that involves &%Driving an &%Aircraft")
(termFormat EnglishLanguage Pilot "Pilot")
(=>
  (and
    (instance ?PILOT Human)
    (attribute ?PILOT Pilot))
  (hasSkill FlyingAircraft ?PILOT))

  
(subclass Fleet Collection)
(documentation Fleet EnglishLanguage "A &%Collection of &%Vehicle")
(termFormat EnglishLanguage Fleet "Fleet")
(=>
  (instance ?FLEET Fleet)
  (memberType ?FLEET Vehicle))

  
(instance FederalAviationAdministration GovernmentOrganization)
(acronym FAA FederalAviationAdministration)
(termFormat EnglishLanguage FederalAviationAdministration "Federal Aviation Administration")

 
(instance InternationalAirTransportAssociation InternationalOrganization)
(acronym IATA InternationalAirTransportAssociation)
(termFormat EnglishLanguage InternationalAirTransportAssociation "International Air Transport Association")

;; See Merge.kif line 9196 for further definitions of Transportation 
(=>
  (instance ?T Transportation)
  (exists (?O ?D ?P)
    (and
      (instance ?O Object)
      (instance ?D Object)
      (instance ?P Object)
      (path ?T ?P)
      (origin ?T ?O)
      (destination ?T ?D))))


(subclass AirTransportationService TransportationService)
(documentation AirTransportationService EnglishLanguage "A &%TransportationService provided by an 
&%Airline that involves flying a customer from one &%Airport to another &%Airport.")
(termFormat EnglishLanguage AirTransportationService "Air Transportation Service")
(=>
  (instance ?SERVICE AirTransportationService)
  (exists (?PLANE ?PILOT ?AIRLINE ?CUSTOMER ?FLIGHT)
    (and
      (instance ?PLANE Airplane)
      (instance ?PILOT Human)
      (attribute ?PILOT Pilot)
      (instance ?AIRLINE Airline)
      (instance ?FLIGHT AirTransportation)
      (serviceProvider ?SERVICE ?AIRLINE)
      (employs ?AIRLINE ?PILOT)
      (agent ?FLIGHT ?PILOT)
      (patient ?FLIGHT ?CUSTOMER)
      (customer ?CUSTOMER ?AIRLINE)
      (instrument ?FLIGHT ?PLANE)
      (subProcess ?FLIGHT ?SERVICE))))
      
      
(subclass LandTransportationService TransportationService)
(documentation LandTransportationService EnglishLanguage "A &%TransportationService provided by any &%TransportationCompany that involves &%LandTransportation")
(termFormat EnglishLanguage LandTransportationService "Land Transportation Service")
(=>
  (instance ?SERVICE LandTransportationService)
  (exists (?METHOD ?DRIVER ?COMPANY ?CUSTOMER ?RIDE)
    (and
      (instance ?METHOD Vehicle)
      (instance ?COMPANY TransportationCompany)
      (instance ?RIDE LandTransportation)
      (instance ?DRIVER Agent)
      (serviceProvider ?SERVICE ?COMPANY)
      (employs ?COMPANY ?DRIVER)
      (agent ?RIDE ?DRIVER)
      (patient ?RIDE ?CUSTOMER)
      (customer ?CUSTOMER ?COMPANY)
      (instrument ?RIDE ?METHOD)
      (subProcess ?RIDE ?SERVICE))))
      
      
(subclass WaterTransportationService TransportationService)
(documentation WaterTransportationService EnglishLanguage "A &%TransportationService provided by any &%TransportationCompany that involves &%WaterTransportation")
(termFormat EnglishLanguage WaterTransportationService "Water Transportation Service")
(=>
  (instance ?SERVICE WaterTransportationService)
  (exists (?METHOD ?DRIVER ?COMPANY ?CUSTOMER ?RIDE)
    (and
      (instance ?METHOD Vehicle)
      (instance ?COMPANY TransportationCompany)
      (instance ?RIDE WaterTransportation)
      (instance ?DRIVER Agent)
      (serviceProvider ?SERVICE ?COMPANY)
      (employs ?COMPANY ?DRIVER)
      (agent ?RIDE ?DRIVER)
      (patient ?RIDE ?CUSTOMER)
      (customer ?CUSTOMER ?COMPANY)
      (instrument ?RIDE ?METHOD)
      (subProcess ?RIDE ?SERVICE))))

;; KJN: Delete this.  Used only in &%providesDestination, but it seems like it would
;; be easier to just (also for inferencing purposes) to just do (providesDestination 
;; ?AIR ?REGION) instead of having to define a collection and then do providesDestinations
;; on that collection.
   
;;(subclass RegionCollection Collection)
;;(documentation RegionCollection EnglishLanguage "RegionCollection is a &%Collection of  &%Region.")
;;(termFormat EnglishLanguage RegionCollection "Collection of Regions")
;;(=>
;;  (instance ?COLLECTION RegionCollection)
;;  (memberType ?COLLECTION Region))
  

;;               INFOBOX RELATIONS:

(subclass Airline TransportationCompany)
(documentation Airline EnglishLanguage "An Airline is a &%TransportationCompany that 
specializes in providing &%AirTransportation")
(termFormat EnglishLanguage Airline "Airline")
(=>
  (instance ?AIRLINE Airline)
  (and
    (instance ?AIRLINE Organization)
    (attribute ?AIRLINE AirTransportationIndustry)))
(=>
  (instance ?AIRLINE Airline)
  (exists (?PILOT)
    (and
      (instance ?PILOT Human)
      (attribute ?PILOT Pilot)
      (employs ?AIRLINE ?PILOT)
      (or
        (exists (?SERVICE ?FLIGHT1)
          (and
            (instance ?SERVICE AirTransportationService)
            (serviceProvider ?SERVICE ?AIRLINE)
            (instance ?FLIGHT1 AirTransportation)
            (agent ?FLIGHT1 ?PILOT)
            (subProcess ?FLIGHT1 ?SERVICE)))
        (exists (?CARGO ?FLIGHT2)
          (and
            (instance ?CARGO Object)
            (instance ?FLIGHT2 AirTransportation)
            (agent ?FLIGHT2 ?PILOT)
            (patient ?FLIGHT2 ?CARGO)))))))
(=>
  (instance ?AIRLINE Airline)
  (exists (?PILOT)
    (and
      (instance ?PILOT Human)
      (attribute ?PILOT Pilot)
      (employs ?AIRLINE ?PILOT))))
      
;; Another way of expressing that an Airline hires Pilots is to use (occupiesPosition 
;; ?PILOT Pilot ?AIRLINE) instead of (employs ?AIRLINE ?PILOT)
(=>
  (instance ?AIRLINE Airline)
  (exists (?FLEET ?AIRCRAFT)
    (and
      (instance ?FLEET Fleet)
      (possesses ?AIRLINE ?FLEET)
      (instance ?AIRCRAFT Aircraft)
      (member ?AIRCRAFT ?FLEET))))
      
;; NOTE: In the case of single, self-employed private pilot: Although in the English Language 
;; they might not be considered an "airline", for this logical definition, they are 
;; considered an airline b/c they still provide flights, employ a pilot, and have a fleet of at least 1 plane.

;;  KJN: Will change this to CodeMap as it is more appropriate.
;; (subclass IATAtag SymbolicString)
;; (documentation IATAtag EnglishLanguage "The 2-character tag given to an &%Airline by the 
;; &%InternationalAirTransportAssociation to represent that &%Airline at any &%Airport")
;; (termFormat EnglishLanguage IATAtag "IATA tag")
;; (=>
;;  (instance ?TAG IATAtag)
;;  (exists (?AIRLINE)
;;    (and
;;      (equal 2 (StringLengthFn ?TAG))
;;      (instance ?AIRLINE Airline)
;;      (member ?AIRLINE InternationalAirTransportAssociation)
;;      (represents ?TAG ?AIRLINE))))
  
(subclass AirlineCodeMap CodeMap)
(documentation AirlineCodeMap EnglishLanguage "&%AirlineCodeMap denotes the &%SymbolicString
used by different aviation organizations to identify &%Airline")
(termFormat EnglishLanguage AirlineCodeMap "airline code map")

(=>
  (and
    (instance ?CM AirlineCodeMap)
    (codeMapping ?CM ?STR ?AIR))
  (and
    (instance ?AIR Airline)
    (represents ?STR ?AIR)))

(instance IATAAirlineCode CodeMap)
(documentation IATAAirlineCode EnglishLanguage "The 2-character tag given to an &%Airline by the 
&%InternationalAirTransportAssociation to represent that &%Airline at any &%Airport")    
(termFormat EnglishLanguage IATAAirlineCode "IATA airline code")

(=>
  (codeMapping IATAAirlineCode ?STR ?AIR)
  (member ?AIR InternationalAirTransportAssociation))

(=>
  (codeMapping IATAAirlineCode ?STR ?AIR)
  (equal 2 (StringLengthFn ?STR)))

;; (subclass IACOtag SymbolicString)
;; (documentation IACOtag EnglishLanguage "The 3-character tag given to an &%Airline by the 
;; &%InternationalCivilAviationOrganization to represent that &%Airline at any &%Airport")
;; (termFormat EnglishLanguage IACOtag "IACO tag")
;; (=>
;;  (instance ?TAG IACOtag)
;;  (exists (?AIRLINE)
;;    (and
;;      (equal 3 (StringLengthFn ?TAG))
;;      (instance ?AIRLINE Airline)
;;      (member ?AIRLINE InternationalCivilAviationOrganization)
;;      (represents ?TAG ?AIRLINE))))
     
(instance IACOAirlineCode CodeMap)
(documentation IACOAirlineCode EnglishLanguage "The 3-character tag given to an &%Airline by the 
 &%InternationalCivilAviationOrganization to represent that &%Airline at any &%Airport")
(termFormat EnglishLanguage IACOAirlineCode "IACO airline code")

(=>
  (codeMapping IACOAirlineCode ?STR ?AIR)
  (member ?AIR InternationalCivilAviationOrganization))

(=>
  (codeMapping IACOAirlineCode ?STR ?AIR)
  (equal 3 (StringLengthFn ?STR)))

(subclass AOCnumber SymbolicString)
(documentation AOCnumber EnglishLanguage "The certification number that signifies an &%Airline has 
recieved an Air Operator Certification, allowing the airline to use aircraft for commercial purposes.")
(termFormat EnglishLanguage AOCnumber "AOC number")
(=>
  (instance ?AOC AOCnumber)
  (exists (?AIRLINE ?G)
    (and
      (equal 8 (StringLengthFn ?AOC))
      (instance ?AIRLINE Airline)
      (instance ?G Giving)
      (agent ?G FederalAviationAdministration)
      (patient ?G ?AOC)
      (destination ?G ?AIRLINE)
      (modalAttribute
        (exists (?F ?PILOT)
          (and
            (instance ?F FlyingAircraft)
            (instance ?PILOT Human)
            (attribute ?PILOT Pilot)
            (employs ?AIRLINE ?PILOT)
            (agent ?F ?PILOT))) Possibility))))
(=>
  (not
    (and
      (instance ?TAG AOCnumber)
      (instance ?AIRLINE Airline)
      (possesses ?AIRLINE ?TAG)))
  (not
    (modalAttribute
      (exists (?F ?PILOT)
        (and
          (instance ?F FlyingAircraft)
          (instance ?PILOT Human)
          (attribute ?PILOT Pilot)
          (employs ?AIRLINE ?PILOT)
          (agent ?F ?PILOT))) Possibility)))
          
            
(instance fleetSize BinaryPredicate)
(domain fleetSize 1 Organization)
(domain fleetSize 2 Integer)
(documentation fleetSize EnglishLanguage "(fleetSize ?ORG ?NUM) means the &%Organization ?ORG has a 
fleet size of an &%Integer ?NUM. The &%Fleet can consists of any type of &%Vehicle")
(termFormat EnglishLanguage fleetSize "Fleet Size")
(=>
  (and
    (instance ?FLEET Fleet)
    (fleetSize ?ORG ?NUM)
    (possesses ?ORG ?FLEET))
  (memberCount ?FLEET ?NUM)) 

;; KJN: Edit.  See note on RegionCollection  
;;(instance providesDestinations BinaryPredicate)
;;(domain providesDestinations 1 TransportationCompany)
;;(domain providesDestinations 2 RegionCollection)
;;(documentation providesDestinations EnglishLanguage "(provides ?TC ?COL) means 
;;&%TransportationCompany, ?TC, provides possible &%Transportation to all Destinations in the &%RegionCollection ?COL.")
;;(termFormat EnglishLanguage providesDestination "provides destinations")
;;(=>
;;  (and
;;    (providesDestinations ?COMPANY ?COLLECTION)
;;    (member ?DESTINATION ?COLLECTION))
;;  (modalAttribute
;;    (exists (?SERVICE)
;;      (and
;;        (instance ?SERVICE TransportationService)
;;        (serviceProvider ?SERVICE ?COMPANY)
;;        (destination ?SERVICE ?DESTINATION))) Possibility))

(instance providesDestination BinaryPredicate)
(domain providesDestination 1 TransportationCompany)
(domain providesDestination 2 Region)
(documentation providesDestination EnglishLanguage "(providesDestination ?TC ?REG) means 
&%TransportationCompany, ?TC, provides possible &%Transportation to &%Region ?REG.")
(termFormat EnglishLanguage providesDestination "provides destination")

(=>
  (providesDestination ?TC ?REG)
  (modalAttribute
    (exists (?SVC)
      (and
        (instance ?SVC TransportationService)
        (serviceProvider ?SVC ?TC)
        (destination ?SVC ?REG))) Possibility))

(subclass Cartridge Projectile)
(documentation Cartridge EnglishLanguage "The entire projectile consisting of a bullet, casing, gunpowder, and primer.")
(termFormat EnglishLanguage Cartridge "cartridge")
(=>
  (instance ?CARTRIDGE Cartridge)
  (exists (?BULLET ?CASE)
    (and
      (instance ?BULLET Bullet)
      (instance ?CASE CartridgeCase)
      (properPart ?BULLET ?CARTRIDGE)
      (properPart ?CASE ?CARTRIDGE))))
        
(subclass CartridgeCase EngineeringComponent)
(documentation CartridgeCase EnglishLanguage "the part of a cartridge that holds the bullet")
(termFormat EnglishLanguage CartridgeCase "case")
(=>
  (instance ?CASE CartridgeCase)
  (exists (?CARTRIDGE ?BULLET ?K)
    (and
      (instance ?CARTRIDGE Cartridge)
      (instance ?BULLET Bullet)
      (instance ?K Keeping)
      (properPart ?CASE ?CARTRIDGE)
      (properPart ?BULLET ?CARTRIDGE)
      (agent ?K ?CASE)
      (patient ?K ?BULLET))))
        
        
;;========================================================
;;                   GENERAL RELATIONS 
;;========================================================

;; KJN: Created dateOfOpening, will use that as the relationship for this    
;; (subrelation dateAired dateOfOpening)
;; (domain dateAired 1 RadioStation)
;; (domain dateAired 2 Day)
;; (documentation dateAired EnglishLanguage "(dateAired ?STATION ?DATE) means 
;; that the &%RadioStation ?STATION had its first &%Broadcasting on the &%Day ?DATE")
;; (termFormat EnglishLanguage dateAired "aired on the date")
;;(=>
;;  (dateAired ?STATION ?DATE)
;;  (exists (?AIRING1)
;;    (and
;;     (instance ?AIRING1 Broadcasting)
;;      (agent ?AIRING1 ?STATION)
;;     (equal (WhenFn ?AIRING1) ?DATE)
;;      (not
;;        (exists (?AIRING2)
;;          (and
;;            (instance ?AIRING2 Broadcasting)
;;            (agent ?AIRING2 ?STATION)
;;            (not
;;              (equal ?AIRING1 ?AIRING2))
;;            (beforeOrEqual (WhenFn ?AIRING2) (WhenFn ?AIRING1))))))))
  
(=>
  (and
    (dateOfOpening ?RADIO ?DATE)
    (instance ?RADIO RadioStation))
  (and
    (exists (?AIR)
      (and
        (instance ?AIR Broadcasting)
        (agent ?AIR ?RADIO)
        (during (WhenFn ?AIR) ?DATE)))
    (not
      (exists (?AIR2)
        (and
          (instance ?AIR2 Broadcasting)
          (agent ?AIR2 ?RADIO)
          (not (equal ?AIR ?AIR2))
          (before (WhenFn ?AIR2) ?DATE))))))
        
(subclass Artist SkilledOccupation)
(documentation Artist EnglishLanguage "the &%SkilledOccupation that is a person who creates &%ArtWork")
(termFormat EnglishLanguage Artist "Artist")
(=>
  (and
    (instance ?ARTIST Human)
    (attribute ?ARTIST Artist))
  (exists (?ART ?CREATION)
    (and
      (instance ?CREATION Creation)
      (instance ?ART ArtWork)
      (agent ?CREATION ?ARTIST))))
      (result ?CREATION ?ART)
      
(instance dateUsed TernaryPredicate)
(domain dateUsed 1 Object)
(domain dateUsed 2 TimePoint)
(domain dateUsed 3 Agent)
(documentation dateUsed EnglishLanguage "The date an &%Object is used by an &%Agent.")
(termFormat EnglishLanguage dateUsed "date used")
(=>
  (dateUsed ?OBJECT ?DATE ?AGENT)
  (exists (?PROCESS)
    (and
      (instance ?PROCESS Process)
      (patient ?PROCESS ?OBJECT)
      (agent ?PROCESS ?AGENT)
      (uses ?OBJECT ?AGENT)
      (equal ?DATE (WhenFn ?PROCESS)))))
           
(subclass Architect SkilledOccupation)
(documentation Architect EnglishLanguage "The &%SkilledOccupation that entail designing buildings")
(termFormat EnglishLanguage Architect "Architect")
(=>
  (and
    (instance ?ARCHITECT Human)
    (attribute ?ARCHITECT Architect))
  (hasExpertise ?ARCHITECT Architecture))

;; KJN: a more generic "designs" relationship can be found in the latter part of this
;; document and can be used in place of this.
;;(instance designedBuilding BinaryPredicate)
;;(domain designedBuilding 1 Human)
;;(domain designedBuildin 2 Building)
;;(documentation designedBuilding EnglishLanguage "(designedBuilding ?ARCHITECT ?BUILDING) 
;;means that the &%Architect ?ARCHITECT designed the &%Building ?BUILDING")
;;(termFormat EnglishLanguage designedbuilding "designed the building.")
;;(=>
;;  (designedBuilding ?ARCHITECT ?BUILDING)
;; (exists (?DEVELOPMENT ?BLUEPRINT)
;;    (and
;;      (attribute ?ARCHITECT Architect)
;;      (instance ?DEVELOPMENT ContentDevelopment)
;;      (instance ?BLUEPRINT Blueprint)
;;      (agent ?DEVELOPMENT ?ARCHITECT)
;;      (result ?DEVELOPMENT ?BLUEPRINT)
;;      (represents ?BLUEPRINT ?BUILDING))))
            
(subclass Awarding UnilateralGiving)
(documentation Awarding EnglishLanguage "&%Giving to any &%Agent for doing some &%Process.")
(termFormat EnglishLanguage Awarding "awarding")
(=>
  (instance ?A Awarding)
  (exists (?RECIPIENT ?GIVER ?PROCESS ?AWARD)
    (and
      (instance ?RECIPIENT Agent)
      (instance ?GIVER Agent)
      (instance ?PROCESS Process)
      (instance ?AWARD Object)
      (agent ?PROCESS ?RECIPIENT)
      (agent ?A ?GIVER)
      (patient ?A ?AWARD)
      (destination ?A ?RECIPIENT)
      (causes ?PROCESS ?A))))
        
      
(instance hasAward BinaryPredicate)
(domain hasAward 1 Agent)
(domain hasAward 2 Object)
(documentation hasAward EnglishLanguage "(hasAward ?RECIPIENT ?AWARD) means the &%Agent 
?RECIPIENT recieved the &%Object ?AWARD as an award for some action they did.")
(termFormat EnglishLanguage hasAward "has award")
(=>
  (hasAward ?RECIPIENT ?AWARD)
  (exists (?A)
    (and
      (instance ?A Awarding)
      (destination ?A ?RECIPIENT)
      (patient ?A ?AWARD))))

;; KJN: Since definition says that Sign displays a range of information, will add it
;; as a subclass of &%ContentBearingObject
(subclass Sign ContentBearingObject)      
(subclass Sign DisplayArtifact)
(subclass Sign DataDisplayDevice)
(documentation Sign EnglishLanguage "A Sign is a &%DisplayArtifact that displays any range of information")
(termFormat EnglishLanguage Sign "Sign")
(=>
  (instance ?SIGN Sign)
  (structure ?SIGN Flat))

(instance broadcastRadius CaseRole)
(domain broadcastRadius 1 Broadcasting)
(domain broadcastRadius 2 LengthMeasure)
(documentation broadcastRadius EnglishLanguage "(broadcastRadius ?BROADCAST ?RADIUS) means that the 
&%Broadcasting &%Process ?BROADCAST can be received by any &%ReceiverDevice within &%distance ?RADIUS")
(=>
  (broadcastRadius ?BROADCAST ?RADIUS)
  (exists (?STATION ?STATIONPOINT)
    (and
      (instance ?STATION BroadcastingStation)
      (location ?STATION ?STATIONPOINT)
      (modalAttribute
        (exists (?RECEIVER1 ?RECEIVERPOINT1 ?DISTANCE1)
          (and
            (instance ?RECEIVER1 ReceiverDevice)
            (destination ?BROADCAST ?RECEIVER1)
            (instrument ?BROADCAST ?STATION)
            (located ?RECEIVER1 ?RECEIVERPOINT1)
            (distance ?STATIONPOINT ?RECEIVERPOINT1 ?DISTANCE1)
            (lessThan ?DISTANCE1 ?RADIUS))) Possibility)
      (not
        (modalAttribute
          (exists (?RECEIVER2 ?RECEIVERPOINT2 ?DISTANCE2)
            (and
              (instance ?RECEIVER2 ReceiverDevice)
              (destination ?BROADCAST ?RECEIVER2)
              (instrument ?BROADCAST ?STATION)
              (located ?RECEIVER2 ?RECEIVERPOINT2)
              (distance ?STATIONPOINT ?RECEIVERPOINT2 ?DISTANCE2)
              (greaterThan ?DISTANCE2 ?RADIUS))) Possibility)))))
              
(instance carries BinaryPredicate)
;; KJN: Editing this to be more general not only to Animal but to any Agent
;;(domain carries 1 Animal)
(domain carries 1 Agent)
(domain carries 2 Object)
;;(documentation carries EnglishLanguage "(carries ?ANIMAL ?OBJECT) means that 
;;an &%Animal ?ANIMAL transers an &%OBJECT ?OBJECT from one point to another")

(documentation carries EnglishLanguage "(carries ?AGENT ?OBJECT) means that 
an &%Agent ?AGENT transers an &%OBJECT ?OBJECT from one point to another")
(termFormat EnglishLanguage carries "carries")
(=>
  (carries ?AGENT ?OBJECT)
  (exists (?CARRYING)
    (and
      (instrument ?CARRYING ?AGENT)
      (patient ?CARRYING ?OBJECT))))
    

(instance Cinematographer FilmMakingProfession)
(documentation Cinematographer EnglishLanguage "&%Position which involves controlling 
the &%Camera during a &%FilmMaking")
(termFormat EnglishLanguage Cinematographer "Cinematographer")
(=>
  (and
    (instance ?C Human)
    (attribute ?C Cinematographer))
  (exists (?SHOT)
    (and
      (instance ?SHOT FilmMaking)
      (agent ?SHOT ?C))))
    
(instance filmCinematographer BinaryPredicate)
(domain filmCinematographer 1 Human)
(domain filmCinematographer 2 MotionPicture)
(documentation filmCinematographer EnglishLanguage "(filmCinematographer ?C ?FILM) 
 that the &%Human ?C was the &%Cinematographer for the &%MotionPicture ?FILM")
(termFormat EnglishLanguage filmCinematographer "film cinematographer")
(=>
  (filmCinematographer ?C ?FILM)
  (exists (?SHOT)
    (and
      (instance ?SHOT FilmMaking)
      (agent ?SHOT ?C)
      (result ?SHOT ?FILM))))
      

(subclass Club Organization)
(documentation Club EnglishLanguage "A Club is an &%Organization of people that share some &%desire")
(=>
  (and
    (instance ?CLUB Club)
    (member ?MEM1 ?CLUB)
    (member ?MEM2 ?CLUB))
  (exists (?DESIRE)
    (and
      (desires ?MEM1 ?DESIRE)
      (desires ?MEM2 ?DESIRE))))
      
      
;;Coach already exists as a subclass of SkilledOccupation in Mid-level-ontology.kif    
(=>      
  (and
    (instance ?COACH Human)
    (attribute ?COACH Coach))
  (exists (?ATHLETE ?GAME ?EDUCATION)
    (and
      (instance ?ATHLETE Human)
      (instance ?GAME Game)
      (instance ?EDUCATION EducationalProcess)
      (agent ?EDUCATION ?COACH)
      (patient ?EDUCATION ?ATHLETE)
      (refers ?EDUCATION ?GAME))))
      

(instance coaches BinaryPredicate)
(domain coaches 1 Human)
(domain coaches 2 Human)
(documentation coaches EnglishLanguage "(coaches ?COACH ?PLAYER) means that 
the &%Human ?COACH is the &%Coach of the &%Human ?PLAYER")
(termFormat EnglishLanguage coaches "coaches")
(=>
  (coaches ?COACH ?PLAYER)
  (and
    (attribute ?COACH Coach)
    (exists (?GAME ?EDUCATION)
      (and
        (instance ?GAME Game)
        (instance ?EDUCATION EducationalProcess)
        (agent ?EDUCATION ?COACH)
        (patient ?EDUCATION ?PLAYER)
        (refers ?EDUCATION ?GAME)))))
        

(subclass Commenting IntentionalProcess)
(documentation Commentating EnglishLanguage "Commenting is an &%IntentionalProcess 
where an &%Agent speaks about a &%Process it is &%Looking at.")
(termFormat EnglishLanguage Commenting "Commenting")
(=>
  (instance ?COMMENTING Commenting)
  (exists (?AGENT ?PROCESS ?SPEAKING ?LOOKING)
    (and
      (instance ?AGENT Agent)
      (instance ?PROCESS Process)
      (instance ?SPEAKING Speaking)
      (instance ?LOOKING Looking)
      (agent ?SPEAKING ?AGENT)
      (agent ?LOOKING ?AGENT)
      (patient ?LOOKING ?PROCESS)
      (refers ?SPEAKING ?PROCESS))))
(=>
  (and
    (instance ?COMMENTING Commenting)
    (instance ?PROCESS Process)
    (patient ?COMMENTING ?PROCESS))
  (exists (?AGENT ?SPEAKING ?LOOKING)
    (and
      (instance ?AGENT Agent)
      (instance ?SPEAKING Speaking)
      (instance ?LOOKING Looking)
      (agent ?SPEAKING ?AGENT)
      (agent ?LOOKING ?AGENT)
      (patient ?LOOKING ?PROCESS)
      (refers ?SPEAKING ?PROCESS))))
    
            
(instance commentator BinaryPredicate)
(domain commentator 1 Agent)
(domain commentator 2 Process)
(documentation commentator EnglishLanguage "(commentator ?AGENT ?PROCESS) means that some &%Agent 
?AGENT is &%Looking at some &%Process ?PROCESS and &%Speaking about it simultaneously.")
(termFormat EnglishLanguage commentator "commentator")
(=>
  (commentator ?AGENT ?PROCESS)
  (exists (?COMMENTING)
    (and
      (instance ?COMMENTING Commenting)
      (agent ?COMMENTING ?AGENT)
      (patient ?COMMENTING ?PROCESS))))
    
    
(instance constructionPeriod BinaryPredicate)
(domain constructionPeriod 1 StationaryArtifact)
(domain constructionPeriod 2 TimeInterval)
(documentation constructionPeriod EnglishLanguage "(constructionPeriod ?OBJECT ?INTERVAL) 
means that some &%StationaryArtifact ?OBJECT was built over &%TimeInterval ?INTERVAL")
(termFormat EnglishLanguage constructionPeriod "construction period")
(=>
  (constructionPeriod ?OBJECT ?INTERVAL)
  (exists (?CONSTRUCTING)
    (and
      (instance ?CONSTRUCTING Constructing)
      (result ?CONSTRUCTING ?OBJECT)
      (holdsDuring ?INTERVAL ?CONSTRUCTING))))
      
(instance contractor BinaryPredicate)
(domain contractor 1 StationaryArtifact)
(domain contractor 2 Agent)
(documentation contractor EnglishLanguage "(contractor ?BUILDING ?AGENT) means that some 
&%Agent ?AGENT was paid by an &%Organization to construct a &%StationaryArtifact ?BUILDING.")
(termFormat EnglishLanguage contractor "contractor")    
(=>
  (contractor ?BUILDING ?AGENT)
  (exists (?CONSTRUCTING ?ORG ?PAYMENT)
    (and
      (instance ?CONSTRUCTING Constructing)
      (instance ?ORG Organization)
      (instance ?PAYMENT Payment)
      (agent ?CONSTRUCTING ?AGENT)
      (result ?CONSTRUCTING ?BUILDING)
      (agent ?PAYMENT ?ORG)
      (destination ?PAYMENT ?AGENT))))

(instance creator BinaryRelation)
(domain creator 1 Agent)
(domain creator 2 Entity)
(documentation creator EnglishLanguage "(creator ?AGENT ?ENTITY) means that 
some &%Agent ?AGENT is the creator of some &%Entity ?ENTITY")
(termFormat EnglishLanguage creator "creator")
(=>      
  (creator ?AGENT ?ENTITY)
  (exists (?CREATION)
    (and
      (instance ?CREATION Creation)
      (agent ?CREATION ?AGENT)
      (result ?CREATION ?ENTITY))))
      
(instance describes BinaryPredicate)
(domain describes 1 Formula)
(domain describes 2 Object)
(documentation describes EnglishLanguage "(describes ?FORMULA ?OBJECT) means that some 
&%Formula ?FORMULA, as said by some &%Agent, is a statement regarding some &%Object ?OBJECT")
(termFormat EnglishLanguage describes "describes")      
(=>
  (describes ?FORMULA ?OBJECT)
  (exists (?STATING ?AGENT)
    (and
      (instance ?STATING Stating)
      (agent ?STATING ?AGENT)
      (patient ?STATING ?FORMULA)
      (refers ?STATING ?OBJECT))))
      
(instance directed BinaryPredicate)
(domain directed 1 Human)
(domain directed 2 MotionPicture)
(documentation directed EnglishLanguage "(directed ?DIRECTOR ?MOVIE) means that the &%Human 
?DIRECTOR was in charge of the &%FilmMaking &%Process that produced the &%MotionPicture ?MOVIE")
(termFormat EnglishLanguage directed "directed")
(=>
  (directed ?DIRECTOR ?MOVIE)
  (exists (?FILMMAKING ?FILMCREW)
    (and
      (instance ?FILMMAKING FilmMaking)
      (instance ?FILMCREW Organization)
      (leader ?FILMCREW ?DIRECTOR)
      (agent ?FILMMAKING ?FILMCREW)
      (result ?FILMMAKING ?MOVIE))))

;; changing domain to domainSubclass so that we can say that a distributor distributes
;; instances of Object, instead of having to define the relationship for each of the
;; indvidiual product instances
(instance distributes BinaryPredicate)
(domain distributes 1 Organization)
;;(domain distributes 2 Object)
(domainSubclass distributes 2 Object)
(documentation distributes EnglishLanguage "(distributes ?DISTRIBUTOR ?OBJECT) means 
that the &%Agent ?DISTRIBUTOR is in charge of the &%DistributeProducts &%Process for 
some &%Object ?OBJECT. This relation could hold in a &%Business or casual setting.")
(termFormat EnglishLanguage distributes "distributes")
(=>
  (distributes ?DISTRIBUTOR ?PRODUCT)
  (exists (?DISTRIBUTE ?PROD)
    (and
      (instance ?PROD ?PRODUCT)
      (instance ?DISTRIBUTE DistributeProducts)
      (agent ?DISTRIBUTE ?DISTRIBUTOR)
      (patient ?DISTRIBUTE ?PROD))))
            
(instance discovers BinaryPredicate)
(domain discovers 1 Agent)
(domain discovers 2 Object)
(documentation discovers EnglishLanguage "(discovers ?AGENT ?OBJECT) means that the 
&%Agent ?AGENT discovered the &%Object ?OBJECT.")
(termFormat EnglishLanguage discovers "discovers")
(=>
  (discovers ?AGENT ?OBJECT)
  (exists (?DISCOVERING)
    (and
      (instance ?DISCOVERING Discovering)
      (agent ?DISCOVERING ?AGENT)
      (patient ?DISCOVERING ?OBJECT))))
      
(instance designs BinaryPredicate)
(domain designs 1 Agent)
;; KJN: Changing this to Physical, as you can also technically design a complex process
;;(domain designs 2 Object)
(domain designs 2 Physical)
;;(documentation designs EnglishLanguage "(designs ?AGENT ?OBJECT) means that the &%Agent ?AGENT 
;;designed some &%Object ?OBJECT by creating a different &%Object that represents ?OBJECT")
(documentation designs EnglishLanguage "(designs ?AGENT ?PHYS) means that the 
&%Agent ?AGENT was involved in a &%Designing process that resulted in a model that
&%represents &%Physical ?PHYS")
(termFormat EnglishLanguage designs "designs")

(=>
  (designs ?AGENT ?PHYS)
  (exists (?DP ?DR)
    (and
      (instance ?DP Designing)
      (agent ?DP ?AGENT)
      (result ?DP ?DR)
      (represents ?DR ?OBJECT))))
      
      
(instance engineers BinaryPredicate)
(domain engineers 1 Agent)
(domain engineers 2 Artifact)
(documentation engineers EnglishLanguage "(engineers ?AGENT ?OBJECT) means the &%Agent ?AGENT engineered some &%Artifact ?OBJECT")
(termFormat EnglishLanguage engineers "engineers")

(=>
  (engineers ?AGENT ?OBJECT)
  (exists (?ENGINEERING)
    (and
      (instance ?ENGINEERING EngineersProcess)
      (agent ?ENGINEERING ?AGENT)
      (result ?ENGINEERING ?OBJECT))))