;; ============================================================================
;;                   REARDEN COMMERCE, INC.
;;                    FlashOffers Ontology
;; ============================================================================

;; Created by: Valeria de Paiva (vdepaiva [at] reardencommerce [dot] com)
;; Created on: October 31st, 2011
;;  
;; Description:  This describes concepts related to flash offers, 
;; starting from the offers described in the file on deals, email from
;;

;; Ontology dependencies for FlashOffers.kif: 
;; Merge.kif
;; Mid-level-ontology.kif 

;; Access to and use of these products is governed by the GNU General Public 
;; License <http://www.gnu.org/copyleft/gpl.html>. 
;; By using these products, you agree to be bound by the terms  of the GPL.
;; We ask the people using or referencing this work cite our primary paper:
;; Niles, I., and Pease, A.  2001.  Towards a Standard Upper Ontology.  In 
;; Proceedings of the 2nd International Conference on Formal Ontology in 
;; Information Systems (FOIS-2001), Chris Welty and Barry Smith, eds, 
;; Ogunquit, Maine, October 17-19, 2001.  See also http://www.ontologyportal.org

;; Many of the offers are classes: exercise, art, acting, computer training, etc.
;; class in WN maps to EducationalProcess in Merge.kif 9417-9418
;; also have EducationalCourse a
;; subclass of EducationalProgram
;; 

(subclass LearningMeeting Meeting)
(instance LearningClass LearningMeeting)

(=>
  (instance ?CLASS LearningClass)
  (exists (?MEET ?LEARN)
    (and
      (instance ?MEET LearningMeeting)
      (instance ?LEARN Learning))))
      
(=>
  (instance ?CLASS LearningClass)
  (exists (?PERSON1 ?PERSON2 ?SUBJ ?LEARN)
    (and
      (hasSkill ?SUBJ ?PERSON1)
      (not (hasSkill ?SUBJ ?PERSON2))
      (subProcess ?CLASS ?LEARN)
      (instance ?LEARN Learning)
      (agent ?LEARN ?PERSON2)
      (refers ?CLASS ?SUBJ)))) 
      
(subclass LearningClass EducationalProcess)

;; classes can be (at least0 for artistic activities or for fitness or for work improvement or for entertainment purposes

;; For any of  the sports in Sports.kif we can have a SportClass:
;; either a 1-to-1 (private class) or a group class where the sport is taught by someone who has expertise on that sport.

;; ClassOnSportFn
;; For each sport we can have a class that is teaching that sport for a given (short) amount of time. 
(documentation ClassOnSportFn EnglishLanguage "A unary function that, when given a ?SPORT will return an instance of a class associated with that sport, e.g. (ClassOnSportFn MountainBiking), 
is an instance of an LearningClass on the sport of Mountain biking.")
(domain ClassOnSportFn 1 Sport)     
(instance ClassOnSportFn UnaryFunction)     
(range ClassOnSportFn LearningClass)

(subclass MountainBike Bicycle)
(subclass ElectricBike Bicycle)

; (ClassOnSportFn Soccer) is a class on which someone teaches and someone learns something about &%Soccer
(=>
  (ClassOnSportFn ?SPORT)
  (exists (?PERSON1 ?PERSON2 ?CLASS)
    (and
      (hasSkill ?SPORT ?PERSON1)
      (not (hasSkill ?SPORT ?PERSON2))
      (instance ?CLASS LearningClass)
      (refers ?CLASS ?SPORT)))) 

;; ClassOnAcademicFieldFn
;; For each academic field of study we can have a class that is teaching that academic field or activity for a given (short) amount of time. 
(documentation ClassOnAcademicFieldFn EnglishLanguage "A unary function that, when given a ?FIELDOFSTUFY will return an instance of class associated with that field of study, e.g. (ClassOnAcademicFieldFn Astronomy), is an instance of an LearningClass on  &%Astronomy.")
(domain ClassOnAcademicFieldFn 1 Sport)     
(instance ClassOnAcademicFieldFn UnaryFunction)     
(range ClassOnAcademicFieldFn LearningClass)

; added Paleontology for digging class

;; ClassOnArtFn

;; For each artistic activity we could have a class that is teaching that artistic activity for a given (short) amount of time, but we don't have a concept of ArtisticActivity. 
;(documentation ClassOnArtFn EnglishLanguage "A unary function that, when given a ?ART will return an instance of class associated with that sport, e.g. (ClassOnArtFn Dancing), is an instance of an EducationalClass on the art  of &%Dancing.")
;(domain ClassOnArttFn 1 Process)     
;(instance ClassOnArtFn UnaryFunction)     
;(range ClassOnArtFn EducationalClass)

;examples : Cooking, Dancing, Drawing, Painting, ScreenPrinting

(subclass DanceClass EducationalClass)

(=>
  (instance ?CLASS DanceClass)
  (exists (?PROC)
    (and
      (instance ?PROC Dancing)
      (subProcess ?PROC ?CLASS))))

(subclass PhotographyClass EducationalClass)
(=> 
  (instance ?CLASS PhotographyClass)
  (exists (?PROC)
    (and
      (instance ?PROC Photographing)
      (subProcess ?PROC ?CLASS))))

(subclass MusicClass EducationalClass)
(=>
  (instance ?CLASS MusicClass)
  (exists (?PROC)
    (and
      (instance ?PROC MakingMusic)
      (subProcess ?PROC ?CLASS))))