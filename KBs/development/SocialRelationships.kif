;; SocialRelationships.kif

;;; This file contains an ontology of human social relationships
;;; motivated by parts of the National Information Exchange Model
;;; (NIEM), version 1.0, beta 1.

;; Access to and use of these products is governed by the GNU General Public
;; License <http://www.gnu.org/copyleft/gpl.html>.
;; By using these products, you agree to be bound by the terms
;; of the GPL.

;; Those who are interested in making use of this ontology are requested
;; to contact Adam Pease (apease [at] articulatesoftware [dot] com).

;; Version date: August, 2006
;; We ask the people using or referencing this work cite our primary paper:

;; Niles, I., and Pease, A.  2001.  Towards a Standard Upper Ontology.  In
;; Proceedings of the 2nd International Conference on Formal Ontology in
;; Information Systems (FOIS-2001), Chris Welty and Barry Smith, eds,
;; Ogunquit, Maine, October 17-19, 2001. See also www.ontologyportal.org

;; acquaintance
(instance acquaintance BinaryPredicate)

(documentation acquaintance "(&%acquaintance ?H1 ?H2) means that ?H1 has
met and knows something about ?H2, such as ?H2's name and appearance.
Statements made with this predicate should be temporally specified with
&%holdsDuring.  Note that &%acquaintance is not symmetric.  For the
symmetric version, see &%mutualAcquaintance.")

(domain acquaintance 1 Human)
(domain acquaintance 2 Human)

;; mutualAcquaintance
(instance mutualAcquaintance BinaryPredicate)
(instance mutualAcquaintance SymmetricRelation)

(documentation mutualAcquaintance "(&%mutualAcquaintance ?H1 ?H2) means
that ?H1 and ?H2 have met each other and know something about each other,
such as name and appearance.  Statements made with this predicate should
be temporally specified with &%holdsDuring.  See also the weaker,
non-symmetric version of this predicate, &%acquaintance.")

(domain mutualAcquaintance 1 Human)
(domain mutualAcquaintance 2 Human)
(subrelation mutualAcquaintance acquaintance)

;; friend
(instance friend BinaryPredicate)
(instance friend SymmetricRelation)
(instance friend IntentionalRelation)

(documentation friend "(&%holdsDuring ?T1 (&%friend ?H1 ?H2)) means that
during time ?T1, ?H1 and ?H2 know each other, share a relationship of
mutual care and concern, and probably also share some common interests.")

(domain friend 1 Human)
(domain friend 2 Human)
(subrelation friend mutualAcquaintance)

;; coworker
(instance coworker BinaryPredicate)
(instance coworker SymmetricRelation)

(documentation coworker "(&%holdsDuring ?T1 (&%coworker ?H1 ?H2)) means
that during time ?T1, ?H1 and ?H2 are both employed by the same agent, are
of roughly the same job status, and come into contact at least part of the
time at the same work location.")

(domain coworker 1 Human)
(domain coworker 2 Human)
(subrelation coworker mutualAcquaintance)

(=>
 (holdsDuring ?T1 (coworker ?H1 ?H2))
 (exists (?ORG)
        (and
         (instance ?ORG Organization)
         (holdsDuring ?T1 (and
                           (employs ?ORG ?H1)
                           (employs ?ORG ?H2))))))

;; cohabitant
(instance cohabitant BinaryPredicate)
(instance cohabitant SymmetricRelation)
(instance cohabitant IntentionalRelation)

(documentation cohabitant "(&%holdsDuring ?T1 (&%cohabitant ?H1 ?H2))
means that during the time ?T1, ?H1 and ?H2 have the same home.")

(domain cohabitant 1 Human)
(domain cohabitant 2 Human)
;; Q: Maybe allow cohabitant to apply to all SentientAgents?
(subrelation cohabitant mutualAcquaintance)

(=>
 (holdsDuring ?T1 (cohabitant ?H1 ?H2))
 (exists (?UNIT)
   (and
     (instance ?UNIT SocialUnit)
     (holdsDuring ?T1 (and (member ?UNIT ?H1)
                           (member ?UNIT ?H2))))))

(=>
  (and
    (instance ?UNIT SocialUnit)
    (holdsDuring ?T1 (and (member ?UNIT ?H1)
                          (member ?UNIT ?H2))))
  (holdsDuring ?T1 (cohabitant ?H1 ?H2)))


;; Q: Move &%subordinatePosition out of
;; Transportation.kif and into Mid-level-ontology.kif
;; or Merge.kif?

;; relative
(instance relative BinaryPredicate)
(instance relative SymmetricRelation)
(domain relative 1 Organism)
(domain relative 2 Organism)

(documentation relative "(&%relative ?O1 ?O2) means that ?O1
and ?O2 are relatives, whether through common ancestry (consanguinity),
someone's marriage (affinity), or someone's adoption.  This definition is
intentionally broad, so as to capture a wide array of `familial'
relations.  The notion of who counts as `family' also varies between
cultures, but that aspect of meaning is not addressed here.")

(subrelation familyRelation relative)
;; Q: What is the rationale for making &%familyRelation
;; an instance of EquivalenceRelation?

;; Q: The rule below may be wrong, depending on the
;; intended range of meaning for &%legalRelation.  The
;; meaning of &%legalRelation must be made more
;; explicit (at least in the documentation), since the
;; domain for each argment is &%CognitiveAgent.  I
;; assume this is so &%legalRelation can be used with
;; instances of &%Organization.  ??
(=>
 (and
   (holdsDuring ?T1 (legalRelation ?A1 ?A2))
   (instance ?A1 Organism)
   (instance ?A2 Organism))
 (holdsDuring ?T1  (relative ?A1 ?A2)))

(subrelation spouse relative)

;; grandparent
(instance grandparent BinaryPredicate)
(instance grandparent AsymmetricRelation)
(domain grandparent 1 Human)
(domain grandparent 2 Human)

(documentation grandparent "(&%grandparent ?YOUNGER ?OLDER) means that
?OLDER is a &%parent of ?YOUNGER's &%parent.")

(subrelation grandmother grandparent)
(subrelation grandfather grandparent)
(subrelation grandparent ancestor)

;; parent -> father
(=>
  (and
    (parent ?CHILD ?PARENT)
    (instance ?PARENT Man))
  (father ?CHILD ?PARENT))

;; parent -> mother
(=>
  (and
    (parent ?CHILD ?PARENT)
    (instance ?PARENT Woman))
  (mother ?CHILD ?PARENT))

;; parent -> son
(=>
  (and
    (parent ?CHILD ?PARENT)
    (instance ?CHILD Man))
  (son ?CHILD ?PARENT))

;; parent -> daughter
(=>
  (and
    (parent ?CHILD ?PARENT)
    (instance ?CHILD Woman))
  (daughter ?CHILD ?PARENT))


;; NuclearFamily
(subclass NuclearFamily FamilyGroup)
(subclass NuclearFamily SocialUnit)

(documentation NuclearFamily "A &%NuclearFamily is a &%SocialUnit composed
of at least two and not more than three generations of &%familyRelations:
&%parents, their children, and possibly the parents' parents (children's
&%grandparents).")

;; TO DO: Add axiomatic support for defining and
;; concluding to NuclearFamily.

(=>
  (and
    (parent ?CHILD ?PARENT1)
    (parent ?CHILD ?PARENT2)
    (holdsDuring ?T1 
      (and 
        (spouse ?PARENT1 ?PARENT2)
        (cohabitant ?PARENT1 ?PARENT2)
	(cohabitant ?CHILD ?PARENT1))))
  (exists (?FAM)
    (and
      (instance ?FAM NuclearFamily)
      (holdsDuring ?T1
        (and
          (member ?CHILD ?FAM)
          (member ?PARENT1 ?FAM)
          (member ?PARENT2 ?FAM))))))

;; alias
(instance alias BinaryPredicate)
(instance alias AsymmetricRelation)
(domain alias 1 SymbolicString)
(domain alias 2 Agent)

(documentation alias "(&%alias ?STRING ?AGENT) means that ?STRING is an
alternate identifier for ?AGENT, and is likely being used to hide or
obscure ?AGENT's true identity.")

(subrelation alias names)

;; workAddress
(instance workAddress BinaryPredicate)
(instance workAddress AsymmetricRelation)
(subrelation workAddress address)

(documentation workAddress 
"(&%holdsDuring ?T1 (&%workAddress ?AGENT ?ADDRESS)) means that
during the time specified by ?T1, ?ADDRESS identifies one of the
locations at which ?AGENT works.")

;; homeAddress
(instance homeAddress BinaryPredicate)
(instance homeAddress AsymmetricRelation)
(subrelation homeAddress address)

(documentation homeAddress 
"(&%holdsDuring ?T1 (&%homeAddress ?AGENT ?ADDRESS)) means that
during the time specified by ?T1, ?ADDRESS identifies the
location of ?AGENT's home.")

;; playsRoleInEvent
(instance playsRoleInEvent TernaryPredicate)
(domain playsRoleInEvent 1 Object)
(domain playsRoleInEvent 2 CaseRole)
(domain playsRoleInEvent 3 Process)

(documentation playsRoleInEvent 
"(&%playsRoleInEvent ?OBJ ?ROLE ?EVENT) means that the &%Object
?OBJ is involved in the &%Process ?EVENT in a way specified by
the &%CaseRole predicate ?ROLE.")

(=>
 (playsRoleInEvent ?OBJ ?ROLE ?EVENT)
 (holds ?ROLE ?EVENT ?OBJ))

(=>
  (and
    (playsRoleInEvent ?OBJ ?ROLE ?EVENT)
    (subrelation ?ROLE ?ROLE2))
  (playsRoleInEvent ?OBJ ?ROLE2 ?EVENT))

(=>
 (and
   (holds ?ROLE ?EVENT ?OBJ)
   (instance ?ROLE CaseRole)
   (instance ?EVENT Process)
   (instance ?OBJ Object))
 (playsRoleInEvent ?OBJ ?ROLE ?EVENT))

(=>
 (and
   (playsRoleInEvent ?OBJ ?ROLE ?EVENT)
   (instance ?EVENT ?CLASS)
   (subclass ?CLASS Process)
   (time ?EVENT ?TIME)
   (located ?EVENT ?PLACE))
 (playsRoleInEventOfType ?OBJ ?ROLE ?CLASS ?TIME ?PLACE))

;; playsRoleInEventOfType
(instance playsRoleInEventOfType QuintaryPredicate)
(domain playsRoleInEventOfType 1 Object)
(domain playsRoleInEventOfType 2 CaseRole)
(domainSubclass playsRoleInEventOfType 3 Process)
(domain playsRoleInEventOfType 4 TimePosition)
(domain playsRoleInEventOfType 5 Object)

(documentation playsRoleInEventOfType "(&%playsRoleInEventOfType ?OBJ
?ROLE ?TYPE ?TIME ?PLACE) means that ?OBJ plays the role specified by
?ROLE in an instance of ?TYPE, which occurs at ?TIME and ?PLACE.")

(=>
 (playsRoleInEventOfType ?OBJ ?ROLE ?TYPE ?TIME ?PLACE)
 (exists (?EVENT)
   (and
     (instance ?EVENT ?TYPE)
     (time ?EVENT ?TIME)
     (located ?EVENT ?PLACE)
     (playsRoleInEvent ?OBJ ?ROLE ?EVENT))))

(=>
 (and
   (playsRoleInEvent ?OBJ ?ROLE ?EVENT)
   (instance ?EVENT ?TYPE)
   (subclass ?TYPE Process)
   (time ?EVENT ?TIME)
   (located ?EVENT ?PLACE))
 (playsRoleInEventOfType ?OBJ ?ROLE ?TYPE ?TIME ?PLACE))

;; detainedAtTimeInPlace - NB: This is so specialized that it
;; probably should be moved into NIEM.kif.
(instance detainedAtTimeInPlace TernaryPredicate)
(domain detainedAtTimeInPlace 1 SentientAgent)
(domain detainedAtTimeInPlace 2 TimePosition)
(domain detainedAtTimeInPlace 3 Object)

(documentation detainedAtTimeInPlace "(&%detainedAtTimeInPlace ?AGENT
?TIME ?PLACE) means that ?AGENT is held or confined by some more powerful
or authoritative agent for a time and at a location specified by ?TIME and
?PLACE.")

(<=>
 (detainedAtTimeInPlace ?AGENT ?TIME ?PLACE)
 (playsRoleInEventOfType ?AGENT detainee Confining ?TIME ?PLACE))

;; locatedAtTime
(instance locatedAtTime TernaryPredicate)
(domain locatedAtTime 1 Object)
(domain locatedAtTime 2 TimePosition)
(domain locatedAtTime 3 Object)

(documentation locatedAtTime "(&%locatedAtTime ?OBJ ?TIME ?PLACE) means
that during the time specified by ?TIME, ?OBJ was in the location
specified by ?PLACE.")

(<=>
 (locatedAtTime ?OBJ ?TIME ?PLACE)
 (holdsDuring ?TIME (located ?OBJ ?PLACE)))

;; locatedAtTime - NB: The rule below is not always correct.  It
;; could be made better by creating partlyLocatedAtTime, a less
;; stringent version of locatedAtTime.  However, it would be even
;; better to employ an inference engine that properly handles
;; &%holdsDuring, making it unnecessary to create predicates with
;; an extra time argument.
(=> 
  (and
    (playsRoleInEvent ?OBJ ?ROLE ?EVENT)
    (time ?EVENT ?TIME)
    (located ?EVENT ?PLACE))
  (locatedAtTime ?OBJ ?TIME ?PLACE))

;; observedAtTimeInPlace - NB: This is so specialized that it
;; probably should be moved into NIEM.kif.
(instance observedAtTimeInPlace QuaternaryPredicate)
(domain observedAtTimeInPlace 1 Object)
(domain observedAtTimeInPlace 2 Agent)
(domain observedAtTimeInPlace 3 TimePosition)
(domain observedAtTimeInPlace 4 Object)

(documentation observedAtTimeInPlace "(&%observedAtTimeInPlace
?OBJ ?AGENT ?TIME ?PLACE) means that during the time specified by
?TIME, ?OBJ is observed by ?AGENT to be in the location specified
by ?PLACE.  Note that in the implicit &%Seeing event, the
physical distance between the &%patient ?OBJ and the &%agent
?AGENT might be great (e.g., a hunter using binoculars to spot
Bighorn sheep on a distant mountainside).  Therefore, ?PLACE
denotes the specific location of ?OBJ at ?TIME, and not the
possibly much more extensive region encompassed by the &%Seeing
event.")

(=>
 (observedAtTimeInPlace ?OBJ ?AGENT ?TIME ?PLACE)
 (locatedAtTime ?OBJ ?TIME ?PLACE))

(=>
 (observedAtTimeInPlace ?OBJ ?AGENT ?TIME ?PLACE)
 (exists (?SEEING)
   (and
     (instance ?SEEING Seeing)
     (agent ?SEEING ?AGENT)
     (patient ?SEEING ?OBJ))))

(=>
 (and
   (instance ?SEEING Seeing)
   (patient ?SEEING ?OBJ)
   (agent ?SEEING ?AGENT)
   (instance ?OBJ Object)
   (time ?SEEING ?TIME)
   (holdsDuring ?TIME (located ?OBJ ?PLACE)))
 (observedAtTimeInPlace ?OBJ ?AGENT ?TIME ?PLACE))

(=>
  (observedAtTimeInPlace ?OBJ ?AGENT ?TIME ?PLACE)
  (playsRoleInEventOfType ?OBJ patient Seeing ?TIME ?PLACE))

(=>
  (observedAtTimeInPlace ?OBJ ?AGENT ?TIME ?PLACE)
  (playsRoleInEventOfType ?AGENT agent Seeing ?TIME ?PLACE))

;; NB: This needs more work.  The topic of ID strings, ID objects
;; (e.g., finger prints, DNA sequences) and their use for both
;; identification and deception merits an entire ontology of its own.
;; deceptiveIdentifier
(instance deceptiveIdentifier BinaryPredicate)
(instance deceptiveIdentifier AsymmetricRelation)
(domain deceptiveIdentifier 1 ContentBearingObject)
(domain deceptiveIdentifier 2 Agent)
(subrelation deceptiveIdentifier refers)
(subrelation alias deceptiveIdentifier)

(documentation deceptiveIdentifier "(&%deceptiveIdentifier ?OBJ ?AGENT)
means that ?AGENT presents ?OBJ as a representation of ?AGENT's `true'
identity, when in fact it is not.")

;; stranger
(instance stranger BinaryPredicate)

(documentation stranger "(&%stranger ?H1 ?H2) means that ?H1 has
not met ?H2, or, in other words, (&%not (&%acquaintance ?H1
?H2)).  Statements made with &%stranger should be temporally
specified with &%holdsDuring.  Note that &%stranger is not
symmetric, meaning that ?H2 might know ?H1.  For the symmetric
version, see &%mutualStranger.")

(domain stranger 1 Human)
(domain stranger 2 Human)

(disjointRelation stranger acquaintance)

;; mutualStranger
(instance mutualStranger BinaryPredicate)
(instance mutualStranger SymmetricRelation)

(documentation mutualStranger "(&%mutualStranger ?H1 ?H2) means that ?H1
and ?H2 have not met each other and do not know each other.  Statements
made with this predicate should be temporally specified with
&%holdsDuring.  See also the weaker, non-symmetric version of this
predicate, &%stranger.")

(domain mutualStranger 1 Human)
(domain mutualStranger 2 Human)
(subrelation mutualStranger stranger)
(subrelation spouse mutualAcquaintance)

(disjointRelation mutualStranger mutualAcquaintance)

;; domesticPartner
(instance domesticPartner BinaryPredicate)
(instance domesticPartner SymmetricRelation)
(instance domesticPartner IntentionalRelation)

(documentation domesticPartner "(&%holdsDuring ?T1
(&%domesticPartner ?H1 ?H2)) means that during the time ?T1, ?H1
and ?H2 live together and share a common domestic life but are
not joined in a traditional marriage, a common-law marriage, or a
civil union.")

(domain domesticPartner 1 Human)
(domain domesticPartner 2 Human)

(disjointRelation spouse domesticPartner)
(subrelation domesticPartner cohabitant)

;; legalGuardian
(instance legalGuardian BinaryPredicate)
(instance legalGuardian AntisymmetricRelation)

(documentation legalGuardian "(&%holdsDuring ?T1 (&%legalGuardian ?H1
?H2)) means that during the time ?T1, ?H2 has legal authority over
?H1, and is responsible for looking after ?H1's interests.")

(domain legalGuardian 1 Human)
(domain legalGuardian 2 Human)


;;; format and termFormat statements:

;; Predicates

(format en acquaintance "%1 is %n acquainted with %2")
(format en alias "%1 is %n an &%alias for %2")
(format en cohabitant "%1 and %2 %n{don't} live together")
(format en coworker "%1 and %2 are %n &%coworkers")
(format en deceptiveIdentifier "%1 is %n a false or unreliable identifier for %2")
(format en detainedAtTimeInPlace "%1 is &%detained during %2 in %3")
(format en domesticPartner "%1 and %2 are domestic partners")
(format en friend "%1 and %2 are %n &%friends with each other")
(format en grandparent "%2 is %n a grandparent of %1")
(format en homeAddress "%2 is %n a home &%address for %1")
(format en legalGuardian "%2 is %n %1's legal guardian")
(format en mutualAcquaintance "%1 and %2 are %n acquainted with each other")
(format en mutualStranger "%n{at least one of} %1 and %2 %p{don't} know%n{s the} %p{each} other")
(format en playsRoleInEvent "%1 %n{doesn't} play%p{s} the role of %2 in %3")
(format en observedAtTimeInPlace "%n{It is not true that} %2 sees %1 &%located in %4 during %3")
(format en playsRoleInEventOfType "%1 %n{doesn't} play%p{s} the role of %2 in some %3 event that occurs during %4 in %5")
(format en relative "%1 and %2 are %n related to each other")
(format en stranger "%1 %p{doesn't} know%n{s} %2")
(format en workAddress "%2 is %n a work &%address for %1")

;; Terms

(termFormat en NuclearFamily "nuclear family")

