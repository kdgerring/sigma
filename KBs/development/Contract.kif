;; ============================================================================
;;                    	    REARDEN COMMERCE, INC.
;;                	            Agreements Ontology
;; ============================================================================

;; Created by: Karen Joy Nomorosa (karen.nomorosa [at] reardencommerce [dot] com)
;; Created on: June 13, 2011
;; Last modified: 
;; Modified by: Karen Joy Nomorosa (karen.nomorosa [at] reardencommerce [dot] com)

;; Description:  This ontology describes different concepts attached to agreements
;; and contracts

;; Access to and use of these products is governed by the GNU General Public 
;; License <http://www.gnu.org/copyleft/gpl.html>. 
;; By using these products, you agree to be bound by the terms 
;; of the GPL.

;; We ask the people using or referencing this work cite our primary paper:

;; Niles, I., and Pease, A.  2001.  Towards a Standard Upper Ontology.  In 
;; Proceedings of the 2nd International Conference on Formal Ontology in 
;; Information Systems (FOIS-2001), Chris Welty and Barry Smith, eds, 
;; Ogunquit, Maine, October 17-19, 2001.  See also http://www.ontologyportal.org

(subclass Agreement Proposition)
(documentation Agreement EnglishLanguage "&%Agreement is the class of &%Propositions 
that express the contents of agreements entered into by &%CognitiveAgents. &%Agreement 
includes treaties, contracts, purchase orders, pledges, marriage vows, etc.  An 
&%Agreement may be written down in a document or other &%ContentBearingObject, it
can be verbal &%Communication, it can even be an implied agreement.")
(termFormat EnglishLanguage Agreement "agreement")

(=>
  (instance ?COMPACT Agreement)
  (exists (?COMM)
    (and
      (instance ?COMM Committing)
      (represents ?COMM ?COMPACT))))

(=>
  (instance ?AGREEMENT Agreement)
  (exists (?AGENT1 ?AGENT2)
    (and
      (partyToAgreement ?AGENT1 ?AGREEMENT)
      (partyToAgreement ?AGENT2 ?AGREEMENT)
      (not (equal ?AGENT1 ?AGENT2)))))
      

;; Initially modeled Contract (which is an enforcaeble agreement as a subclass of
;; Agreement, but later realized that an agreement is only a "contract" or is only
;; enforceable for a certain period of time, meaning that the same provision or 
;; clause can exist with the same people agreeing to it, but it's not a valid 
;; contract because it is not within a specified date.  So instead of subclassing
;; it from Agreement, a Normative attribute, ActiveAgreement, is now created describing
;; attaching a validity / contractual time interval to the agreement      

               
;; ---------------------------------------------------------------------------------
;; Agreement Relationships
;; ---------------------------------------------------------------------------------

(instance partyToAgreement BinaryPredicate)
(documentation partyToAgreement EnglishLanguage "(&%partyToAgreement ?AGENT ?PROP) 
means that the &%Agent ?AGENT has committed to the agreement ?PROP.")
(termFormat EnglishLanguage partyToAgreement "party to agreement")

(domain partyToAgreement 1 CognitiveAgent)
(domain partyToAgreement 2 Agreement)

(=>
  (partyToAgreement ?AGENT ?CONTENT)
  (exists (?C)
    (and
      (instance ?C Committing)
      (agent ?C ?AGENT)
      (patient ?C ?CONTENT))))

(instance agreementPeriod BinaryPredicate)
(domain agreementPeriod 1 Agreement)
(domain agreementPeriod 2 TimeInterval)
(documentation agreementPeriod EnglishLanguage "(&%agreementPeriod ?AGREEMENT ?DURATION) 
holds if ?DURATION specifies a &%TimeDuration, which is the length of time that the
?AGREEMENT is &%ActiveAgreement.")

(=>
  (and
    (agreementPeriod ?AGREEMENT ?DURATION)
    (effectiveDate ?AGREEMENT ?STARTDATE))
  (holdsDuring (TimePeriodFn ?STARTDATE ?DURATION)
    (property ?AGREEMENT ActiveAgreement)))

(instance effectiveDate BinaryPredicate)
(domain effectiveDate 1 Agreement)
(domain effectiveDate 2 TimePoint)
(documentation effectiveDate EnglishLanguage "(&%effectiveDate ?AGREEMENT ?TIME) means
that ?AGREEMENT goes into effect at &%TimePoint ?TIME, and remains an &%ActiveAgreement
for &%TimeDuration ?DURATION.")
      
(instance TimePeriodFn BinaryFunction)
(documentation TimePeriodFn EnglishLanguage "(&%TimePeriodFn ?TIMEPOINT ?DURATION) 
accepts &%TimePoint ?TIMEPOINT and &%TimeDuration ?DURATION and returns a &%TimeInterval
that starts from ?TIMEPOINT and ends at the end of ?DURATION")
(termFormat EnglishLanguage TimePeriodFn "time period function")

(domain TimePeriodFn 1 TimePoint)
(domain TimePeriodFn 2 TimeDuration)
(range TimePeriodFn TimeInterval)

(=>
  (and
    (instance ?T1 TimePoint)
    (instance ?T2 TimePoint)
    (equal ?INTERVAL (TimeIntervalFn ?T1 ?T2))
    (duration ?INTERVAL ?PERIOD))
  (equal ?INTERVAL (TimePeriodFn ?T1 ?PERIOD)))

(instance expirationDate BinaryPredicate)
(domain expirationDate 1 Agreement)
(domain expirationDate 2 TimePoint)
(documentation expirationDate EnglishLanguage "(&%expirationDate ?AGREEMENT ?ENDDATE) 
means that ?ENDDATE is the date on which ?AGREEMENT is no longer &%ActiveAgreement.")

(=>
  (expirationDate ?AGREEMENT ?ENDDATE)
  (holdsDuring (FutureFn ?ENDDATE)
    (not (property ?AGREEMENT ActiveAgreement))))
   
(instance agreementClause QuaternaryPredicate)
(documentation agreementClause EnglishLanguage "(&%agreementClause ?PROP ?ATTR
?AGREEMENT ?AGENT) means that &%Proposition ?PROP, which has &%modalAttribute ?ATTR, 
is part of &%Agreement ?AGREEMENT and, with &%CognitiveAgent ?AGENT being the one
responsible to make the statement true")
(termFormat EnglishLanguage agreementClause "agreement clause")

(domain agreementClause 1 Proposition)
(domain agreementClause 2 DeonticAttribute)
(domain agreementClause 3 Agreement)
(domain agreementClause 4 CognitiveAgent)

(=>
  (agreementClause ?PROP ?ATTR ?AGREEMENT ?AGENT)
  (and
    (exists (?CLAUSE)        
      (containsInformation ?CLAUSE ?PROP))
    (partyToAgreement ?AGENT ?AGREEMENT)))

(=>
  (and
    (agreementClause ?PROP ?ATTR ?AGREEMENT ?AGENT)
    (or
      (equals ?ATTR Obligation)
      (equals ?ATTR Promise)))
  (modalAttribute
    (exists (?PROC)
      (and
        (realization ?PROC ?PROP)
        (agent ?PROC ?AGENT))) Likely))
        
(=>
  (agreementClause ?PROP Prohibition ?AGREEMENT ?AGENT)
  (not
    (holdsRight
      (exists (?PROC)
        (and
          (realization ?PROC ?PROP)
          (agent ?PROC ?AGENT))) ?AGENT)))
        
(=>
  (agreementClause ?PROP Permission ?AGREEMENT ?AGENT)
  (holdsRight
    (exists (?PROC)
      (and
        (realization ?PROC ?PROP)
        (agent ?PROC ?AGENT))) ?AGENT))
      
(instance ActiveAgreement RelationalAttribute)
(documentation ActiveAgreement EnglishLanguage "&%ActiveAgreement describes an &%Agreement
that is still binding or is still in effect")
(termFormat EnglishLanguage ActiveAgreement "active agreement")

(=>
  (property ?AGREEMENT ActiveAgreement)
  (instance ?AGREEMENT Agreement))

(=>
  (property ?AGREEMENT ActiveAgreement)
  (modalAttribute
    (exists (?PROC)
      (realization ?PROC ?AGREEMENT)) Obligation))
      
 
;; (instance agreementActive BinaryPredicate)
;; (domain agreementActive 1 Agreement)
;; (domain agreementActive 2 TimeInterval)
;; (documentation agreementActive EnglishLanguage "(&%agreementActive ?AGREEMENT ?TIME) 
;; means that ?AGREEMENT is an &%Obligation within &%TimeInterval ?TIME")v
;;
;; (<=>
;;  (and
;;    (agreementPeriod ?Agreement ?Period)
;;    (overlapsTemporally ?Date ?Period))
;;  (agreementActive ?Agreement ?Date))
;; transform this into ActiveAgreement:

;; ---------------------------------------------------------------------------------
;; Contract
;; ---------------------------------------------------------------------------------

(subAttribute Contract ActiveAgreement)
(documentation Contract EnglishLanguage "&%Contract is a type of &%Agreement that is 
legally enforceable, meaning a &%CognitiveAgent can pursue other parties of the 
agreement in a court of law if provisions of the contract are not followed or kept.  
It follows that all subpropositions of the &%Contract is &%Legal.")
(termFormat EnglishLanguage Contract "contract")

(=>
  (property ?AGREEMENT Contract)
  (forall (?X)
    (=>
      (subProposition ?X ?AGREEMENT)
      (modalAttribute ?X Legal))))
      
(=>
  (and
    (property ?AGREEMENT Contract)
    (partyToAgreement ?AGENT1 ?AGREEMENT)
    (partyToAgreement ?AGENT2 ?AGREEMENT)
    (instance ?PROC IntentionalProcess)
    (agent ?PROC ?AGENT1)
    (realization ?PROC ?PROP)
    (not (consistent ?PROP ?AGREEMENT)))
  (modalAttribute
    (exists (?LEGAL)
      (and
        (instance ?LEGAL LegalAction)
        (plaintiff ?LEGAL ?AGENT2)
        (defendant ?LEGAL ?AGENT1))) Possibility))
        
 
(instance MarriageContract Contract)
(documentation MarriageContract EnglishLanguage "An &%Contract between a married couple 
about how assets owned by the couple will be distributed in the event 
that the couple is divorced.")

(=>
  (instance ?C MarriageContract)
  (exists (?P1 ?P2)
    (and
      (partyToAgreement ?C ?P1)
      (partyToAgreement ?C ?P2)
      (spouse ?P1 ?P2))))       
      
(instance PurchaseContract Contract)
(documentation PurchaseContract EnglishLanguage "A &%Contract between two &%Agents in 
which one &%Agent agrees to render the other some good or service in exchange for 
currency.")

(=>
  (property ?C PurchaseContract)
  (exists (?S)
    (and
      (instance ?S Selling)
      (agent ?S ?SELLER)
      (destination ?S BUYER)
      (realization ?S ?C)
      (partyToAgreement ?C ?SELLER)
      (partyToAgreement ?C ?BUYER))))

(instance ServiceContract Contract)
(documentation ServiceContract EnglishLanguage "A &%Contract where an &%Agent agrees to 
perform a service for another &%Agent (usually for a price).")

(=>
  (property ?C ServiceContract)
  (exists (?SP)
    (and
      (instance ?SP ServiceProcess)
      (realization ?SP ?C)
      (serviceProvider ?SP ?SERVICE)
      (serviceRecipient ?SP ?CUST)
      (partyToAgreement ?C ?SERVICE)
      (partyToAgreement ?C ?CUST))))

(subAttribute Warranty ServiceContract)
(documentation Warranty EnglishLanguage "A &%Contract that states the cirumstances 
under which defects in the product will be corrected for no charge.  
A &%Warranty is usually limited to a length of time that is specified 
in the &%Warranty itself.  A &%Warranty also includes information about 
what is not covered and actions that invalidate the &%Warranty.")

