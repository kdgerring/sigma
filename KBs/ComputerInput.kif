;; Access to and use of these products is governed by the GNU General Public 
;; License <http://www.gnu.org/copyleft/gpl.html>. 
;; By using these products, you agree to be bound by the terms 
;; of the GPL.

;; contact: Adam Pease, Articulate Software, apease [at] articulatesoftware dot com

;; We ask that people using or referencing this work cite our primary paper and book:

;; Niles, I., and Pease, A.  2001.  Towards a Standard Upper Ontology.  In 
;; Proceedings of the 2nd International Conference on Formal Ontology in 
;; Information Systems (FOIS-2001), Chris Welty and Barry Smith, eds, 
;; Ogunquit, Maine, October 17-19, 2001.  See also http://www.ontologyportal.org

;; Pease, A., (2011). Ontology: A Practical Guide. Articulate Software Press, 
;; Angwin, CA. ISBN 978-1-889455-10-5.


(instance contraryAttributeWRT TernaryPredicate)
(domain contraryAttributeWRT 1 Attribute)
(domain contraryAttributeWRT 2 Attribute)
(domain contraryAttributeWRT 3 BinaryPredicate)
(documentation contraryAttributeWRT EnglishLanguage "(contraryAttributeWRT ?ATT1 ?ATT2 ?ATTPRED) means that nothing can have both attributes at the same time using the attribute predicate ?ATTPRED.")

; only subrelations of &%attribute may be the third argument to &%contraryAttributeWRT
; (condition
;   (contraryAttributeWRT ?ATT1 ?ATT2 ?PRED)
;   (subrelation ?PRED attribute))

; nothing can have two attributes using the same predicate simultaneously 
; if they are disjoint with respect to that predicate
(not
  (and
    (contraryAttributeWRT ?ATT1 ?ATT2 ?PRED)
    (?PRED ?ENTITY ?ATT1)
    (?PRED ?ENTITY ?ATT2)))


(instance havePartTypes BinaryPredicate)
(domainSubclass havePartTypes 1 Object)
(domainSubclass havePartTypes 2 Object)
(documentation havePartTypes EnglishLanguage "(havePartTypes ?WHOLE_TYPE ?PART_TYPE) means that every instance of ?WHOLE_TYPE has as a &%part an instance of ?PART_TYPE.")
(=>
  (and
    (havePartTypes ?WHOLE_TYPE ?PART_TYPE)
    (instance ?WHOLE ?WHOLE_TYPE))
  (exists (?PART)
    (and
      (instance ?PART ?PART_TYPE)
      (parts ?PART ?WHOLE))
  ))



(instance partTypes BinaryPredicate)
(domainSubclass partTypes 1 Object)
(domainSubclass partTypes 2 Object)
(documentation partTypes EnglishLanguage "(partTypes ?PART_TYPE ?WHOLE_TYPE) means that every instance of ?PART_TYPE is a &%part of an instance of ?WHOLE_TYPE.")
(=>
  (and
    (partTypes ?PART_TYPE ?WHOLE_TYPE)
    (instance ?PART ?PART_TYPE))
  (exists (?WHOLE)
    (and
      (instance ?WHOLE ?WHOLE_TYPE)
      (parts ?PART ?WHOLE))
  ))


(instance classIntersection TernaryPredicate)
(domain classIntersection 1 Class)
(domain classIntersection 2 Class)
(documentation classIntersection EnglishLanguage "(classIntersection ?CLASS1 ?CLASS2 ?INT_CLASS) means that ?INT_CLASS is the intersection of the two classes, ?CLASS1 and ?CLASS2.  This means that every instance of ?CLASS1 that is also an instance of ?CLASS2 is an instance of ?INT_CLASS and that every instance of ?INT_CLASS is an instance of both ?CLASS1 and ?CLASS2.")
; every instance of the intersection is an instance of the two intersecting classes.
(=>
  (classIntersection ?CLASS1 ?CLASS2 ?INTERSECT)
  (and
    (subclass ?INTERSECT ?CLASS1)
    (subclass ?INTERSECT ?CLASS2)))

; every item that is an instance of both classes is an instance of the intersecction.
(=>
  (and
    (classIntersection ?CLASS1 ?CLASS2 ?INTERSECT)
    (instance ?ITEM ?CLASS1)
    (instance ?ITEM ?CLASS2))
  (instance ?ITEM ?INTERSECT))



; ===============
(isa shape BinaryPredicate)
(subrelation shape property)
(domain shape 1 Physical)
(domain shape 2 ShapeAttribute)

(instance Round ShapeAttribute)
(instance Elliptical ShapeAttribute)
(subAttribute Elliptical Round)
(=>
  (instance ?SHAPE Oval)
  (shape ?SHAPE Elliptical))

(instance Circular ShapeAttribute)
(subAttribute Circular Elliptical)
(=>
  (instance ?SHAPE Circle)
  (shape ?SHAPE Circular))

(instance DiskShaped ShapeAttribute)
(subAttribute DiskShaped Round)
(subAttribute DiskShaped Flat)
(=>
  (instance ?SHAPE Polygon)
  (shape ?SHAPE Polygonal))

(instance Spherical ShapeAttribute)
(contraryAttribute Spherical Flat)
(subAttribute Spherical Round)
(=>
  (instance ?SHAPE Sphere)
  (shape ?SHAPE Spherical))

(subclass SphericalObject Object)
(=>
  (instance ?SPHERE SphericalObject)
  (shape ?SHAPE Spherical))

(instance Cylindrical ShapeAttribute)
(subAttribute Cylindrical Round)
(contraryAttribute Cylindrical Flat)
(contraryAttribute Cylindrical Spherical)
(=>
  (instance ?SHAPE Cylinder)
  (shape ?SHAPE Cylindrical))

(instance Polygonal ShapeAttribute)
(contraryAttribute Polygonal Round)
(=>
  (instance ?SHAPE Polygon)
  (shape ?SHAPE Polygonal))

(instance Triangular ShapeAttribute)
(subAttribute Triangular Polygonal)
(=>
  (instance ?SHAPE Triangle)
  (shape ?SHAPE Triangular))

(instance QuadrilateralShaped ShapeAttribute)
(subAttribute QuadrilateralShaped Polygonal)
(contraryAttribute QuadrilateralShaped Triangular)
(=>
  (instance ?SHAPE Quadrilateral)
  (shape ?SHAPE QuadrilateralShaped ))

(instance Rectangular ShapeAttribute)
(subAttribute Rectangular QuadrilateralShaped)
(=>
  (instance ?SHAPE Rectangle)
  (shape ?SHAPE Rectangular ))

(instance SquareShaped ShapeAttribute)
(subAttribute SquareShaped Rectangular)
(=>
  (instance ?SHAPE Square)
  (shape ?SHAPE SquareShaped))

; =========================================================

(subclass Keyboard Device)
(documentation Keyboard EnglishLanguage "A &%Keyboard has a set of keys for typing on to transmit data corresponding to those keys or to cause physical marking of the selected keys on paper or some other surface.")


(subclass ComputerIODevice ComputerOutputDevice)
(subclass ComputerIODevice ComputerInputDevice)
(documentation ComputerIODevice EnglishLanguage "A &%ComputerIODevice is both a &%ComputerInputDevice and a &%ComputerOutputDevice.")


(subclass ComputerTerminal ComputerIODevice)
;; It is already defined as a ComputerOutputDevice.
(documentation ComputerTerminal EnglishLanguage "An interactive combination &%ComputerInputDevice and &%ComputerOutputDevice.  The input device sends (normally) characters input by the user and the output device relays output to the user.  Early computer terminals output text to paper; terminals for sight disadvantaged people may provide audio or tactile output to the user, but most terminals around the turn of the 21st Century display text and/or images on a display device.  Traditional computer terminals have given way to personal computers with separate keyboards and screens.

A &%ComputerTerminal is contrasted with a &%Printer, which is an output only device which does not output directly in view of the user and which only makes hardcopies of computer output by altering the surface of the hard copy in a way that is for practical purposes, permanent.")

(subclass ComputerDisplay ComputerOutputDevice)
(subclass ComputerDisplay DataDisplayDevice)
(documentation ComputerDisplay EnglishLanguage "A &%ComputerOutputDevice for displaying information on some sort of screen or other reusable visible output surface.  This is contrasted with a &%Printer, which places a substance on a surface that is for practical purposes, permanent.")
(disjoint ComputerDisplay Printer)

(instance displayedUpon BinaryPredicate)
(domain displayedUpon 1 Image)
(domain displayedUpon 2 ComputerDisplay)
(documentation displayedUpon EnglishLanguage "(displayedUpon ?IMAGE ?DISPLAY) means that the image, ?IMAGE is displayed upon the &%ComputerDisplay, ?DISPLAY.")


(subclass ComputerScreen ComputerDisplay)
(documentation ComputerScreen EnglishLanguage "A &%ComputerDisplay for displaying information on some sort of screen.")
(=>
  (instance ?SCREEN ComputerScreen)
  (shape ?SCREEN Rectangular))

(subclass ComputerKeyboard_Generic ComputerInputDevice)
(subclass ComputerKeyboard_Generic ComputerInputDevice)
(documentation ComputerKeyboard EnglishLanguage "A &%ComputerInputDevice for accepting typed input.  This could be a keyboard with a typewriter layout, a cell phone keypad or any other similar device.")



(subclass ComputerInputButton ComputerInputDevice)
(documentation ComputerInputButton EnglishLanguage "A physical &%ComputerInputDevice such that pushing the button down, pushing it down twice quickly, and/or holding it down causes a signal to be sent to a computer (if everything necessary is turned on and connected).  This could be a key on a keyboard, mouse, telephone, ATM, or other piece of equipment.")


(subclass MouseButton ComputerInputButton)
(documentation MouseButton EnglishLanguage "A &%ComputerInputButton on a &%ComputerMouse.")

(subclass PhysicalRightCIButton ComputerInputButton)
(documentation PhysicalRightCIButton EnglishLanguage "A &%ComputerInputButton physically on the right side of a set of &%ComputerInputButtons.  A computer system may be told to logically switch the right and left buttons (e.g., for a person who uses a mouse in the left hand -- in such a case, the &%LeftCIButton is the &%PhysicalRightCIButton).")

(subclass PhysicalLeftCIButton ComputerInputButton)
(documentation PhysicalLeftCIButton EnglishLanguage "A &%ComputerInputButton physically on the left side of a set of &%ComputerInputButtons.  A computer system may be told to logically switch the right and left buttons (e.g., for a person who uses a mouse in the left hand -- in such a case, the &%RightCIButton is the &%PhysicalLeftCIButton).")

(subclass RightCIButton ComputerInputButton)
(documentation RightCIButton EnglishLanguage "A &%ComputerInputButton logically on the right side of a set of &%ComputerInputButtons.  Normally, the &%PhysicalRightCIButton.  A computer system may be told to logically switch the right and left buttons (e.g., for a person who uses a mouse in the left hand -- in such a case, the &%RightCIButton is the leftmost physical button.")

(subclass LeftCIButton ComputerInputButton)
(documentation LeftCIButton EnglishLanguage "A &%ComputerInputButton logically on the left side of a set of &%ComputerInputButtons.  Normally, the &%PhysicalLeftCIButton.  A computer system may be told to logically switch the right and left buttons (e.g., for a person who uses a mouse in the left hand -- in such a case, the &%LeftCIButton is the rightmost physical button.")
(disjoint RightCIButton LeftCIButton)
(=>
  (and
    (instance ?RIGHT RightCIButton)
    (component ?RIGHT ?DEV)
    (instance ?DEV ComputerInputDevice))
  (exists (?LEFT)
    (andO
      (instance ?LEFT LeftCIButton)
      (component ?LEFT ?DEV)
      (orientation ?RIGHT ?LEFT Left))))

(subclass MiddleCIButton ComputerInputButton)
(documentation RightCIButton EnglishLanguage "A &%ComputerInputButton in the middle of a row of three &%ComputerInputButtons.")
(disjoint RightCIButton MiddleCIButton)
(disjoint MiddleCIButton LeftCIButton)
(=>
  (and
    (instance ?MID MiddleCIButton)
    (component ?MID ?DEV)
    (instance ?DEV ComputerInputDevice))
  (exists (?LEFT ?RIGHT)
    (and
      (instance ?RIGHT RightCIButton)
      (instance ?LEFT LeftCIButton)
      (component ?RIGHT ?DEV)
      (component ?LEFT ?DEV)
      (between ?LEFT ?MID ?RIGHT)
      (orientation ?MID ?LEFT Left)
      (orientation ?MID ?RIGHT Right))))

(subclass ComputerKeyboardKey ComputerInputButton)
(documentation ComputerKeyboardKey EnglishLanguage "A &%ComputerInputButton on a &%ComputerKeyboard.")
(disjoint ComputerKeyboardKey RightCIButton)
(disjoint ComputerKeyboardKey MiddleCIButton)
(disjoint ComputerKeyboardKey LeftCIButton)
(disjoint ComputerKeyboardKey MouseButton)
; every Computer Keyboard Key is part of a Computer Keyboard
(=>
  (instance ?KEY ComputerKeyboardKey)
  (exists (?KEYBOARD)
    (and
      (instance ?KEYBOARD ComputerKeyboard-Generic)
      (component ?KEY ?KEYBOARD))))

; every Computer Keyboard Key is part of no more than one Computer Keyboard
(=>
  (and
    (instance ?KEY ComputerKeyboardKey)
    (instance ?KEYBOARD1 ComputerKeyboard-Generic)
    (component ?KEY ?KEYBOARD1) 
    (instance ?KEYBOARD2 ComputerKeyboard-Generic)
    (component ?KEY ?KEYBOARD2)) 
  (equals ?KEYBOARD1 ?KEYBOARD2))

; every Computer Keyboard has a Computer Keyboard Key as a component
(=>
  (instance ?KEYBOARD ComputerKeyboard-Generic)
  (exists (?KEY)
    (and
      (instance ?KEY ComputerKeyboardKey)
      (component ?KEY ?KEYBOARD))))

; every keyboard key is a component of some computer keyboard
(=>
   (instance ?KEY ComputerKeyboardKey)
   (exists (?KEYBOARD)
       (and
         (instance ?KEYBOARD ComputerKeyboard-Generic)
         (component ?KEY ?KEYBOARD))))



(subclass FunctionKey ComputerKeyboardKey)
(documentation ComputerKeyboardKey EnglishLanguage "A &%FunctionKey is a type of &%ComputerKeyboardKey on a &%ComputerKeyboard that does not send a single character to a computer to which it is attached.")


(subclass TouchpadKey ComputerInputButton)
(documentation TouchpadKey EnglishLanguage "A &%ComputerInputButton on a &%ComputerTouchpad. A touchpad key may be a &%RightCIButton, &%LeftCIButton, or &%MiddleCIButton.")
(disjoint ComputerKeyboardKey TouchpadKey)

(subclass ComputerKeyboard ComputerKeyboard_Generic)
(subclass ComputerKeyboard Keyboard)
(documentation ComputerKeyboard EnglishLanguage "A &%ComputerInputDevice for accepting typed input with a typewriter layout.  A &%ComputerKeyboard may have additional keys and arrays of keys that are not on a typewriter keyboard.")

(subclass ComputerKeypad ComputerKeyboard_Generic)
(documentation ComputerKeypad EnglishLanguage "A &%ComputerKeyboard_Generic that does not have a typewriter layout.")
(disjoint ComputerKeypad ComputerKeyboard_Generic)
; Every Computer keyboard has at least one key
; This is not stated at the CK-Generic level since a displayed keyboard 
; used for interaction only has displayed keys, not physical keys as 
; components.


; ===========

(subclass ComputerMouse ComputerInputDevice)
(documentation ComputerMouse EnglishLanguage "A &%ComputerInputDevice that fits in a person's hand for accepting point and click input on a 2D surface.  A computer mouse has one or more buttons and may have a &%ScrollWheel as well.  A mouse may be connected to a computer by a power and signalling cable or may have a wireless connection.")
(disjoint ComputerMouse ComputerKeyboard)
(hasPartTypes ComputerMouse MouseButton)
(partTypes MouseButton ComputerMouse)

(subclass ScrollWheel ComputerInputDevice)
(documentation ScrollWheel EnglishLanguage "A &%ComputerInputDevice that consists of a wheel that projects perpendicularly out of a surface.  A &%ComputerUser may rotate it in either direction with a finger.  &%ScrollWheels are often part of &%ComputerMouses.")
(disjoint ScrollWheel ComputerKeyboard_Generic)
(disjoint ScrollWheel ComputerMouse)

(subclass TouchSensitiveComputerInputDevice ComputerInputDevice)
(documentation TouchSensitiveComputerInputDevice EnglishLanguage "A touch-sensitive &%ComputerInputDevice for accepting point and click input on a 2D surface.  The device is operated by moving (normally) a finger across the surface of the device.  Clicking may be achieved by clicking on an adjacent button or by tapping the surface.  Two basic types of &%TouchSensitiveComputerInputDevices are &%ComputerTouchpad and &%TouchScreen.")
(disjoint TouchSensitiveComputerInputDevice ComputerMouse)
(disjoint TouchSensitiveComputerInputDevice ComputerKeyboard)
(disjoint TouchSensitiveComputerInputDevice ScrollWheel)

(subclass ComputerTouchpad TouchSensitiveComputerInputDevice )
(documentation ComputerTouchpad EnglishLanguage "A touch-sensitive &%ComputerInputDevice for accepting point and click input on a 2D surface.  The device is operated by moving (normally) a finger across the surface of the device.  Clicking may be achieved by clicking on an adjacent button or by tapping the surface.")
(disjoint ComputerScreen ComputerTouchpad)

(subclass ComputerTouchscreen TouchSensitiveComputerInputDevice)
(subclass ComputerTouchscreen ComputerScreen)
(classIntersection ComputerScreen TouchSensitiveComputerInputDevice 
                   ComputerTouchscreen)
(documentation ComputerTouchscreen EnglishLanguage "A touch-sensitive &%ComputerScreen for accepting point and click input on its display surface.  The device is operated by moving (normally) a finger across the surface of the device.  Clicking is achieved by tapping the surface.  Multi-finger gestures may have other effects.")

(subclass ComputerTouchscreenKeyboard ComputerTouchscreen)
(subclass ComputerTouchscreenKeyboard Icon)
(subclass ComputerTouchscreenKeyboard Image)
(subclass ComputerTouchscreenKeyboard ComputerKeyboard_Generic)
(classIntersection ComputerKeyboard TouchSensitiveComputerInputDevice
                   ComputerTouchscreenKeyboard)
(documentation ComputerTouchscreenKeyboard EnglishLanguage "A portion of a &%ComputerTouchscreen which displays a keyboard and acts as a keyboard, accepting taps on the key images as if the keys were typed.")
(=>
   (instance ?KEYBOARD ComputerTouchscreenKeyboard )
   (exists (?SCREEN)
       (and
         (instance ?SCREEN ComputerTouchscreen )
         (displayedUpon ?KEYBOARD ?SCREEN))))



(subclass ComputerTouchscreenKeypad ComputerTouchscreenKeyboard)
(subclass ComputerTouchscreenKeypad ComputerKeypad)
(classIntersection ComputerKeypad ComputerTouchscreen ComputerTouchscreenKeypad)
(documentation ComputerTouchscreenKeypad EnglishLanguage "A portion of a &%ComputerTouchscreen which displays a keyboard and acts as a keyboard, accepting taps on the key images as if the keys were typed.")

(subclass SpeakerDevice Device)
(documentation SpeakerDevice EnglishLanguage "A &%Device for projecting sound into a medium.")
(=>
  (instance ?SPEAKER SpeakerDevice)
  (capability RadiatingSound instrument ?SPEAKER))

(subclass ElectricSpeakerDevice SpeakerDevice)
(subclass ElectricSpeakerDevice ElectricDevice)
(documentation ElectricSpeakerDevice EnglishLanguage "A combination &%SpeakerDevice and  &%ElectricDevice.")
(=>
  (and
    (instance ?DEV SpeakerDevice)
    (instance ?DEV ElectricDevice))
  (instance ?DEV ElectricSpeakerDevice))

(subclass Loudspeaker ElectricSpeakerDevice)
(documentation Loudspeaker EnglishLanguage "A &%SpeakerDevice for projecting sound through the air.  A loudspeaker produces louder sound than earphones or a hearing aid.")



(subclass Earphone ElectricSpeakerDevice)
(subclass Earphone WearableItem)
(documentation Earphone EnglishLanguage "A &%WearableItem worn on the head with an &%ElectricSpeaker device located near one or both ears.")
(disjoint Earphone Loudspeaker)
(=>
  (and
    (instance ?EARPHONE Earphone)
    (wears ?PERSON ?EARPHONE)
    (instance ?HEAD Head)
    (part ?HEAD PERSON))
  (located ?EARPHONE ?HEAD))


(subclass ComputerLoudspeaker ComputerOutputDevice)
(subclass ComputerLoudspeaker Loudspeaker)
(documentation ComputerLoudspeaker EnglishLanguage "A &%Loudspeaker which is also a &%ComputerOutputDevice.")
(=>
  (and
    (instance ?DEV Loudspeaker)
    (instance ?DEV ComputerOutputDevice))
  (instance ?DEV ComputerLoudspeaker))

(subclass ComputerMicrophone ComputerInputDevice)
(subclass ComputerMicrophone Microphone)
(classIntersection ComputerInputDevice Microphone ComputerMicrophone)
(documentation ComputerLoudspeaker EnglishLanguage "A &%Microphone which is also a &%ComputerInputDevice.")
(=>
  (and
    (instance ?DEV Microphone)
    (instance ?DEV ComputerOutputDevice))
  (instance ?DEV ComputerMicrophone))


(subclass VideoCamera Camera)
(subclass VideoCamera ElectricDevice)
(documentation VideoCamera EnglishLanguage "A &%Camera for taking video images.")
(=>
  (instance ?VCAMERA VideoCamera)
  (capability VideoRecording instrument ?VCAMERA))


(subclass Modem ComputerIODevice)
(documentation Modem EnglishLanguage "A type of ComputerIODevice and ComputerPeripheralDevice. Each Modem is a device designed to facilitate communication between computers by modulating analog signals to encode digital information, and demodulating analog signals to decode information back into digital format.")
(=>
  (instance ?MODEM Modem)
  (capability VideoRecording instrument ?MODEM))


(subclass CableModem Modem)
(documentation CableModem EnglishLanguage "A type of Modem that provides bi-directional data communication via radio frequency channels on a fiberoptic cable. Cable modems are primarily used to deliver broadband Internet access in the form of cable Internet.")
(=>
  (and
    (instance ?MODEM CableModem)
    (instance ?COMM Communication)
    (instrument ?COMM ?MODEM))
  (exists (?CABLE) 
    (and
      (instance ?CABLE CommunicationCable)
      (instrument ?COMM ?CABLE)
      (connectedEngineeringComponents ?CABLE ?MODEM))))


(subclass RadioModem Modem)
(documentation RadioModem EnglishLanguage "A type of Modem that provides bi-directional data communication via radio connection with a network or computer.")
(disjoint RadioModem CableModem)

(subclass ComputerHardware EngineeringComponent)
;; missing from QoSontology.kif
(subclass Joystick ComputerInputDevice)
(documentation Joystick EnglishLanguage "A type of &%ComputerInputDevice with a stick that can be activated to control a cursor in the X and Y directions.  A &%Joystick may or may not have an attached button for clicking.")

(subclass Trackball ComputerInputDevice)
(documentation Trackball EnglishLanguage "A type of &%ComputerInputDevice with a ball that can be rolled to control a cursor in the X and Y directions.  A &%Trackball may or may not have an attached button for clicking.")
(disjoint JoystickTrackball)


(subclass GameIODevice ComputerIODevice)
(documentation GameIODevice EnglishLanguage "A type of &%ComputerIODevice designed for playing video games.")


(subclass GamePad GameIODevice)
(documentation GamePad EnglishLanguage "A type of &%GameIODevice designed being held in two hands with the fingers, including thumbs being used to control multiple buttons and possibly other input devices such as &%Joysticks.")

(subclass Accelerometer Sensor)
(subclass Accelerometer ElectricDevice)
(documentation Accelerometer EnglishLanguage "A type of &%ElectricDevice used to measure acceleration.")

(subclass GameIODeviceWithAccelerometer GameIODevice)
(documentation GameIODeviceWithAccelerometer EnglishLanguage "A type of &%GameIODevice designed to be moved in three dimensions to detect sorts of motion used in sports and other physical activities.")
(hasPartTypes GameIODeviceWithAccelerometer Accelerometer)
(=>
  (and
    (instance ?DEVICE GameIODevice)
    (instance ?ACCELEROMETER Accelerometer)
    (component ?ACCELEROMETER ?DEVICE))
  (instance ?DEVICE GameIODeviceWithAccelerometer))



(subclass InternalDigitalDataStorageDevice DigitalDataStorageDevice)
(documentation InternalDigitalDataStorageDevice EnglishLanguage "A type of &%DigitalDataStorageDevice that is installed in a &%Computer and not readily removable.")

(subclass RemovableDigitalDataStorageDevice DigitalDataStorageDevice)
(documentation RemovableDigitalDataStorageDevice EnglishLanguage "A type of &%DigitalDataStorageDevice that can be temporarily installed in a computer and is readily removable.")
(disjoint InternalDigitalDataStorageDevice RemovableDigitalDataStorageDevice)


(subclass ComputerDisk DigitalDataStorageDevice)
(documentation ComputerDisk EnglishLanguage "A type of &%DigitalDataStorageDevice that is disk-shaped and is read while being spun in a &%DiskDrive.")
(=>
  (instance ?DISK ComputerDisk)
  (shape ?DISK DiskShaped))


(subclass HardDisk ComputerDisk)
(documentation HardDisk EnglishLanguage "A type of &%ComputerDisk that is hard, rather than floppy.  The 3 1/2'' floppy disk is considered a type of &%Floppy disk even though it is hard.  Hard disks can be internal to the computer, internal to an external drive, or removable.")


(subclass InternalHardDisk HardDisk)
(subclass InternalHardDisk InternalDigitalDataStorageDevice)
(documentation InternalHardDisk EnglishLanguage "A type of &%HardDisk that is installed in a &%Computer (in its &%HardDiskDrive) and is not readily removable.")
(=>
  (isa ?DISK InternalHardDisk)
  (exists (?DRIVE)
    (and
      (isa ?DRIVE InternalHardDiskDrive)
      (component ?DISK ?DRIVE))))




(subclass RemovableDisk ComputerDisk)
(subclass RemovableDisk RemovableDigitalDataStorageDevice )
(documentation RemovableDisk EnglishLanguage "A type of &%ComputerDisk that can be temporarily installed in a computer (in a &%DiskDrive) and is readily removable.")

(subclass CartridgeHardDisk HardDisk)
(subclass CartridgeHardDisk RemovableDisk)
(documentation CartridgeHardDisk EnglishLanguage "A type of &%HardDisk that can be temporarily installed in a computer (in its &%HardDiskDrive) and is readily removable.")


(subclass FloppyDisk RemovableDisk)
(documentation FloppyDisk EnglishLanguage "A type of &%ComputerDisk that can be temporarily installed in a &%DiskDrive and is readily removable.")
(disjoint FloppyDisk HardDisk)

(subclass CompactDisc RemovableDigitalDataStorageDevice )
(subclass CDROM CompactDisc)
(subclass CDROM ComputerDisc)
(subclass CDROM ComputerIOnputDevice)


(subclass CD-RW CompactDisc)
(subclass CD-RW ComputerDisk)
(subclass CD-RW ComputerIODevice)
(documentation CD-RW EnglishLanguage "A type of &%CompactDisc that can be written on and read from multiple times.")
(disjointWith CD-RW CDROM)


(subclass BluRayDisc OpticalDisc)
(documentation BluRayDisc EnglishLanguage "A type of &%CompactDisc that has significantly more storage than a &%DVD.")
(disjointWith BluRayDisc CompactDisc)
(disjointWith BluRayDisc DVD)



(subclass DiskDrive ComputerComponent)
(subclass DiskDrive DigitalDataStorageDevice )
(documentation DiskDrive EnglishLanguage "A device that can read and (often) write &%ComputerDisks.")
(=>
  (instance ?VCAMERA DiskDrive)
  (capability VideoRecording instrument ?VCAMERA))

(instance diskTypeForDrive BinaryPredicate)
(domainSubclass diskTypeForDrive 1 ComputerDisk)
(domainSubclass diskTypeForDrive 2 DiskDrive)
(documentation diskTypeForDrive EnglishLanguage "(diskTypeForDrive ?DISK_TYPE ?DRIVE_TYPE) means that disks of type ?DISK_TYPE are designed to be used by drives of type ?DRIVE_TYPE and such drives are designed to read (and possibly write) disks of type ?DISK_TYPE.")



(subclass ExternalDiskDrive DiskDrive)
(documentation ExternalHardDiskDrive EnglishLanguage "A type of &%DiskDrive that can be attached to a &%Computer by a cable.")
(disjoint ExternalDiskDrive InternalHardDisk)

(subclass ExternalHardDiskDrive HardDiskDrive)
(subclass ExternalHardDiskDrive ExternalDiskDrive)
(documentation ExternalHardDiskDrive EnglishLanguage "A type of &%HardDiskDrive that can be attached to a &%Computer by a cable.")

(subclass DiskDriveWithRemovableDisks DiskDrive)
(documentation DiskDriveWithRemovableDisks EnglishLanguage "A type of &%DiskDrive that can have different &%ComputerDisks installed at different times.  Insertion and removal of a disk are simple processes.")

(subclass CartridgeHardDiskDrive HardDiskDrive)
(subclass CartridgeHardDiskDrive DiskDriveWithRemovableDisks)
(documentation CartridgeHardDiskDrive EnglishLanguage "A type of &%HardDiskDrive that can have different &%CartridgeHardDisks at different times.  Insertion and removal of a disk are simple processes.")


(subclass HardDiskDrive DiskDrive)
; (documentation HardDiskDrive EnglishLanguage "A device that can read and write &%ComputerHardDisks.")

(subclass FloppyDiskDrive DiskDriveWithRemovableDisks)
(documentation FloppyDiskDrive EnglishLanguage "A device that can read and write &%FloppyDisks.")
(diskTypeForDrive FloppyDisk FloppyDiskDrive)


(subclass OpticalDiscDrive DiskDrive)
(documentation OpticalDiscDrive EnglishLanguage "A device that can read and (in some cases) write certain kinds of &%OpticalDisc.")
(diskTypeForDrive OpticalDisk OpticalDiskDrive)



(subclass CDDrive OpticalDiscDrive)
(documentation CDDrive EnglishLanguage "A device that can read and (in some cases) write &%CompactDiscs.")
(diskTypeForDrive CompactDisc CDDrive)

(subclass DVDDrive OpticalDiscDrive)
(documentation DVDDrive EnglishLanguage "A device that can read and (in some cases) write &%DVDs.")

(subclass BluRayDrive OpticalDiscDrive)
(documentation BluRayDrive EnglishLanguage "A device that can read and (in some cases) write &%BluRayDiscs.")
(diskTypeForDrive BluRayDiscs BluRayDrive)


; =============================

(subclass SolidStateDataStorageDevice DigitalDataStorageDevice)
(documentation SolidStateDataStorageDevice EnglishLanguage "A type of &%DigitalDataStorageDevice which can be read with no moving parts.")


(subclass FlashDrive SolidStateDataStorageDevice)
(subclass FlashDrive ComputerIODevice)
(subclass FlashDrive RemovableDigitalDataStorageDevice)
(documentation SolidStateDataStorageDevice EnglishLanguage "A &%FlashDrive is removable &%SolidStateDataStorageDevice that connects to a USB port.  A &%FlashDrive is alternatively called a ``USB drive'', ``USB flash drive'', ``thumb drive'', ``jump drive'', and ``pen drive''.")

(subclass MemoryCard SolidStateDataStorageDevice)
(subclass MemoryCard RemovableDigitalDataStorageDevice)
(subclass MemoryCard ComputerIODevice)
(documentation MemoryCard EnglishLanguage "A type of &%RemovableDigitalDataStorageDevice with no moving parts, that can be inserted into a camera, cell phone, computer, or similar device; written on that device; and switched to another device to be read.")
(disjoint FlashDrive MemoryCard)


(subclass Software Procedure)
(documentation Software EnglishLanguage "A set of instructions in a computer programming language that can be executed by a computer, possibly after compilation into another programming language.  The term &%Software includes &%ComputerPrograms (free-standing software), object methods, subroutines and software packages.")
(subclass ComputerProgram Software)

(subclass SoftwarePackage Software)
(documentation SoftwarePackage EnglishLanguage "A &%SoftwarePackage is a set of &%ComputerPrograms and &%DataFiles that operate together to enable various &%ComputerUser activities.")
(=>
  (instance ?PACK SoftwarePackage)
  (exists (?PROGRAM)
    (and 
      (instance ?PROGRAM ComputerProgram)
      (parts ?PROGRAM ?PACK))))

(=>
  (instance ?PACK SoftwarePackage)
  (exists (?FILE)
    (and 
      (instance ?FILE ComputerFile)
      (parts ?FILE ?PACK))))




(subclass UserInterface Software)
(documentation UserInterface EnglishLanguage "A &%UserInterface is a piece or collection of &%Software that allows a user to interact with a computer system or program.")


(subclass GraphicalUserInterface UserInterface)
(documentation GraphicalUserInterface EnglishLanguage "A &%GraphicalUserInterface is a &%UserInterface that allows users to interact with electronic devices with images rather than text commands.")
(abbreviation "GUI" GraphicalUserInterface)

(subclass UIElement Icon)
(documentation UIElement EnglishLanguage "A &%UIElement is a feature that a user uses to interact with a &%UserInterface.  The type of interaction depends upon the type of element and type of screen.")

(subclass ComputerMenu UIElement)
(documentation ComputerMenu EnglishLanguage "A &%ComputerMenu is an image generated by a computer program of a set of choices tha a user has for interacting with that program in conjunction with a method for the user to input a selection to the program.")

(subclass TextualComputerMenu ComputerMenu)
(documentation TextualComputerMenu EnglishLanguage "A &%TextualComputerMenu is a &%ComputerMenu that textually describes a user's options and permits the user to select one of the options by typing the appropriate thing into the computer.")




(subclass GUIElement Image)
(subclass GUIElement UIElement)
(documentation GUIElement EnglishLanguage "A &%GUIElement is an active image on a &%ComputerScreen that a user uses to interact with a &%GraphicalUserInterface.  The type of interaction depends upon the type of element and type of screen.")
(disjoint TextualComputerMenu GUIElement)

(subclass ComputerTouchscreenKeypad GUIElement)
(subclass ComputerTouchscreenKeyboard GUIElement)

(subclass ScrollBar GUIElement)
(documentation ScrollBar EnglishLanguage "A &%ScrollBar is an image of a slider on an &%InterfaceWindow that a user may move to shift the image in the window up and down or right and left in cases in which the logical image is larger than the portion displayed in the window.  The image may be pure text or may be graphics.")
(disjoint ComputerMenu ScrollBar)
; A ScrollBar can be used to move an image in a window
; A ScrollBar is typically moved by a mouse icon
; A ScrollBar can be moved by a roller
; A ScrollBar can be moved by arrow keys

(subclass GraphicalComputerMenu ComputerMenu)
(subclass GraphicalComputerMenu UIElement)
(classIntersection ComputerMenu UIElement GraphicalComputerMenu)

(documentation GraphicalComputerMenu EnglishLanguage "A &%GraphicalComputerMenu is a &%ComputerMenu that displays a user's options and permits the user to select one of the options in a graphical manner.")
; A GraphicalComputerMenu is typically accessed by a mouse icon
; A GraphicalComputerMenu can be accessed by arrow keys.

(instance accessableFromMenu BinaryPredicate)
(domain accessableFromMenu 1 Entity)   ; !!! Narrow this down
(domain accessableFromMenu 2 ComputerMenu)
(documentation accessableFromMenu EnglishLanguage "The property &%accessableFromMenu relates a file, computer process, or submenu to a &%ComputerMenu from which the object can be accessed.")


(subclass GraphicalSubMenu GraphicalComputerMenu)
(documentation GraphicalSubMenu EnglishLanguage "A &%GraphicalSubMenu is a &%GraphicalComputerMenu that appears when a user either makes a &%GraphicalMenuItem the active area or selects the menu item.")
(=> 
  (instance ?SUB GraphicalSubMenu)
  (exists (?MENU)
    (and
      (instance ?MENU GraphicalComputerMenu)
      (accessableFromMenu ?SUB ?MENU))))
; Note that this is not unique, since the same submenu conceptually be accessed 
; from multiple menus.


(subclass MouseIcon GUIElement)
(documentation MouseIcon EnglishLanguage "A &%MouseIcon is a &%GUIElement designed for a user to move around a computer screen.")
; A mouse icon may be controlled by a &%ComputerMouse, but may also be controlled by 
; software, a trackball, joystick, or keyboard arrow keys

(subclass InterfaceWindow GUIElement)
(documentation InterfaceWindow EnglishLanguage "An &%InterfaceWindow is a &%GUIElement that covers a (normally rectangular region of a computer screen.  Each window has an image which covers its whole area and a level of transparency.  A region of the screen may be covered by one or more &%InterfaceWindows in a specified order with the ``top'' window visible, and those sequentially underneigth visible only to the extent that the window(s) above them are partially or wholely transparent.  An interface window is ``active'' if the state of the GUI is such that user input is automatically set to it.")


(subclass PopupWindow InterfaceWindow)
(documentation PopupWindow EnglishLanguage "A &%PopupWindow is a &%InterfaceWindow that appears in addition to the window with which a user is interacting.  A popup window traditionally appears partially covering the previously active window, although some are place below the active window and are not visible until the active window no longer covers that area.  A popup window may be used to provide information (including advertising) to the user or may be an interaction window.")

(subclass HoverBox PopupWindow)
(documentation HoverBox EnglishLanguage "A &%HoverBox is a &%PopupWindow that temporarily appears when the cursor is within a &%HoverBoxActiveArea.")
; A &%HoverBox appears when 

(subclass GUIActiveArea GUIElement)
(documentation GUIActiveArea EnglishLanguage "A &%GUIActiveArea is a (normally rectangular) &%GUIElement which a user can select and interact with.")


(subclass HoverBoxActiveArea GUIActiveArea)
(documentation HoverBoxActiveArea EnglishLanguage "A &%HoverBoxActiveArea is a &%GUIActiveArea which, when it becomes active, causes a &%HoverBox to appear on the active display.")
; RULE NEEDED


(subclass TextBox GUIElement)
(documentation TextBox EnglishLanguage "A &%TextBox is a (normally rectangular) &%GUIElement which displays and/or accepts input of text.")

(subclass TextInputBox GUIActiveArea)
(subclass TextInputBox TextBox)
(documentation TextInputBox EnglishLanguage "A &%TextInputBox is a &%TextBox that accepts input of text.")
; Rule needed.  Note Paste (^V and via Right Click menu)

(subclass TextOutputBox TextBox)
(documentation TextOutputBox EnglishLanguage "A &%TextOutputBox is a &%TextBox that which displays text.")

(subclass ComputerMenuItem UIElement)
(documentation ComputerMenuItem EnglishLanguage "A &%ComputerMenuItem is a &%UIElement that presents one of the user's options and informs the running program if the user selects that option.")
(=>
   (instance ?MENU_ITEM ComputerMenuItem)
   (exists (?COMP_MENU)
       (and
         (instance ?COMP_MENU ComputerMenu)
         (agent ?ACTION ?COMP_USER))))

(subclass GraphicalMenuItem ComputerMenuItem)
(subclass GraphicalMenuItem GUIActiveArea)
(classIntersection ComputerMenuItem GUIActiveArea GraphicalMenuItem)
(documentation GraphicalMenuItem EnglishLanguage "A &%GraphicalMenuItem is a &%GUIActiveArea that is also a &%ComputerMenuItem. It presents one of the user's options and informs the running program if the user selects that option.")

(subclass GUI_Link HypertextLink)
(subclass GUI_Link GUIActiveArea)
(documentation GUI_Link EnglishLanguage "A &%GUI_Link is a &%GUIActiveArea that, if selected, sends a &%WebBrowser to a URL specified in the link.")

(subclass UserAction IntentionalProcess)
(documentation UserAction EnglishLanguage "A &%UserAction is an action taken by a &%ComputerUser in interacting with a &%ComputerProcess.")
(=>
   (instance ?ACTION UserAction)
   (exists (?COMP_USER)
       (and
         (instance ?COMP_USER ComputerUser)
         (agent ?ACTION ?COMP_USER))))

(subclass UserDirectAction UserAction)
(subclass UserDirectAction Icon)
(documentation UserDirectAction EnglishLanguage "A &%UserDirectAction is a physical action taken by a &%ComputerUser in interacting with a &%ComputerProcess -- clicking a button, moving a mouse, touching a screen -- not the action signified by the physical action (scrolling, selecting a link, moving a cursor, ...).  The action signifies an instruction to the computer.  See &%UserSignifiedAction.")


(subclass UserSignifiedAction UserAction)
(subclass UserSignifiedAction ComputerProcess)
(documentation UserSignifiedAction EnglishLanguage "A &%UserSignifiedAction is an action signified by physical action taken by a &%ComputerUser in interacting with a &%ComputerProcess -- scrolling, selecting a link, moving a cursor, ... -- not physical action itself (clicking a button, moving a mouse, touching a screen, ...).  Often several different types &%UserDirectAction (q.v.) could signify the same &%UserSignifiedAction.")
(disjoint UserDirectAction UserSignifiedAction)
(=>
   (instance ?ACTION UserDirectAction)
   (exists (?SIG_ACTION)
       (and
         (instance ?SIG_ACTION UserSignifiedAction)
         (represents ?ACTION ?SIG_ACTION))))
(=>
   (instance ?SIG_ACTION UserSignifiedAction)
   (exists (?DIR_ACTION)
       (and
         (instance ?DIR_ACTION UserDirectAction)
         (represents ?DIR_ACTION ?SIG_ACTION))))

(subclass KeyboardAction UserDirectAction)
(documentation KeyboardAction EnglishLanguage "A &%KeyboardAction is a &%UserDirectAction of hitting or holding down one or more keyboard keys.")
(=>
   (instance ?ACT KeyboardAction)
   (exists (?KEY)
       (and
         (instance ?KEY ComputerKeyboardKey)
         (patient ?ACT ?KEY))))


(subclass MultikeyAction KeyboardAction)
(documentation MultikeyAction EnglishLanguage "A &%MultikeyAction is a &%UserDirectAction of hitting or holding down more than one keyboard key at the same time.  All but one of the multiple keys are normally the shift, control, alt, function, or similar keys.")


(subclass KeyHoldDown KeyboardAction)
(documentation KeyHoldDown EnglishLanguage "A &%KeyHoldDown is a &%UserDirectAction of holding down a keyboard key for a while -- normally while taking some other action.  The held-down key is normally the shift, control, alt, function, or similar key.")

(subclass ShiftKeyHoldDown KeyHoldDown)
(documentation ShiftKeyHoldDown EnglishLanguage "A &%ShiftKeyHoldDown is a &%UserDirectAction of pressing and holding down the Shift key on a keyboard.")

(subclass ControlKeyHoldDown KeyHoldDown)
(documentation ControlKeyHoldDown EnglishLanguage "A &%ControlKeyHoldDown is a &%UserDirectAction of pressing and holding down the Control key on a keyboard.")
(disjoint ShiftKeyHoldDown ControlKeyHoldDown)

(subclass AltKeyHoldDown KeyHoldDown)
(documentation AltKeyHoldDown EnglishLanguage "A &%AltKeyHoldDown is a &%UserDirectAction of pressing and holding down the Alt key on a keyboard.")
(disjoint AltKeyHoldDown ShiftKeyHoldDown)
(disjoint AltKeyHoldDown ControlKeyHoldDown)

(subclass FunctionKeyHoldDown KeyHoldDown)
(documentation FunctionKeyHoldDown EnglishLanguage "A &%FunctionKeyHoldDown is a &%UserDirectAction of pressing and holding down the Function key on a keyboard.")
(disjoint FunctionKeyHoldDown AltKeyHoldDown)
(disjoint FunctionKeyHoldDown ShiftKeyHoldDown)
(disjoint FunctionKeyHoldDown ControlKeyHoldDown)


(subclass SingleKeyPress KeyboardAction)
(documentation SingleKeyPress EnglishLanguage "A &%SingleKeyPress is a &%UserDirectAction of typing (breifly pressing down) a keyboard key.")
(disjoint SingleKeyPress KeyHoldDown)

(subclass CharacterKeyPress SingleKeyPress)
(documentation CharacterKeyPress EnglishLanguage "A &%CharacterKeyPress is a &%SingleKeyPress of a keyboard key that signifies a single character (letters, numbers, punctuation, other symbols, space, and tab).  Use &%SpecialCharacterPress for enter, backspace, delete, escape, shift, control, function, function keys, home, page-up, etc. keys.")

(subclass SpecialCharacterPress SingleKeyPress)
(documentation SpecialCharacterPress EnglishLanguage "A &%CharacterKeyPress is a &%SingleKeyPress of the enter, backspace, delete, escape, shift, control, function, function keys, home, page-up, and similar keys. Use &%CharacterKeyPress for white space keys and a keyboard key that signifies a single character (letters, numbers, punctuation, other symbols).")
(disjoint CharacterKeyPress SpecialCharacterPress)

(subclass EnterKeyPress SpecialCharacterPress)
(documentation EnterKeyPress EnglishLanguage "A &%EnterKeyPress is a &%UserDirectAction of hitting the Enter key on a keyboard.")



(subclass Clicking UserDirectAction)
(documentation Clicking EnglishLanguage "A &%Clicking is a &%UserDirectAction of clicking on a mouse button or its equivalent on some other input device.")

(subclass DoubleClicking Clicking)
(documentation DoubleClicking EnglishLanguage "&%DoubleClicking is a &%UserDirectAction of clicking twice relatively rapidly so as to signify a ``double click''.")
(=>
   (instance ?ACT DoubleClicking)
   (exists (?CLICK1 ?CLICK2)
       (and
         (instance ?CLICK1 Clicking)
         (instance ?CLICK2 Clicking)
         (not (equal ?CLICK1 ?CLICK2))
         (subProcess ?ACT ?CLICK1)
         (subProcess ?ACT ?CLICK2))))

(subclass RightClicking Clicking)
(documentation RightClicking EnglishLanguage "&%RightClicking is a &%UserDirectAction of clicking with the right button on a two or three button mouse or similar device.  A computer system may be told to logically switch the right and left buttons (e.g., for a person who uses a mouse in the left hand -- in such a case, &%RightClicking is achieved by clicking the leftmost physical button.")
(=>
   (instance ?ACT RightClicking)
   (exists (?R_BUTTON)
       (and
         (instance ?R_BUTTON RightCIButton)
         (patient ?ACT ?R_BUTTON))))

(subclass LeftClicking Clicking)
(documentation LeftClicking EnglishLanguage "&%LeftClicking is a &%UserDirectAction of clicking with the left button on a two or three button mouse or similar device.")
(=>
   (instance ?ACT LeftClicking)
   (exists (?L_BUTTON)
       (and
         (instance ?L_BUTTON LeftCIButton)
         (patient ?ACT ?L_BUTTON))))

(subclass MiddleClicking Clicking)
(documentation MiddleClicking EnglishLanguage "&%MiddleClicking is a &%UserDirectAction of clicking with the middle button on a three button mouse or similar device.")
(=>
   (instance ?ACT MiddleClicking)
   (exists (?M_BUTTON)
       (and
         (instance ?M_BUTTON MiddleCIButton)
         (patient ?ACT ?M_BUTTON))))

(subclass MouseButtonHoldDown Clicking)
(documentation MouseButtonHoldDown EnglishLanguage "&%MouseButtonHoldDown is a &%UserDirectAction of clicking a mouse (or similar) button, but holding the button down while taking other action (such as moving the mouse or reading text that appeared when the button was depressed).")
(=>
   (instance ?ACT MouseButtonHoldDown)
   (exists (?MOUSE)
       (and
         (instance ?MOUSE ComputerMouse)
         (patient ?ACT ?MOUSE))))


(subclass SlidingComputerInputDeviceAction UserDirectAction)
(documentation SlidingComputerInputDeviceAction EnglishLanguage "&%SlidingComputerInputDeviceAction is a &%UserDirectAction of moving a &%ComputerInputDevice in such a way that the motion can be mapped as moving a point (e.g. a Cursor) around a &%ComputerScreen.")

(subclass MouseMoving SlidingComputerInputDeviceAction)
(documentation MouseMoving EnglishLanguage "&%MouseMoving is a &%UserDirectAction of moving a &%ComputerMouse in such a way that the motion is registered by the controlling program.")
(=>
   (instance ?ACT MouseMoving)
   (exists (?MOUSE)
       (and
         (instance ?MOUSE ComputerMouse)
         (patient ?ACT ?MOUSE))))



(subclass TouchSurfaceAction UserDirectAction)
(subclass TouchSurfaceAction Touching)
(documentation TouchSurfaceAction EnglishLanguage "A &%TouchSurfaceAction is a &%UserDirectAction of interacting with a &%TouchSensitiveComputerInputDevice.")
(=>
   (instance ?ACT TouchSurfaceAction)
   (exists (?TOUCHSURF)
       (and
         (instance ?TOUCHSURF TouchSensitiveComputerInputDevice)
         (patient ?ACT ?TOUCHSURF))))
(=>
  (and
    (instance ?ACT UserDirectAction)
    (patient ?ACT ?TOUCHSURF)
    (instance ?TOUCHSURF TouchSensitiveComputerInputDevice))
  (instance ?ACT TouchSurfaceAction))

(subclass TouchSurfaceSlide TouchSurfaceAction)
(classIntersection TouchSurfaceAction SlidingComputerInputDeviceAction
                   TouchSurfaceSlide)
; (subclass TouchSurfaceSlide SlidingComputerInputDeviceAction)
(documentation TouchSurfaceSlide EnglishLanguage "A &%TouchSurfaceSlide is a &%SlidingComputerInputDeviceAction using a &%TouchSensitiveComputerInputDevice.")



(subclass TouchSurfaceTap TouchSurfaceAction)
(subclass TouchSurfaceTap Clicking)
(subclass TouchSurfaceTap Impacting)
(documentation TouchSurfaceTap EnglishLanguage "A &%TouchSurfaceTap is a method of &%Clicking using a &%TouchSensitiveComputerInputDevice by tapping the touch surface.")


(subclass TouchSurfaceDoubleFingerSlide TouchSurfaceAction)
(documentation TouchSurfaceDoubleFingerSlide EnglishLanguage "A &%TouchSurfaceDoubleFingerSlide is a &%TouchSurfaceAction of touching the surface with two fingers and moving them in different directions.")
(=>
   (instance ?ACTION TouchSurfaceDoubleFingerSlide)
   (exists (?FINGER1 ?FINGER2)
       (and
         (instance ?FINGER1 Finger)
         (instance ?FINGER2 Finger)
         (not (equal ?FINGER1 ?FINGER2))
         (instrument ?ACTION ?FINGER1)
         (instrument ?ACTION ?FINGER2))))

(subclass ScreenTouchAction TouchSurfaceAction)
(documentation ScreenTouchAction EnglishLanguage "A &%ScreenTouchAction is a &%TouchSurfaceAction using a &%ComputerTouchScreen.")
(=>
   (instance ?ACT ScreenTouchAction)
   (exists (?TOUCHSCREEN)
       (and
         (instance ?TOUCHSCREEN ComputerTouchScreen)
         (patient ?ACTION ?TOUCHSCREEN))))
(=>
  (and
    (instance ?ACT UserDirectAction)
    (patient ?ACT ?TOUCHSCREEN)
    (instance ?TOUCHSCREEN ComputerTouchScreen))
  (instance ?ACT ScreenTouchAction))

(subclass TouchPadAction TouchSurfaceAction)
(documentation TouchPadAction EnglishLanguage "A &%ScreenTouchAction is a &%TouchSurfaceAction using a &%ComputerTouchpad.")
(=>
   (instance ?ACT TouchPadAction)
   (exists (?TOUCHPAD)
       (and
         (instance ?TOUCHPAD ComputerTouchPad)
         (patient ?ACTION ?TOUCHPAD))))
(=>
  (and
    (instance ?ACT UserDirectAction)
    (patient ?ACT ?TOUCHPAD)
    (instance ?TOUCHPAD ComputerTouchPad))
  (instance ?ACT TouchPadAction))


(subclass JoystickMotion UserDirectAction)
(documentation JoystickMotion EnglishLanguage "A &%UserDirectAction consisting of moving a &%Joystick.")
(=>
   (instance ?ACT JoystickMotion)
   (exists (?JOYSTICK)
       (and
         (instance ?JOYSTICK Joystick)
         (patient ?ACTION ?JOYSTICK))))
(=>
  (and
    (instance ?ACT UserDirectAction)
    (patient ?ACT ?JOYSTICK)
    (instance ?JOYSTICK Joystick))
  (instance ?ACT JoystickMotion))


(subclass AudioInput UserDirectAction)
(documentation AudioInput EnglishLanguage "A &%UserDirectAction consisting of providing sound as input to a computer.  &%AudioInput may be recorded, transmitted to another device, or used for control.")

(subclass AudioInputControl AudioInput)
(documentation AudioInputControl EnglishLanguage "A &%UserDirectAction consisting of using sound to control a computer.  &%AudioInput which is not used for control (whether being recorded or transmitted to another device) is not considered to be &%AudioInputControl")


(subclass ScrollWheelRotating UserDirectAction)
(documentation ScrollWheelRotating EnglishLanguage "A &%UserDirectAction consisting of rolling a &%ScrollWheel.")

(subclass ScrollWheelRotatingAway ScrollWheelRotating)
(documentation ScrollWheelRotatingAway EnglishLanguage "&%ScrollWheelRotating consisting of rolling a &%ScrollWheel away from the user (assuming the user is on the expected side of the scroll wheel).")

(subclass ScrollWheelRotatingInward ScrollWheelRotating)
(documentation ScrollWheelRotatingInward EnglishLanguage "&%ScrollWheelRotating consisting of rolling a &%ScrollWheel towards from the user (assuming the user is on the expected side of the scroll wheel).")

(subclass Typing UserDirectAction)
(documentation Typing EnglishLanguage "A &%UserDirectAction consisting of typing on a keyboard.  Each act of &%Typing has a number of subevents which are instances of #$SingleKeyPress.")
(=>
   (instance ?TYPING Typing)
   (exists (?KEYPRESS)
      (and
         (instance ?KEYPRESS SingleKeyPress)
         (subProcess ?KEYPRESS ?TYPING))))

; =======================

(subclass UserSignifiedGraphicalAction UserSignifiedAction)
(documentation UserSignifiedGraphicalAction EnglishLanguage "A &%UserSignifiedAction that is interpreted as signifying a change in a graphical feature (cursor movement, highlighting of an area, etc.).")

(subclass MovingCursor UserSignifiedGraphicalAction)
(documentation MovingCursor EnglishLanguage "The &%UserSignifiedGraphicalAction is accomplished by a &%ComputerUser taking a &%UserDirectAction that is interpreted as signifying that a cursor should be moved.  Depending upon program state this could be accomplished by &%UserDirectActions of &%MouseMoving, a &%TouchSurfaceSlide, &%JoystickMotion, &%ScrollWheelRotating, &%KeyboardAction, repeated %&Clicking, or &%AudioInput.")

(subclass DraggingWithCursor MovingCursor)
(documentation DraggingWithCursor EnglishLanguage "&%DraggingWithCursor consists of moving a cursor while some other screen component moves along with the cursor.")

(subclass WindowScrolling ComputerProcess)
(documentation WindowScrolling EnglishLanguage "&%WindowScrolling consists of a &%ComputerProcess moving the contents of a frame in a window (when the logical size of the contents is greater than that of the frame) without moving the window itself.")
; Window Scrolling affects the currently active window
(=>
  (instance ?SCROLL WindowScrolling)
  (exists (?WINDOW)
    (and
      (patient ?SCROLL ?WINDOW)
      (instance ?SCROLL InterfaceWindow)
      (hasGUEState ?WINDOW GUEActiveState))))

(subclass WindowScrollingByUser WindowScrolling)
(subclass WindowScrollingByUser UserSignifiedGraphicalAction)
(documentation WindowScrolling EnglishLanguage "&%WindowScrollingByUser consists of moving the contents of a frame in a window (when the logical size of the contents is greater than that of the frame) without moving the window itself.")
(<=> 
  (and
    (instance ?SCROLL WindowScrolling)
    (instance ?SCROLL UserSignifiedGraphicalAction))
  (instance ?SCROLL WindowScrollingByUser))

(subclass VerticalWindowScrolling WindowScrolling)
(documentation VerticalWindowScrolling EnglishLanguage "&%VerticalWindowScrolling consists of scrolling the image in a frame up or down.  Such a scrolling direction is commonly used for text.")

(subclass HorizontalWindowScrolling WindowScrolling)
(documentation HorizontalWindowScrolling EnglishLanguage "&%HorizontalWindowScrolling consists of scrolling the image in a frame from side to side.  Such a scrolling direction is commonly used in video games.")

(subclass TwoDWindowScrolling WindowScrolling)
(documentation TwoDWindowScrolling EnglishLanguage "&%TwoDWindowScrolling consists of scrolling the image in a frame in any direction in 2D.  Such a scrolling method is commonly used for viewing portions of an image or graphic in more detail than would be possible if the complete graphic were displayed in the frame at one time.")


(subclass SubmitAction UserSignifiedAction)
(documentation SubmitAction EnglishLanguage "A &%SubmitAction is a &%UserSignifiedAction informing a &%ComputerProgram to make a user-selected action.")

(subclass DownloadingRequest SubmitAction)
(documentation DownloadingRequest EnglishLanguage "A &%SubmitAction instructing a &%ComputerProgram to download a file from an already specified location.")


(subclass UploadingRequest SubmitAction)
(documentation UploadingRequest EnglishLanguage "A &%SubmitAction instructing a &%ComputerProgram to upload across a network a specified file existing on the local machine.")

(subclass SubmitForm SubmitAction)
(documentation SubmitForm EnglishLanguage "A &%SubmitAction instructing a &%ComputerProgram to upload a form which has been generated or filled in by a local program.")

(subclass DownloadingFile SubmitAction)
(documentation DownloadingFile EnglishLanguage "A &%SubmitAction instructing a &%ComputerProgram to download a file from an already specified location.")


(subclass InputCharacterString UserSignifiedAction)
(documentation InputCharacterString EnglishLanguage "A &%UserSignifiedAction providing a &%ComputerProgram with a character string input.  This is often the intent of &%Typing.")

(subclass GUElementState VisualAttribute)
(documentation GUElementState EnglishLanguage "A state possessed by instances of &%GUIElement.  The possible states include &%GUE_ActiveState, &%GUE_PassiveState, &%GUE_DisplayedState, &%GUE_CoveredState, &%GUE_UncoveredState, and &%GUE_PartiallyCoveredState.")

(instance hasGUEState BinaryPredicate)
(subrelation hasGUEState attribute)
(domain hasGUEState 1 GUIElement)
(domain hasGUEState 2 GUElementState)
(documentation hasGUEState EnglishLanguage "(hasGUEState ?GUIE ?STATE) means that the &%GUIElement ?GUIE has the &%GUElementState, ?STATE.")

(instance GUE_ActiveState GUElementState)
(documentation GUE_ActiveState EnglishLanguage "The &%GUElementState of being ready to accept user  clicks and keyboard activity. At most one &%InterfaceWindow on a &%ComputerScreen is active at a time, and at most one &%GUIElement that is a direct part of that window is active at one time.")

; Only one &%InterfaceWindow is open at a time
(=> 
  (and
    (instance ?WINDOW1 InterfaceWindow)
    (instance ?WINDOW2 InterfaceWindow)
    (hasGUEState ?WINDOW1 GUE_ActiveState)
    (hasGUEState ?WINDOW1 GUE_ActiveState))
  (equals ?WINDOW1 ?WINDOW2))

; If a &%GUIElement is active, any &%GUIElement (including a &%InterfaceWindow) that 
; it is part of is active:
(=>
  (and
    (instance ?GUIE1 GUIElement)
    (hasGUEState ?GUIE1 GUE_ActiveState)
    (properPart ?GUIE1 ?GUIE2)
    (instance ?GUIE2 GUIElement))
  (hasGUEState ?GUIE2 GUE_ActiveState))

; If a &%GUIElement is active, it is part of the active &%InterfaceWindow:
(=>
  (and
    (instance ?WINDOW InterfaceWindow)
    (instance ?GUIE GUIElement)
    (not (instance ?GUIE InterfaceWindow))
    (hasGUEState ?WINDOW GUE_ActiveState)
    (hasGUEState ?GUIE GUE_ActiveState))
  (properPart ?GUIE ?WINDOW))

; if two different non-window &%GUIElements are active, one is a part of the other
; E.g., a menu & menuitem or submenu:
(=>
  (and
    (instance ?WINDOW InterfaceWindow)
    (instance ?GUIE1 GUIElement)
    (instance ?GUIE2 GUIElement)
    (not (instance ?GUIE1 InterfaceWindow))
    (not (instance ?GUIE2 InterfaceWindow))
    (hasGUEState ?WINDOW GUE_ActiveState)
    (hasGUEState ?GUIE1 GUE_ActiveState)
    (hasGUEState ?GUIE2 GUE_ActiveState))
  (or
    (properPart ?GUIE1 ?GUIE2)
    (properPart ?GUIE2 ?GUIE1)
    (equals ?GUIE1 ?GUIE2)))
  

(instance GUE_PassiveState GUElementState)
(documentation GUE_PassiveState EnglishLanguage "The &%GUElementState of not being ready to accept user clicks or keyboard activity. Whenever an &%InterfaceWindow is passive at a time, any &%GUIElement that is part of that window is also passive.")
(contraryAttribute GUE_ActiveState GUE_PassiveState)
; any window other than the active one is passive:
(=> 
  (and
    (instance ?WINDOW_A InterfaceWindow)
    (instance ?WINDOW_P InterfaceWindow)
    (hasGUEState ?WINDOW_A GUE_ActiveState)
    (not (equals ?WINDOW_A ?WINDOW_P)))
  (hasGUEState ?WINDOW_P GUE_PassiveState))

; any &%GUIElement that is part of a passive &%GUIElement (including an 
; &%InterfaceWindow is also passive:
(=>
  (and
    (instance ?GUIE1 GUIElement)
    (instance ?GUIE2 GUIElement)
    (properPart ?GUIE1 ?GUIE2)
    (hasGUEState ?GUIE2 GUE_PassiveState))
  (hasGUEState ?GUIE1 GUE_PassiveState))



(instance GUE_DisplayedState GUElementState)
(documentation GUE_DisplayedState EnglishLanguage "A &%GUIElement has a &%GUE_DisplayedState if it at least partially appears on a &%ComputerScreen.")
 
(instance GUE_NonVisibleState GUElementState)
(subAttribute GUE_NonVisibleState GUE_PassiveState)
(documentation GUE_NonVisibleState EnglishLanguage "A &%GUIElement has a &%GUE_NonVisibleState if it conceptually exists, but does not appear on a &%ComputerScreen.")
(contraryAttributes GUE_NonVisibleState GUE_DisplayedState)

 
(instance GUE_OffscreenState GUElementState)
(subAttribute GUE_OffscreenState GUE_NonVisibleState)
(documentation GUE_OffscreenState EnglishLanguage "A &%GUIElement has a &%GUE_OffscreenState if all parts of it are outside the visible window.")
 
(instance GUE_MinimizedState GUElementState)
(subAttribute GUE_MinimizedState GUE_NonVisibleState)
(documentation GUE_MinimizedState EnglishLanguage "A &%GUIElement has a &%GUE_MinimizedState if has been logically minimized, which means that although it might have an assigned position on the screen, it does not appear on the screen and is can not be made active until it is reopened.")

 
(instance MaximizedWindowState GUElementState)
(documentation MaximizedWindowState EnglishLanguage "An &%InterfaceWindow has a &%MaximizedWindowState if it is sized to cover the whole screen and is not minimized.  A maximized window may still be completely covered.  Only windows can have such a state.")
(contraryAttributes MaximizedWindowState GUE_MinimizedState)
(contraryAttributes MaximizedWindowState GUE_OffscreenState)
(=> 
  (hasGUEState ?GUIE MaximizedWindowState)
  (instance ?GUIE InterfaceWindow))
 
(instance VerticallyMaximizedWindowState GUElementState)
(documentation VerticallyMaximizedWindowState EnglishLanguage "An &%InterfaceWindow has a &%VerticallyMaximizedWindowState if it is sized to cover the whole screen in the vertical direction, has a fixed (and maximum for its program) width that is less than the screen width, and is not minimized.  A vertically maximized window may still be completely covered.  Only windows can have such a state.")
(contraryAttributes GUE_VerticallyMaximizedWindowState MaximizedWindowState)
(contraryAttributes GUE_VerticallyMaximizedWindowState GUE_MinimizedState)
(contraryAttributes GUE_VerticallyMaximizedWindowState GUE_OffscreenState)
(=> 
  (hasGUEState ?GUIE VerticallyMaximizedWindowState)
  (instance ?GUIE InterfaceWindow))

 
(instance GUE_CoveredState GUElementState)
(subAttribute GUE_CoveredState GUE_NonVisibleState)
(documentation GUE_CoveredState EnglishLanguage "A &%GUIElement has a &%GUE_CoveredState if it does not appear on a &%ComputerScreen and every portion of it on the computer window space (including parts outside the visible window) for which it is defined has something opaque being displayed on a layer conceptually closer to the viewer.")

;;;;;;;;;;;;;;;;
;; If defining types of window by state:
; (<=>
;   (instance ?GUIE CoveredInterfaceWindow)
;   (hasGUIEState ?GUIE GUE_CoveredState))
;;;;;;;;;;;;;;;;


 
(instance GUE_UncoveredState GUElementState)
(documentation GUE_UncoveredState EnglishLanguage "A &%GUIElement has a &%GUE_UncoveredState if no portion of it on the computer window space (including parts outside the visible window) for which it is defined has something being displayed on a layer conceptually closer to the viewer.")
;;;;;;;;;;;;;;;;
;; If defining types of window by state:
; (<=>
;   (instance ?GUIE UncoveredInterfaceWindow)
;   (hasGUIEState ?GUIE GUE_UncoveredState))
;;;;;;;;;;;;;;;;

(instance GUE_PartiallyCoveredState GUElementState)
(documentation GUE_PartiallyCoveredState EnglishLanguage "A &%GUIElement has a &%GUE_PartiallyCoveredState if some portion of it on the computer window space (including parts outside the visible window) for which it is defined has something being displayed on a layer conceptually closer to the viewer while some other portion is not opaquely covered.")
(contraryAttributes GUE_CoveredState GUE_UncoveredState GUE_PartiallyCoveredState)

(instance GUE_TranslucentlyCoveredState GUElementState)
(genlAttribute GUE_TranslucentlyCoveredState GUE_PartiallyCoveredState)
(documentation GUE_TranslucentlyCoveredState EnglishLanguage "A &%GUIElement has a &%GUE_TranslucentlyCoveredState if some portion of it on the computer window space (including parts outside the visible window) for which it is defined has something translucent being displayed on a layer conceptually closer to the viewer such that that section would be partially displayed.")

(instance GUE_InPartCoveredState GUElementState)
(genlAttribute GUE_InPartCoveredState GUE_PartiallyCoveredState)
(documentation GUE_InPartCoveredState EnglishLanguage "A &%GUIElement has a &%GUE_InPartCoveredState if some portion of it on the computer window space (including parts outside the visible window) for which it is defined has something opaque being displayed on a layer conceptually closer to the viewer such that that section would be partially displayed while some other portion is not opaquely covered.")
; note that GUE_TranslucentlyCoveredState and GUE_InPartCoveredState are 
; compatible.  Something can have both states.

(=>
  (instance ?GUE GUIElement)
  (or
    (hasGUEState ?GUE GUE_CoveredState)
    (hasGUEState ?GUE GUE_OffscreenState)
    (hasGUEState ?GUE GUE_MinimizedState)
    (hasGUEState ?GUE GUE_DisplayedState)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Alternate method, probably not needed:
; (subclass NonvisibleGUIElement GUIElement)
; (documentation NonvisibleGUIElement EnglishLanguage "A &%NonvisibleGUIElement is a &% GUIElement that conceptually exists but is covered, logically off-screen, or minimized.")
; 
; (subclass OffscreenGUIElement NonvisibleGUIElement)
; (documentation OffscreenGUIElement EnglishLanguage "An &%OffscreenGUIElement is a &%NonvisibleGUIElement that is conceptually positioned at a location that the window is not displaying.")
; 
; (subclass CoveredGUIElement NonvisibleGUIElement)
; (documentation CoveredGUIElement EnglishLanguage "A &%CoveredGUIElement is a &%NonvisibleGUIElement which is not visible because some other &%GUIElement(s) is/are displayed in the same location but in a layer conceptually ``closer to'' the viewer.")
; 
; (subclass UncoveredInterfaceWindow InterfaceWindow)
; (documentation UncoveredInterfaceWindow EnglishLanguage "An &%UncoveredInterfaceWindow is a visible &%InterfaceWindow which does not have any other &%InterfaceWindow blocking the view of any portion of it.")
; 
; (subclass PartiallyCoveredInterfaceWindow InterfaceWindow)
; (documentation PartiallyCoveredInterfaceWindow EnglishLanguage "A &%CoveredInterfaceWindow is a partially visible &%InterfaceWindow which has some other &%InterfaceWindow blocking the view of some portion of it.")
; 
; (subclass NonvisibleInterfaceWindow InterfaceWindow)
; (subclass NonvisibleInterfaceWindow NonvisibleGUIElement)
; (documentation NonvisibleInterfaceWindow EnglishLanguage "A &%NonvisibleInterfaceWindow is an &%InterfaceWindow which is not visible on a &%ComputerScreen.")
; 
; (subclass CoveredInterfaceWindow NonvisibleInterfaceWindow)
; (subclass CoveredInterfaceWindow CoveredGUIElement)
; (documentation CoveredInterfaceWindow EnglishLanguage "A &%CoveredInterfaceWindow is an &%InterfaceWindow which is not visible because some other &%InterfaceWindow(s) block the view of every portion of it.")
; 
; (subclass OffscreenInterfaceWindow NonvisibleInterfaceWindow)
; (subclass OffscreenInterfaceWindow OffscreenGUIElement)
; (documentation CoveredInterfaceWindow EnglishLanguage "A &%CoveredInterfaceWindow is an &%InterfaceWindow which is not visible because some other &%InterfaceWindow(s) block the view of every portion of it.")
; 
; (subclass MinimizedInterfaceWindow NonvisibleInterfaceWindow)
; (documentation MinimizedInterfaceWindow EnglishLanguage "A &%MinimizedInterfaceWindow is an &%InterfaceWindow which is not visible because it is temporarily turned off.  An active window can be minimized, changing it into a non-visible &%MinimizedInterfaceWindow.  A minimized window can be unminimized to make it visible again (unless it is covered after it has been unminimized.")
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(subclass SelectingActiveArea UserSignifiedAction)
(documentation SelectingActiveArea EnglishLanguage "A &%UserSignifiedAction informing a &%ComputerProgram that the current &%GUIActiveArea is selected.")

(instance GUE_SelectedState GUElementState)
(documentation GUE_SelectedState EnglishLanguage "A &%GUIElement has a &%GUE_SelectedState if a &%SelectingActiveArea action is performed with it as the &%patient.  This causes the program controlling the element to take the action that selecting the element is mapped to.  After the action has been initiated, unless the action causes a different element to become active or changes the state of the element, the element reverts to &%GUE_ActiveState.

The state of a GUI element normally changes to selected if the element had been in the &%GUE_ActiveState and it was clicked, double-clicked, the enter key was hit, or some similar graphical action was taken to select it.")
(contraryAttributes GUE_CoveredState GUE_SelectedState)
(=>
  (instance ?SELECT SelectingActiveArea)
  (exists (?ELEMENT)
    (and
      (instance ?ELEMENT GUIActiveArea)
      (patient ?SELECT ?ELEMENT))))

(=>
  (and
    (instance ?SELECT SelectingActiveArea)
    (patient ?SELECT ?ELEMENT)
    (instance ?ELEMENT GUIActiveArea))
  (holdsDuring 
    (EndFn ?SELECT)
      (hasGUEState ?ELEMENT GUE_SelectedState)))

(=>
  (and
    (instance ?SELECT SelectingActiveArea)
    (patient ?SELECT ?ELEMENT)
    (instance ?ELEMENT GUIActiveArea))
  (holdsDuring 
    (EndFn ?SELECT)
      (hasGUEState ?ELEMENT GUE_SelectedState)))

(=>
  (and
    (instance ?SELECT SelectingActiveArea)
    (patient ?SELECT ?ELEMENT)
    (instance ?ELEMENT GUIActiveArea))
  (holdsDuring 
    (EndFn ?SELECT)
      (hasGUEState ?ELEMENT GUE_SelectedState)))
    

(subclass FollowingHyperlink SelectingActiveArea)
(documentation FollowingHyperlink EnglishLanguage "A &%UserSignifiedAction instructing a &%ComputerProgram to follow the currently active &%HypertextLink.")

(subclass SelectingComputerMenuOption SelectingActiveArea)
(documentation SelectingComputerMenuItem EnglishLanguage "A &%UserSignifiedAction instructing a &%ComputerProgram to take whatever action is intended when the selected menu selection is chosen.")

(subclass SelectingComputerSubmenu SelectingActiveArea)
(documentation SelectingComputerSubmenu EnglishLanguage "A &%UserSignifiedAction instructing a &%ComputerProgram to allow user interaction with a chosen submenu.")

(subclass Scrolling UserSignifiedGraphicalAction)
(documentation Scrolling EnglishLanguage "A &%UserSignifiedGraphicalAction causing a program to scroll a display field within a window.")


(subclass ActivatingUIElement UserSignifiedAction)
(documentation Scrolling EnglishLanguage "A &%UserSignifiedAction causing a program to make a &%UIElement the ``active'' element.  Making an element active means that user can interact with it -- follow a link, select a menu option, drag the element on the screen, ``push'' a button, etc.  The system may display the %&UIElement in a different manner signifying that it is selected.")
; !!! Needs rule

(subclass JumpingToActivateUIElement ActivatingUIElement)
(subclass JumpingToActivateUIElement UserSignifiedGraphicalAction)
(documentation JumpingToActivateUIElement EnglishLanguage "A &%UserSignifiedAction causing the cursor to ``jump'' from its current position to a &%UIElement, making it ``Active''.")

(subclass JumpingForwardToActivateUIElement JumpingToActivateUIElement)
(documentation JumpingForwardToActivateUIElement EnglishLanguage "A &%JumpingToActiveUIElement causing the cursor to ``jump'' from its current position to whatever is considered the ``next'' &%UIElement, making it ``Active''.")
; !!! Needs rule

(subclass JumpingBackwardToActivateUIElement JumpingToActivateUIElement)
(documentation JumpingBackwardToActivateUIElement EnglishLanguage "A &%JumpingToActiveUIElement causing the cursor to ``jump'' from its current position to whatever is considered the ``previous'' &%UIElement, making it ``Active''.")
; !!! Needs rule

(subclass Highlighting UserSignifiedGraphicalAction)
(documentation Highlighting EnglishLanguage "A &%UserSignifiedAction causing a program to highlight a piece of text, link, image, or other component visible on the screen.")
; !!! Needs rule



(subclass ResizingScreenObject UserSignifiedGraphicalAction)
(documentation ResizingScreenObject EnglishLanguage "A &%UserSignifiedAction causing a program to change the size of a display on the &%ComputerScreen.")
; !!! Needs rule

(subclass BringingGEToFront UserSignifiedGraphicalAction)
(documentation BringingGEToFront EnglishLanguage "A &%UserSignifiedAction causing an &%GUIElement to be logically brought to the front -- of its window if it is an element in a window, and of a &%ComputerScreen if it is an &%InterfaceWindow.")
; !!! Needs rule

(subclass OpeningGraphicalWindow UserSignifiedGraphicalAction)
(documentation OpeningGraphicalWindow EnglishLanguage "A &%UserSignifiedAction causing the display of an &%InterfaceWindow on a &%ComputerScreen.")
(=> 
  (and
    (instance ?OPEN OpeningGraphicalWindow)
    (patient ?OPEN ?WINDOW))
  (instance ?WINDOW InterfaceWindow))

(subclass OpeningNewGraphicalWindow OpeningGraphicalWindow)
(subclass OpeningNewGraphicalWindow Creation)
(documentation OpeningNewGraphicalWindow EnglishLanguage "A &%UserSignifiedAction causing the display of a new &%InterfaceWindow on a &%ComputerScreen.")
; OpeningNewGraphicalWindow creates a window that didn't previously exist:
(=> 
  (instance ?OPEN OpeningNewGraphicalWindow)
  (exists (?WINDOW)
    (and
      (patient ?OPEN ?WINDOW)
      (instance ?WINDOW InterfaceWindow)
      (time ?WINDOW (EndFn (WhenFn ?OPEN)))
      (not (time ?WINDOW (BeginFn (WhenFn ?OPEN)))))))

(subclass ReopeningGraphicalWindow OpeningGraphicalWindow)
(documentation ReopeningGraphicalWindow EnglishLanguage "A &%UserSignifiedAction causing the redisplay of a minimized &%InterfaceWindow on a &%ComputerScreen.  Reopening a window normally makes it the active window and brings it to the front.")
(disjoint ReopeningGraphicalWindow OpeningNewGraphicalWindow)
; ReopeningGraphicalWindow opens a window that was previouly minimized:
(=>
  (and
    (instance ?OPEN ReopeningGraphicalWindow)
    (patient ?OPEN ?WINDOW)
    (instance ?WINDOW InterfaceWindow))
  (and
    (holdsDuring (BeginFn (WhenFn ?OPEN))
      (hasGUEState ?WINDOW GUE_MinimizedState))
    (holdsDuring (EndFn (WhenFn ?OPEN))
      (not (hasGUEState ?WINDOW GUE_MinimizedState)))))

(subclass UncoveringGraphicalWindow OpeningGraphicalWindow)
(documentation UncoveringGraphicalWindow EnglishLanguage "A &%UserSignifiedAction causing a &%CoveredInterfaceWindow to become visible again by (re)moving any &%GraphicalUIElement that has been covering it.")
(disjoint ReopeningGraphicalWindow OpeningNewGraphicalWindow)
; UncoveringGraphicalWindow changes the state of a window from covered to uncovered:
(=>
  (and
    (instance ?UNCOVER UncoveringGraphicalWindow)
    (patient ?UNCOVER ?WINDOW)
    (instance ?WINDOW InterfaceWindow))
  (guiElementUncovered ?UNCOVER ?GUIE))

(subclass ClosingGraphicalWindow UserSignifiedGraphicalAction)
(subclass ClosingGraphicalWindow Destruction)
(documentation ClosingGraphicalWindow EnglishLanguage "A &%UserSignifiedAction causing an &%InterfaceWindow on a &%ComputerScreen to stop being displayed.")
; On closing a graphical window an &%Interface window ceases to exist
(=> 
  (and
    (isa ?CLOSE ClosingGraphicalWindow)
    (patient ?CLOSE ?WINDOW))
  (and
    (instance ?WINDOW InterfaceWindow)
    (time ?WINDOW (BeginFn (WhenFn ?OPEN)))
    (not (time ?WINDOW (EndFn (WhenFn ?OPEN))))))

(subclass MinimizingGraphicalWindow UserSignifiedGraphicalAction)
(documentation MinimizingGraphicalWindow EnglishLanguage "A &%UserSignifiedAction causing an &%InterfaceWindow on a &%ComputerScreen to stop being displayed but to still conceptually exist.")
(=>
  (and
    (instance ?OPEN MinimizingGraphicalWindow )
    (patient ?OPEN ?WINDOW)
    (instance ?WINDOW InterfaceWindow))
  (and
    (holdsDuring (EndFn (WhenFn ?OPEN))
      (hasGUEState ?WINDOW GUE_MinimizedState))
    (holdsDuring (BeginFn (WhenFn ?OPEN))
      (not (hasGUEState ?WINDOW GUE_MinimizedState)))))

(subclass MaximizingGraphicalWindow UserSignifiedGraphicalAction)
(documentation MaximizingGraphicalWindow EnglishLanguage "A &%UserSignifiedAction causing an &%InterfaceWindow to be expanded to cover the complete area of a &%ComputerScreen -- or possibly the complete vertical range of the screen if the window has a maximum width less than the screen-width.  If the window being maximized is logically in front of any other window (which would normally be the case), this would also be a case of &%CoveringGraphicalWindow.")
(=>
  (and
    (instance ?OPEN MaximizingGraphicalWindow)
    (patient ?OPEN ?WINDOW)
    (instance ?WINDOW InterfaceWindow))
  (and
    (holdsDuring (EndFn (WhenFn ?OPEN))
      (hasGUEState ?WINDOW MaximizedWindowState))
    (holdsDuring (BeginFn (WhenFn ?OPEN))
      (not (hasGUEState ?WINDOW MaximizedWindowState)))))

(subclass UnmaximizingGraphicalWindow UserSignifiedGraphicalAction)
(documentation UnmaximizingGraphicalWindow EnglishLanguage "A &%UserSignifiedAction causing an &%InterfaceWindow to be reduced from covering the complete area of a &%ComputerScreen to the size and location it had before being maximized.  If it was created as maximized, unmaximizing it will shrink it to a default size and location.")
(=>
  (and
    (instance ?UNMAX UnmaximizingGraphicalWindow)
    (patient ?UNMAX ?WINDOW)
    (instance ?WINDOW InterfaceWindow))
  (and
    (holdsDuring (BeginFn (WhenFn ?UNMAX ))
      (hasGUEState ?WINDOW MaximizedWindowState))
    (holdsDuring (EndFn (WhenFn ?UNMAX ))
      (not (hasGUEState ?WINDOW MaximizedWindowState)))))

(subclass CoveringGUIElement UserSignifiedGraphicalAction)
(documentation CoveringGraphicalWindow EnglishLanguage "A &%UserSignifiedAction causing a &%GUIElement to be covered completely on a &%ComputerScreen by at least one other &%GUIElement.")
; An instance of &%CoveringGUIElement involves an element (doing the covering) and 
; a different element (doing the uncovering)
(=>
  (instance ?COVERING CoveringGUIElement)
  (exists (?GUIE1 ?GUIE2)
    (and
      (instance ?GUIE1 GUIElement)
      (instance ?GUIE2 GUIElement)
      (agent ?COVERING ?GUIE1)
      (patient ?COVERING ?GUIE2)
      (different ?GUIE1 ?GUIE2))))

(instance guiElementCovered BinaryPredicate)
(domain guiElementCovered 1 CoveringGraphicalWindow)
(domain guiElementCovered 2 GUIElement)
(documentation guiElementCovered EnglishLanguage "(guiElementCovered ?COVERING ?GUIE) means that the &%GUIElement ?GUIE has become completely covered by the action ?COVERING.  It is still logically positioned at the same place on the screen.")

(=>
  (instance ?COVERING CoveringGUIElement)
  (exists (?GUIE)
    (and
      (instance ?GUIE GUIElement)
      (patient ?COVERING ?GUIE)
      (guiElementCovered ?COVERING ?GUIE))))

(=>
  (guiElementCovered ?COVERING ?GUIE)
  (and
    (holdsDuring (BeginFn (WhenFn ?COVERING))
                 (or
                   (hasGUIEState ?GUIE GUE_PartiallyCoveredState)
                   (hasGUIEState ?GUIE GUE_UncoveredState)))
    (holdsDuring (EndFn (WhenFn ?COVERING))
                 (hasGUIEState ?GUIE GUE_CoveredState))))

(instance guiElementCoveredBy BinaryPredicate)
(instance guiElementCoveredBy AsymmetricRelation)
(domain guiElementCoveredBy 1 GUIElement)
(domain guiElementCoveredBy 2 GUIElement)
(documentation guiElementCoveredBy EnglishLanguage "(guiElementCoveredBy ?GUIE1 ?GUIE2) means that the &%GUIElement ?GUIE1 is completely covered by the &%GUIElement ?GUIE2.")
; A GUI Element that is covered by another has the GUE State, &%GUE_CoveredState:
(=>
  (guiElementCoveredBy ?GUIE_BOTTOM ?GUIE_TOP)
  (hasGUEState ?GUIE_BOTTOM GUE_CoveredState))

(subclass PartiallyCoveringGraphicalWindow UserSignifiedGraphicalAction)
(documentation PartiallyCoveringGraphicalWindow EnglishLanguage "A &%UserSignifiedAction causing a &%GUIElement to be partially covered on a &%ComputerScreen by at least one other &%GUIElement.")

(instance guiElementPartiallyCovered BinaryPredicate)
(domain guiElementPartiallyCovered 1 PartiallyCoveringGraphicalWindow)
(domain guiElementPartiallyCovered 2 GUIElement)
(documentation guiElementPartiallyCovered EnglishLanguage "(guiElementPartiallyCovered ?COVERING ?GUIE) means that the &%GUIElement ?GUIE has become partially covered by the action ?COVERING.  It is still logically positioned at the same place on the screen.")
; Any &%PartiallyCoveringGraphicalWindow action causes some &%GUIElement to become
; uncovered:
(=>
  (instance ?UNCOVERING PartiallyCoveringGraphicalWindow)
  (exists (?GUIE)
    (and
      (instance ?GUIE GUIElement)
      (guiElementPartiallyCovered ?ACT ?GUIE))))

; The result of a &%GUIElement being partially covered is that the affected element
; ends up in the partialy covered state:
(=>
  (guiElementPartiallyCovered ?ACT ?GUIE)
  (holdsDuring (EndFn (WhenFn ?ACT))
               (hasGUIEState ?GUIE GUE_PartiallyCoveredState)))

; A &%GUIElement being partially covered was partially or totally uncovered before the 
; partial covering took place:
(=>
  (guiElementUncovered ?ACT ?GUIE)
  (or
    (holdsDuring (BeginFn (WhenFn ?ACT))
                 (hasGUIEState ?GUIE GUE_CoveredState))
    (holdsDuring (BeginFn (WhenFn ?ACT))
                 (hasGUIEState ?GUIE GUE_PartiallyCoveredState))))

(instance guiElementPartiallyCoveredBy BinaryPredicate)
(instance guiElementPartiallyCoveredBy AsymmetricRelation)
(domain guiElementPartiallyCoveredBy 1 GUIElement)
(domain guiElementPartiallyCoveredBy 2 GUIElement)
(documentation guiElementPartiallyCoveredBy EnglishLanguage "(guiElementPartiallyCoveredBy ?GUIE1 ?GUIE2) means that the &%GUIElement ?GUIE1 is partially covered by the &%GUIElement ?GUIE2.")
(=>
  (and
    (instance ?COVERING CoveringGUIElement)
    (agent ?COVERING ?GUIE_TOP)
    (patient ?COVERING ?GUIE_BOTTOM)
    (instance ?GUIE_TOP GUIElement)
    (instance ?GUIE_BOTTOM GUIElement))
  (holdsIn (EndFn ?COVERING)
           (or
             (guiElementCoveredBy ?GUIE_BOTTOM ?GUIE_TOP) 
             (guiElementPartiallyCoveredBy ?GUIE_BOTTOM ?GUIE_TOP))))

(=>
  (and
    (instance ?COVERING PartiallyCoveringGUIElement)
    (agent ?COVERING ?GUIE_TOP)
    (patient ?COVERING ?GUIE_BOTTOM)
    (instance ?GUIE_TOP GUIElement)
    (instance ?GUIE_BOTTOM GUIElement))
  (holdsIn (EndFn ?COVERING)
           (guiElementPartiallyCoveredBy ?GUIE_BOTTOM ?GUIE_TOP)))

(subclass UncoveringGUIElement UserSignifiedGraphicalAction)
(documentation UncoveringGUIElement EnglishLanguage "A &%UserSignifiedAction causing a covered &%GUIElement to be completely uncovered on a &%ComputerScreen.")

(instance guiElementUncovered BinaryPredicate)
(domain guiElementUncovered 1 UncoveringGraphicalWindow)
(domain guiElementUncovered 2 GUIElement)
(documentation guiElementUncovered EnglishLanguage "(guiElementUncovered ?UNCOVERING ?GUIE) means that the &%GUIElement ?GUIE has become completely uncovered by the action ?UNCOVERING.  Its logical positioned on the screen does is not changed.")
; Any &%UncoveringGUIElement action causes some &%GUIElement to become uncovered:
(=>
  (instance ?UNCOVERING UncoveringGUIElement)
  (exists (?GUIE)
    (and
      (instance ?GUIE GUIElement)
      (guiElementUncovered ?ACT ?GUIE))))

; The result of a &%GUIElement being uncovered is that the affected element ends up 
; in the uncovered state:
(=>
  (guiElementUncovered ?ACT ?GUIE)
  (holdsDuring (EndFn (WhenFn ?ACT))
               (hasGUIEState ?GUIE GUE_UncoveredState)))

; A &%GUIElement that is uncovered was partially or totally covered before the 
; uncovering took place:
(=>
  (guiElementUncovered ?ACT ?GUIE)
  (or
    (holdsDuring (BeginFn (WhenFn ?ACT))
                 (hasGUIEState ?GUIE GUE_CoveredState))
    (holdsDuring (BeginFn (WhenFn ?ACT))
                 (hasGUIEState ?GUIE GUE_PartiallyCoveredState))))


; ========================================

(subclass NetworkCommunication DataTransfer)
(documentation NetworkCommunication EnglishLanguage "&%NetworkCommunication consists of an interplay of messages across a &%ComputerNetwork.")

(subclass AccessingWebPage NetworkCommunication)
(documentation AccessingWebPage EnglishLanguage "&%AccessWebPage consists accessing a &%WebPage across a &%ComputerNetwork.")
; !!! Needs rule

(subclass FTPing NetworkCommunication)
(documentation FTPing EnglishLanguage "&%FTPing consists accessing &%CompuerFiles on a remote computer across a &%ComputerNetwork using the File Transfer Protocol (FTP).")

(subclass DownloadingingOverNetwork NetworkCommunication)
(documentation DownloadingingOverNetwork EnglishLanguage "&%DownloadingingOverNetwork is those instances of &%NetworkCommunication in which a &%ComputerFile is downloaded from a network onto the user's local computer.  The &%ComputerFile may be generated on the fly or pre-exist on the system from which it is being downloaded.")
; !!! Needs rule

(subclass DownloadingingUpdate DownloadingOverNetwork )
(documentation DownloadingingUpdate EnglishLanguage "&%DownloadingingUpdate is those instances of &%NetworkCommunication in which an update for &%ComputerFile is downloaded from a network onto the user's local computer.  The &%ComputerFile may be generated on the fly or pre-exist on the system from which it is being downloaded.")
; !!! Needs rule

(subclass DownloadingSoftware DownloadingOverNetwork )
(documentation DownloadingSoftware EnglishLanguage "&%DownloadingSoftware is those instances of &%NetworkCommunication in which a &%SoftwarePackage is downloaded from a network onto the user's local computer.")
; !!! Needs rule

(subclass DownloadingUserFile DownloadingOverNetwork )
(documentation DownloadingUserFile EnglishLanguage "&%DownloadingUserFile is those instances of &%NetworkCommunication in which a user &%ComputerFile is downloaded to be stored on a user's local computer from another &%ComputerSystem on a network.")
; !!! Needs rule

(subclass DownloadingImage DownloadingUserFile)
(documentation DownloadingImage EnglishLanguage "&%DownloadingImage is those instances of &%NetworkCommunication in which a &%ImageFile is downloaded to a user's local computer from another &%ComputerSystem on a network.")
; !!! Needs rule

(subclass DownloadingVideo DownloadingUserFile)
(documentation DownloadingVideo EnglishLanguage "&%DownloadingVideo is those instances of &%NetworkCommunication in which an &%AudioVisualFile is downloaded to a user's local computer from another &%ComputerSystem on a network.")
; !!! Needs rule

(subclass DownloadingAudio DownloadingUserFile)
(documentation DownloadingAudio EnglishLanguage "&%DownloadingAudio is those instances of &%NetworkCommunication in which an &%AudioFile is downloaded to a user's local computer from another &%ComputerSystem on a network.")
; !!! Needs rule

(subclass DownloadingNonAudioVideoImageUserFile DownloadingUserFile)
(documentation DownloadingNonAudioVideoImageUserFile EnglishLanguage "&%DownloadingNonAudioVideoImageUserFile is those instances of &%NetworkCommunication in which an &%ComputerFile that isn't an &%AudioFile, &%VideoFile, or &%ImageFile is downloaded to a user's local computer from another &%ComputerSystem on a network.")
; !!! Needs rule

(subclass UploadingOverNetwork NetworkCommunication)
(documentation UploadingOverNetwork EnglishLanguage "&%UploadingOverNetwork is those instances of &%NetworkCommunication in which a &%ComputerFile is uploaded from a user's local computer onto another &%ComputerSystem on a network.")
; !!! Needs rule

(subclass UploadingImage UploadingOverNetwork)
(documentation UploadingImage EnglishLanguage "&%UploadingImage is those instances of &%NetworkCommunication in which a &%ImageFile is uploaded from a user's local computer onto another &%ComputerSystem on a network.")
; !!! Needs rule

(subclass UploadingVideo UploadingOverNetwork)
(documentation UploadingVideo EnglishLanguage "&%UploadingImage is those instances of &%NetworkCommunication in which an &%AudioVisualFile is uploaded from a user's local computer onto another &%ComputerSystem on a network.")
; !!! Needs rule

(subclass UploadingAudioFile UploadingOverNetwork)
(documentation UploadingAudioFile EnglishLanguage "&%UploadingAudioFile is those instances of &%NetworkCommunication in which a non-video &%AudioFile is uploaded from a user's local computer onto another &%ComputerSystem on a network.")
; !!! Needs rule

(subclass Blog Website)
(documentation Blog EnglishLanguage "A &%Blog is a &%WebSite which one or more people can update with &%BlogPosts and &%BlogComments.")


(subclass Wiki Website)
(documentation Wiki EnglishLanguage "A &%Wiki is a &%WebSite whose users can add, modify, or delete its content via a &%WebBrowser.")




(subclass PostingOnBlog UploadingOverNetwork)
(subclass PostingOnBlog WrittenCommunication)
(documentation PostingOnBlog EnglishLanguage "&%PostingOnBlog is those instances of &%NetworkCommunication in which a &%ComputerUser updates a %&Blog.")


(subclass DoNetworkMessaging NetworkCommunication)
(documentation DoNetworkMessaging EnglishLanguage "&%DoNetworkMessaging is those instances of &%NetworkCommunication in which messages are sent back and forth among users .")


(subclass Tweeting DoNetworkMessaging)
(subclass Tweeting WrittenCommunication)
(documentation Tweeting EnglishLanguage "&%Tweeting is those instances of &%DoNetworkMessaging in which messages of 140 characters or less are sent among users via Twitter (TM).")
; !!! Needs rule


(subclass AudioMessaging DoNetworkMessaging)
(documentation Tweeting EnglishLanguage "&%AudioMessaging is those instances of &%DoNetworkMessaging in which audio messages are sent among users.")

(subclass LiveAudioMessaging AudioMessaging)
(documentation LiveAudioMessaging EnglishLanguage "&%LiveAudioMessaging is those instances of &%DoNetworkMessaging in which live audio communication is set up among users over a &%ComputerNetwork.  Some of the users may connect to a live audio messaging session by telephone.")

(subclass LiveVideoMessaging DoNetworkMessaging)
(documentation LiveVideoMessaging EnglishLanguage "&%LiveVideoMessaging is those instances of &%DoNetworkMessaging in which live audio-video communication is set up among users over a &%ComputerNetwork.  Some of the users may connect via audio-only communication.")

(subclass WebChatting DoNetworkMessaging)
(subclass WebChatting WrittenCommunication)
(documentation WebChatting EnglishLanguage "&%WebChatting is those instances of &%DoNetworkMessaging in which text messages are sent across the &%WorldWideWeb among users connected to discussion forums often called channels.")

(subclass Emailing DoNetworkMessaging)
(documentation Emailing EnglishLanguage "&%Emailing is the process of sending and receiving emails.  Emailing is a subclass of &%DoNetworkMessaging since the messages are sent over a local or global (or other) network.  The sender normally sends text, but may also send URLs and computer files of any kind with or without accompanying text.")

(subclass SendingEmail Emailing)
(documentation SendingEmail EnglishLanguage "&%SendingEmail is the process of sending emails.  Emailing is a subclass of &%DoNetworkMessaging since the messages are sent over a local or global (or other) network.  The sender normally sends text, but may also send URLs and computer files of any kind with or without accompanying text.")


