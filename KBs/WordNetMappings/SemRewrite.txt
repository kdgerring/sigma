; Semantic Rewriting Rule set
; authors: Adam Pease - adam.pease@ipsoft.com
;          Sofia Athenikos - sofia.athenikos@ipsoft.com
; implements the semantic rewriting of CELT, as described in
;   Pease, A., and Li, J. (2010) Controlled English to Logic Translation.
;   In Theory and Applications of Ontology, ed. Roberto Poli,
;   Michael Healy, and Achilles Kameas, Springer, ISBN: 978-90-481-8846-8.
;  This software is released under the GNU Public License
; <http://www.gnu.org/copyleft/gpl.html>.


;; -----------------------------------------------------------------------------------------------------------------
;; statives
;; -----------------------------------------------------------------------------------------------------------------

; agree - ReachingAgreement
; believe - believes Formula
; belong
; concern
; consist
; contain
; depend
; deserve
; disagree
; dislikes
; doubt
; feel
; fit
; hates

nsubj(?P,?A), dobj(?P,?O), +sumo(dislikes,?P) ==> (dislikes(?A,?O)).

; hear
; imagine
; impress
; include
; involve
; know
; like
; love
; matter
; mean
; measure
; mind
; need
; owe
; owns

nsubj(?P,?A), dobj(?P,?O), sumo(possesses,?P) ==> (possesses(?A,?O)).

; prefer
; promise
; realise
; recognise
; remember
; seem
; sound
; suppose
; surprise
; understand
; want
; weigh
; wish
; writes
+sumo(?C,?X), isCELTclass(?C,ContentDevelopment) ==> (authors(?A,?X)).

;; -----------------------------------------------------------------------------------------------------------------
;; preposition: about
;; -----------------------------------------------------------------------------------------------------------------

;; ---------------------
;; about as "refers to"
;; ---------------------

nsubj(be*,?X), prep_about(be*,?Y), +sumo(?C,?Y), isSubclass(?C,Process) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(Artifact,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,Artifact) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(Communication,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,Communication) ==> (refers(?X,?Y)).
prep_about(?Z,?Y), dobj(?Z,?X), +sumo(?C,?X), isSubclass(?C,Communication) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(ContentBearingObject,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,ContentBearingObject) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(ContentBearingPhysical,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,ContentBearingPhysical) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(Cooperation,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,Cooperation) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(Directing,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,Directing) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(EducationalProcess,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,EducationalProcess) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(EmotionalState,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,EmotionalState) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(?C,?X), isSubAttribute(?C,?D), isInstanceOf(?D,EmotionalState) ==> (refers(?X,?Y)).
;prep_about(?X,?Y), +sumo(?C,?X), isSubAttribute(?C,Unhappiness) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(ExpressingApproval,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,ExpressingApproval) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(ExpressingDisapproval,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,ExpressingDisapproval) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(FactualText,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C, FactualText) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(IntentionalProcess,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C, IntentionalProcess) ==> (refers(?X,?Y)).
prepc_about(?X,?Y), +sumo(IntentionalProcess,?X) ==> (refers(?X,?Y)).
prepc_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,IntentionalProcess) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(Learning,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,Learning) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(LinguisticExpression,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,LinguisticExpression) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(ProbabilityRelation,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,ProbabilityRelation) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(Process,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,Process) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(Promise,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,Promise) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(Proposition,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,Proposition) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(PropositionalAttitude,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C, PropositionalAttitude) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isInstanceOf(?C, PropositionalAttitude) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(PsychologicalAttribute,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,PsychologicalAttribute) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(PsychologicalProcess,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,PsychologicalProcess) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(Quantity,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,Quantity) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(Reasoning,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,Reasoning) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(Selecting,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,Selecting) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(SubjectiveAssessmentAttribute,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,SubjectiveAssessmentAttribute) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(Supposition,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,Supposition) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(Uncovering,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,Uncovering) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +sumo(Vocalizing,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +sumo(?C,?X), isSubclass(?C,Vocalizing) ==> (refers(?X,?Y)).

prep_about(?X,?Y), +equals(True,?X) ==> (refers(?X,?Y)).
prep_about(?X,?Y), +equals(False,?X) ==> (refers(?X,?Y)).

nsubj(write*,?S), dobj(write*,?X), prep_about(?Y,?SV), ccomp(write*,?Y), sumo(?C,?X), isSubclass(?C,ContentBearingObject)
==> {(and (authors ?S ?X) (instance ?X ?C) (refers ?X ?Y))}.

;; -----------------------
;; about as "around/near"
;; -----------------------

nsubj(?V,?X), advmod(?V,about*), prep_in(?V,?L), +sumo(?C,?L), isSubclass(?C,GeographicArea)
==> {(located ?X,?L) (orientation ?X ?L Near)}.

;; -------------------------
;; about as "approximately"
;; -------------------------

; wide ----------

nsubj(wide*,?Subject), cop(wide*,be*), advmod(wide*,about*), pobj(about*,?UnitOfMeasure),
equals(?EquivalentUnit,?UnitOfMeasure), unit(measure1,?ClassOfUnitOfMeasure), measure(?Subject,measure1),
value(measure1,?Number), valueToken(?Number,?NumberCategory), num(?UnitOfMeasure,?NumberCategory),
sumo(?ClassOfAttribute,wide*), isSubclass(?ClassOfAttribute,SubjectiveAssessmentAttribute)
==> {(and (width ?Subject ?Y) (equal ?X (MeasureFn ?Number ?ClassOfUnitOfMeasure)) (approximateValue ?X ?Y))}.

nsubj(wide*,?Subject), cop(wide*,be*), advmod(wide*,about*), pobj(about*,?UnitOfMeasure),
equals(?EquivalentUnit,?UnitOfMeasure), unit(measure1,?ClassOfUnitOfMeasure), measure(?Subject,measure1),
value(measure1,?Number), valueToken(?Number,?NumberCategory), num(?UnitOfMeasure,?NumberCategory),
sumo(?ClassOfAttribute,wide*), isSubclass(?ClassOfAttribute,SubjectiveAssessmentAttribute)
==> {(and (width ?Subject ?Y) (equal ?X (MeasureFn ?Number ?ClassOfUnitOfMeasure)) (approximateValue ?X ?Y))}.

nsubj(wide*,?Subject), cop(wide*,be*), advmod(wide*,about*), num(?UnitOfMeasure,?NumberCategory), pobj(about*,?UnitOfMeasure),
sumo(?ClassOfUnitOfMeasure,?UnitOfMeasure), sumo(?ClassOfAttribute,wide*), isSubclass(?ClassOfAttribute,SubjectiveAssessmentAttribute),
value(measure1,?Number), measure(?Subject,measure1), valueToken(?Number,?NumberCategory), unit(measure1,?ClassOfUnitOfMeasure)
==> {(and (width ?Subject ?Y) (equal ?X (MeasureFn ?Number ?ClassOfUnitOfMeasure)) (approximateValue ?X ?Y))}.

; deep ----------

nsubj(be*,?Subject), num(?UnitOfMeasure,?NumberCategory), prep_about(be*,?UnitOfMeasure), advmod(be*,deep*),
sumo(?ClassOfUnitOfMeasure,?UnitOfMeasure), sumo(?ClassOfAttribute,deep*), isSubclass(?ClassOfAttribute,SubjectiveAssessmentAttribute),
value(measure1,?Number), valueToken(?Number,?NumberCategory), measure(?Subject,measure1), unit(measure1,?ClassOfUnitOfMeasure)
==> {(and (depth ?Subject ?Y) (equal ?X ((TopFn ?Subject) (BottomFn ?Subject) ?Number)) (approximateValue ?X ?Y))}.

nsubj(deep*,?Subject), cop(deep*,be*), advmod(deep*,about*), num(?UnitOfMeasure,?NumberCategory), pobj(about*,?UnitOfMeasure),
sumo(?ClassOfAttribute,deep*), isSubclass(?ClassOfAttribute,SubjectiveAssessmentAttribute), equals(?EquivalentUnit,?UnitOfMeasure),
unit(measure1,?ClassOfUnitOfMeasure), valueToken(?Number,?NumberCategory), measure(?subject,measure1), value(measure1,?Number)
==> {(and (depth ?Subject ?Y) (equal ?X ((TopFn ?Subject) (BottomFn ?Subject) ?Number)) (approximateValue ?X ?Y))}.

; long ----------

nsubj(be*,?Subject), advmod(be*,about*), num(?UnitOfMeasure,?NumberCategory), pobj(about*,?UnitOfMeasure), advmod(be*,long*),
sumo(?ClassOfUnitOfMeasure,?UnitOfMeasure), sumo(SubjectiveAssessmentAttribute, long*),
unit(measure1,?ClassOfUnitOfMeasure), value(measure1,?Number), measure(?Subject,measure1), valueToken(?Number,?NumberCategory)
==> {(and (length ?Subject ?Y) (equal ?X (MeasureFn ?Number ?ClassOfUnitOfMeasure)) (approximateValue ?X ?Y))}.

nsubj(be*,?Subject), prep(be*,about*), num(?UnitOfMeasure,?NumberCategory), npadvmod(long*,?UnitOfMeasure), pcomp(about*,long*),
sumo(?ClassOfNumberCategory,?NumberCategory), isSubclass(?ClassOfNumberCategory,Number), sumo(?ClassOfUnitOfMeasure,?UnitOfMeasure),
sumo(SubjectiveAssessmentAttribute,long*), unit(measure1,?ClassOfUnitOfMeasure),value(measure1,?Number), measure(?Subject,measure1),
valueToken(?Number,?NumberCategory)
==> {(and (length ?Subject ?Y) (equal ?X (MeasureFn ?Number ?ClassOfUnitOfMeasure)) (approximateValue ?X ?Y))}.

; thick ----------

; nsubj(thick-8,panel-3), cop(thick-8,is-4), advmod(thick-8,about-5), num(inches-7,3-6), pobj(about-5,inches-7),
; sumo(Putting,panel-3), sumo(Inch,inches-7), sumo(Wood,wooden-2), value(measure1,3), unit(measure1,Inch),
; valueToken(3,3-6), measure(panel-3,measure1)

;nsubj(thick*,?Subject), cop(thick*,be*), advmod(thick*,about*), num(?UnitOfMeasure,?NumberCategory), pobj(about*,?UnitOfMeasure),
;sumo(?ClassOfUnitOfMeasure,?UnitOfMeasure), value(measure1,?Number), unit(measure1,?ClassOfUnitOfMeasure),
;valueToken(?Number,?NumberCategory), measure(?Subject,measure1)
;==> {(and (width ?Subject ?Y) (equal ?X (MeasureFn ?Number ?ClassOfUnitOfMeasure)) (approximateValue ?X ?Y))}.

; tall ----------

nsubj(tall*,?Subject), cop(tall*,be*), advmod(tall*,about*), pobj(about*,?UnitOfMeasure),
sumo(?ClassOfUnitOfMeasure,?UnitOfMeasure), unit(measure1,?ClassOfUnitOfMeasure), measure(?Subject,measure1),
value(measure1,?Number), sumo(?ClassOfAttribute,tall*), isSubclass(?ClassOfAttribute,SubjectiveAssessmentAttribute),
sumo(Making,?Subject)
==> {(and (height ?Subject ?Y) (equal ?X (MeasureFn ?Number ?ClassOfUnitOfMeasure)) (approximateValue ?X ?Y)) (instance ?Subject Building)}.

nsubj(tall*,?Subject), cop(tall*,be*), advmod(tall*,about*), pobj(about*,?UnitOfMeasure),
sumo(?ClassOfUnitOfMeasure,?UnitOfMeasure), unit(measure1,?ClassOfUnitOfMeasure), measure(?Subject,measure1),
value(measure1,?Number), sumo(?ClassOfAttribute,tall*), isSubclass(?ClassOfAttribute,SubjectiveAssessmentAttribute)
==> {(and (height ?Subject ?Y) (equal ?X (MeasureFn ?Number ?ClassOfUnitOfMeasure)) (approximateValue ?X ?Y))}.

; high ----------

nsubj(high*,?Subject), cop(high*,be*), advmod(high*,about*), num(?UnitOfMeasure,?NumberCategory), pobj(about*,?UnitOfMeasure),
sumo(Motion,high*), sumo(?ClassOfUnitOfMeasure,?UnitOfMeasure), measure(?Subject,measure1), unit(measure1,?ClassOfUnitOfMeasure),
value(measure1,?Number), valueToken(?Number,?NumberCategory),
sumo(Making,?Subject)
==> {(and (height ?Subject ?Y) (equal ?X (MeasureFn ?Number ?ClassOfUnitOfMeasure)) (approximateValue ?X ?Y)) (instance ?Subject Building)}.

nsubj(high*,?Subject), cop(high*,be*), advmod(high*,about*), num(?UnitOfMeasure,?NumberCategory), pobj(about*,?UnitOfMeasure),
sumo(Motion,high*), sumo(?ClassOfUnitOfMeasure,?UnitOfMeasure), measure(?Subject,measure1), unit(measure1,?ClassOfUnitOfMeasure),
value(measure1,?Number), valueToken(?Number,?NumberCategory)
==> {(and (height ?Subject ?Y) (equal ?X (MeasureFn ?Number ?ClassOfUnitOfMeasure)) (approximateValue ?X ?Y))}.

; old ----------

;subj(old-6,Steve-1), cop(old-6,is-2), advmod(old-6,about-3), num(years-5,40-4), pobj(about-3,years-5),
;sumo(SubjectiveAssessmentAttribute,old-6), equals(YearDuration,years-5)

;nsubj(old*,?Subject), cop(old*,be*), advmod(old*,about*), num(years*,?Number), pobj(about*,years*), equals(YearDuration,years*),
;sumo(SubjectiveAssessmentAttribute,old*)
;==> {(and (age ?Subject ?Y) (equal ?X (MeasureFn ?Number Year)) (approximateValue ?X ?Y))}.

;; -----------------------------------------------------------------------------------------------------------------
;; preposition: around
;; -----------------------------------------------------------------------------------------------------------------

prep_around(?V,?Y), sumo(Object,?Y) ==> {(traverses ?V ?Y)}.

;; -----------------------------------------------------------------------------------------------------------------
;; preposition: of
;; -----------------------------------------------------------------------------------------------------------------

;; of as "about"

prep_of(?X,?A), sumo(?C,?X), isSubclass(?C,Proposition), possessive(?A,?P), poss(?Y,?B), conj_and(?X,?Y)
==> {(and (instance ?X ?C) (refers ?X ?Y) (refers ?Y ?A) (refers ?Y ?B))}.
prep_of(?X,?Y), sumo(?C,?X), isSubclass(?C,Proposition) ==> {(and (instance ?X ?C) (refers(?X,?Y)))}.

;; -----------------------------------------------------------------------------------------------------------------
;; preposition: out of
;; -----------------------------------------------------------------------------------------------------------------

; run out of ------------

nsubj(run*,?SUBJECT), prep_out_of(run*,?RESOURCE), sumo(Running,run*), sumo(?CLASS,?RESOURCE)
==> {(and (instance ?PROCESS Process) (patient ?PROCESS ?SUBJECT) (instance ?RESOURCE ?CLASS) (resourceExhausted ?PROCESS ?RESOURCE)))}.

;; -----------------------------------------------------------------------------------------------------------------
;; measures
;; -----------------------------------------------------------------------------------------------------------------

; Long, wide, deep, thick, tall, high, and old are the only adjectives used as measure words

nsubj(wide*,?S),  cop(wide*,be*),  sumo(?C,wide*),  unit(?M,?U), value(?M,?V), measure(?S,?M) ==> {(width ?S (MeasureFn ?U ?V))}.
nsubj(deep*,?S),  cop(deep*,be*),  sumo(?C,deep*),  unit(?M,?U), value(?M,?V), measure(?S,?M) ==> {(depth (TopFn ?S) (BottomFn ?S) ?X)}.
nsubj(long*,?S),  cop(long*,be*),  sumo(?C,long*),  unit(?M,?U), value(?M,?V), measure(?S,?M) ==> {(length ?S (MeasureFn ?U ?V))}.
nsubj(thick*,?S), cop(thick*,be*), sumo(?C,thick*), unit(?M,?U), value(?M,?V), measure(?S,?M) ==> {(width ?S (MeasureFn ?U ?V))}.
nsubj(tall*,?S),  cop(tall*,be*),  sumo(?C,tall*),  unit(?M,?U), value(?M,?V), measure(?S,?M) ==> {(height ?S (MeasureFn ?U ?V))}.
nsubj(high*,?S),  cop(high*,be*),  sumo(?C,high*),  unit(?M,?U), value(?M,?V), measure(?S,?M) ==> {(height ?S (MeasureFn ?U ?V))}.
nsubj(old*,?S),   cop(old*,be*),   sumo(?C,old*),   unit(?M,?U), value(?M,?V), measure(?S,?M) ==> {(age ?S (MeasureFn ?U ?V))}.

nsubj(be*, ?S), npadvmod(wide*, ?U2),  advmod(be*,wide*),  sumo(?C,wide*),  unit(?M,?U), value(?M,?V), measure(?S,?M) ==> {(width ?S (MeasureFn ?U ?V))}.
nsubj(be*, ?S), npadvmod(deep*, ?U2),  advmod(be*,deep*),  sumo(?C,deep*),  unit(?M,?U), value(?M,?V), measure(?S,?M) ==> {(depth (TopFn ?S) (BottomFn ?S) ?X)}.
nsubj(be*, ?S), npadvmod(long*, ?U2),  advmod(be*,long*),  sumo(?C,long*),  unit(?M,?U), value(?M,?V), measure(?S,?M) ==> {(length ?S (MeasureFn ?U ?V))}.
nsubj(be*, ?S), npadvmod(thick*, ?U2), advmod(be*,thick*), sumo(?C,thick*), unit(?M,?U), value(?M,?V), measure(?S,?M) ==> {(width ?S (MeasureFn ?U ?V))}.
nsubj(be*, ?S), npadvmod(tall*, ?U2),  advmod(be*,tall*),  sumo(?C,tall*),  unit(?M,?U), value(?M,?V), measure(?S,?M) ==> {(height ?S (MeasureFn ?U ?V))}.
nsubj(be*, ?S), npadvmod(high*, ?U2),  advmod(be*,high*),  sumo(?C,high*),  unit(?M,?U), value(?M,?V), measure(?S,?M) ==> {(height ?S (MeasureFn ?U ?V))}.
nsubj(be*, ?S), npadvmod(old*, ?U2),   advmod(be*,old*),   sumo(?C,old*),   unit(?M,?U), value(?M,?V), measure(?S,?M) ==> {(age ?S (MeasureFn ?U ?V))}.

;; -----------------------------------------------------------------------------------------------------------------
;; prepositions
;; -----------------------------------------------------------------------------------------------------------------

;{isCELTclass(?X,Person)} ==> (isCELTclass(?X,Person)).
;{isCELTclass(?X,Time)} ==> (isCELTclass(?X,Time)).
;{isCELTclass(?X,Object)} ==> (isCELTclass(?X,Time)).

prep(interested*,in*), sumo(?C,interested*), nsubj(?R,?S), cop(interested*,be*)  ==>
    {(inScopeOfInterest ?S ?O)}.
prep(interested*,in*), sumo(?C,interested*), nsubj(?R,?S), cop(interested*,is*)  ==>
    {(inScopeOfInterest ?S ?O)}.
prep(interested*,in*), sumo(?C,interested*), nsubj(?R,?S), cop(interested*,was*)  ==>
    {(inScopeOfInterest ?S ?O)}.
prep(interested*,in*), sumo(?C,interested*), nsubj(?R,?S), cop(interested*,were*)  ==>
    {(inScopeOfInterest ?S ?O)}.

prep_at(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> (located(?X,?Y)).
prep_in(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> {(orientation ?X ?Y Inside)}.
prep_inside(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> {(orientation ?X ?Y Inside)}.
prep_outside(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> {(orientation ?X ?Y Outside)}.
prep_on(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> (located(?X,?Y)).
prep_to(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> (destination(?X,?Y)).
prep_to(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Time) ==> {(EndFn ?X ?Y)}.
prep_toward(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> (destination(?X,?Y)).
prep_towards(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> (destination(?X,?Y)).

; prep_of(drink-4,water-6), sumo(Drinking,drink-4).
prep_of(?V,?Y), sumo(?C,?V), isSubclassOf(?C,Process) ==> (dobj(?V,?Y)).

prep_at(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Time) ==> (time(?X,?Y)).
prep_in(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Time) ==> (time(?X,?Y)).
prep_on(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Time) ==> (time(?X,?Y)).

prep_for(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Person) ==> (destination(?X,?Y)).
prep_for(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Time) ==> (duration(?X,?Y)).

prep_since(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Time) ==> (starts(?Y,?X)).

prep_through(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Time) ==> (duration(?X,?Y)).
prep_through(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> (traverses(?X,?Y)).

prep_with(?X,?Y), +sumo(Human,?Y) ==> (agent(?X,?Y)).
prep_with(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Person) ==> (agent(?X,?Y)).
prep_with(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> (instrument(?X,?Y)).

prep_across(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> (traverses(?X,?Y)).

prep_within(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> (properlyFills(?X,?Y)).
prep_into(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> (properlyFills(?X,?Y)).

prep_from(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> (origin(?X,?Y)).
prep_from(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Time) ==> (BeginFn(?X,?Y)).

prep_until(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Time) ==> (EndFn(?X,?Y)).

prep_after(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Time) ==> (greaterThan(?X,?Y)).
prep_before(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Time) ==> (lessThan(?X,?Y)).

; prep_according_to
; prep_across_from
; prep_ahead_of

prep_ahead_to(?X,?Y), +sumo(?C,?Y), isSubclass(?C,Process) ==> {(earlier ?X (WhenFn ?Y))}.

; prep_along_with

prep_along_with(?X,?Y), +sumo(Human,?Y) ==> (agent(?X,?Y)).
prep_along_with(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Person) ==> (agent(?X,?Y)).

; prep_alongside_of

prep_alongside_of_to(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> {(orientation ?X ?Y Near)}.

; prep_apart_from
; prep_as_for
; prep_as_from
; prep_as_of
; prep_as_per

prep_as_per(?X,?Y), +sumo(?C,?Y), isSubclass(?C,Text) ==> (containsInformation(?X,?Y)).

; prep_as_to
; prep_aside_from
; prep_away_from
; prep_based_on
; prep_because_of
; prep_close_by

prep_close_by(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> {(orientation ?X ?Y Near)}.

; prep_close_to

prep_close_to(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> {(orientation ?X ?Y Near)}.

; prep_contrary_to
; prep_compared_to
; prep_compared_with
; prep_due_to

; prep_due_to(?X,?Y), +sumo(?C,?Y), isSubclass(?C,Process), +sumo(?C2,?X), isSubclass(?C2,Process) ==> {(causes ?X ?Y)}.

; prep_depending_on
; prep_except_for
; prep_exclusive_of
; prep_contrary_to
; prep_followed_by
; prep_inside_of

prep_inside_of(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> {(contains ?X ?Y)}.

; prep_instead_of
; prep_irrespective_of
; prep_next_to

prep_next_to(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> {(orientation ?X ?Y Near)}.

; prep_near_to

prep_near_to(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> {(orientation ?X ?Y Near)}.

; prep_off_of
; prep_out_of
; prep_outside_of
; prep_owing_to
; pref_over

prep_over(?V,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> {(orientation ?LOC ?Y Above) (located ?V ?LOC)}.

; prep_preliminary_to
; prep_preparatory_to
; prep_previous_to

prep_previous_to(?X,?Y), +sumo(?C,?Y), isSubclass(?C,Process) ==> {(earlier ?X (WhenFn ?Y))}.
prep_previous_to(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Time) ==> {(earlier ?X ?Y)}.

; prep_prior_to

prep_prior_to(?X,?Y), +sumo(?C,?Y), isSubclass(?C,Process) ==> {(earlier ?X (WhenFn ?Y))}.
prep_prior_to(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Time) ==> {(earlier ?X ?Y)}.

; prep_pursuant_to
; prep_regardless_of
; prep_subsequent_to

prep_prior_to(?X,?Y), +sumo(?C,?Y), isSubclass(?C,Process) ==> {(earlier (WhenFn ?Y) ?X)}.
prep_prior_to(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Time) ==> {(earlier ?Y ?X)}.

; prep_such_as
; prep_thanks_to

; prep_thanks_to(?X,?Y), +sumo(?C,?Y), isSubclass(?C,Process), +sumo(?C2,?X), isSubclass(?C2,Process) ==> {(causes ?X ?Y)}.

; prep_together_with
; prep_by_means_of
; prep_in_accordance_with
; prep_in_addition_to
; prep_in_case_of

prep_in_front_of(?V,?Y), nsubj(?V,?Z) ==> {(and (equal ?F (FrontFn ?Y)) (orientation ?Z ?F Near))}.

; prep_in_lieu_of
; prep_in_place_of
; prep_in_spite_of
; prep_on_account_of
; prep_on_behalf_of
; prep_on_top_of

prep_on_top_of(?X,?Y), +sumo(?C,?Y), isCELTclass(?C,Object) ==> {(orientation ?X ?Y On)}.

; prep_with_regard_to

; home downstairs downtown inside outside upstairs uptown

; approval of, awareness of, belief in, concern for, confusion about, desire for
; fondness for, grasp of, hatred of, hope for, interest in, love of
; need for, participation in, reason for, respect for, success in, understanding of
; afraid of, angry at, aware of, capable of, careless about, familiar with
; fond of, happy about, interested in, jealous of, made of, married to
; proud of, similar to, sorry for, sure of, tired of, worried about
; apologize for, ask about, ask for, belong to, bring up, care for, find out
; give up, grow up, look for, look forward to, look up, make up ,pay for
; prepare for, study for, talk about, think about, trust in ,work for, worry about

; poss: possession modifier

poss(?R,?S), nsubj(?O,?R), cop(?O,?IS), sumo(?C,?R) ==>
 	(sumo(?C,?R), nsubj(?R,?S), cop(?R,?IS), prep_of(?R,?O)).
poss(?R,?S), nsubj(?R,?O), cop(?O,?IS), sumo(?C,?R) ==>
 	(sumo(?C,?R), nsubj(?R,?S), cop(?R,?IS), prep_of(?R,?O)).
poss(?R,?S), nsubj(?R,?O), cop(?R,?IS), sumo(?C,?R) ==>
 	(sumo(?C,?R), nsubj(?R,?S), cop(?R,?IS), prep_of(?R,?O)).

sumo(?C,?R), nsubj(who*,?R), cop(who*,?IS), prep_of(?R,?S) ==>
	(sumo(?C,?R), nsubj(?R,?S), cop(?R,?IS), prep_of(?R,?WHO)).

; (sumo(?C,?R), nsubj(?R,?S), cop(?R,?IS), prep_of(?R,?O))

sumo(?C,?R), nsubj(?R,who*), cop(?R,?IS), prep_of(?R,?O) ==>
	(sumo(?C,?R), nsubj(?R,?S), cop(?R,?IS), prep_of(?R,?WHO)).

; sumo(brother,brother-5), nsubj(brother-5,John-3), cop(brother-5,is-2), prep_of(brother-5,who-1)

sumo(?C,?R), nsubj(?R,?S), cop(?R,?IS), prep_of(?R,who*) ==>
	(sumo(?C,?R), nsubj(?R,?S), cop(?R,?IS), prep_of(?R,?WHO)).

nsubjpass(?V, who*) ==> (agent(?V,?W), names(?W,?WH)).

sumo(?C,customer*), nsubj(?R,?S), cop(customer*,be*), prep_of(?R,?O)  ==> {(customer ?S ?O)}.
sumo(?C,father*), nsubj(?R,?S), cop(father*,be*), prep_of(?R,?O)  ==> {(father ?S ?O)}.
sumo(?C,ancestor*), nsubj(?R,?S), cop(ancestor*,be*), prep_of(?R,?O)  ==> {(ancestor ?S ?O)}.
sumo(?C,aunt*), nsubj(?R,?S), cop(aunt*,be*), prep_of(?R,?O)  ==> {(aunt ?S ?O)}.
sumo(?C,cousin*), nsubj(?R,?S), cop(cousin*,be*), prep_of(?R,?O)  ==> {(cousin ?S ?O)}.
sumo(?C,grandfather*), nsubj(?R,?S), cop(grandfather*,be*), prep_of(?R,?O)  ==> {(grandfather ?S ?O)}.
sumo(?C,grandmother*), nsubj(?R,?S), cop(grandmother*,be*), prep_of(?R,?O)  ==> {(grandmother ?S ?O)}.
sumo(?C,nephew*), nsubj(?R,?S), cop(nephew*,be*), prep_of(?R,?O)  ==> {(nephew ?S ?O)}.
sumo(?C,niece*), nsubj(?R,?S), cop(niece*,be*), prep_of(?R,?O)  ==> {(niece ?S ?O)}.
sumo(?C,parent*), nsubj(?R,?S), cop(parent*,be*), prep_of(?R,?O)  ==> {(parent ?S ?O)}.
sumo(?C,sibling*), nsubj(?R,?S), cop(sibling*,be*), prep_of(?R,?O)  ==> {(sibling ?S ?O)}.
sumo(?C,brother*), nsubj(?R,?S), cop(brother*,be*), prep_of(?R,?O)  ==> {(brother ?S ?O)}.
sumo(?C,sister*), nsubj(?R,?S), cop(sister*,be*), prep_of(?R,?O)  ==> {(sister ?S ?O)}.
sumo(?C,uncle*), nsubj(?R,?S), cop(uncle*,be*), prep_of(?R,?O)  ==> {(uncle ?S ?O)}.

sumo(?C,owner*), nsubj(?R,?S), cop(owner*,be*), prep_of(?R,?O)  ==> {(possesses ?S ?O)}.
sumo(?C,administrator*), nsubj(?R,?S), cop(administrator*,be*), prep_of(?R,?O)  ==> {(administrator ?S ?O)}.
nsubj(?R,?S), cop(owner*,be*), prep_of(?R,?O)  ==> {(possesses ?S ?O)}.

;; catalog of dependency elements --------------

; adverbial clause modifier
; HOL advcl(?X,?Y) ==>

; adverbial modifier

;; question words ------------------------------

; Where does John go?

advmod(go*, where*), nsubj(go*, ?S), aux(go*,do*) ==> (destination(?V,?WH)).

advmod(?V, where*), nsubj(?V, ?S), aux(?V,do*), sumo(?C,do*), sumo(Human,?S), sumo(Living,?V) ==> (inhabits(?S,?WH)).

nsubj(?V,?S), prep_in(?V,?L), sumo(Living,?V), sumo(Human,?S) ==> (inhabits(?S,?L)).

;She was the first woman to fly.
nsubj(woman*,?W), cop(woman*,be*), det(woman*,the*), amod(woman*,first*), aux(?V,to*), vmod(woman*,?V), sumo(Woman,woman*),
sumo(?C,?V), unit(measure1,Woman), valueToken(first,first*), value(measure1,first)
==> {(and (instance ?W Woman) (instance ?V ?C) (agent ?V ?W)
     (not (exists (?W2 ?V2) (and (instance ?W2 Woman) (instance ?V2 ?C) (agent ?V2 ?W2) (earlier (WhenFn ?V2) (WhenFn ?V))))))}.


;She was the first woman to fly a plane by herself across the Atlantic Ocean.
;root(ROOT-0,woman-6), nsubj(woman-6,She-2), cop(woman-6,was-3), det(woman-6,the-4), amod(woman-6,first-5), aux(fly-8,to-7),
;vmod(woman-6,fly-8), det(plane-10,a-9), dobj(fly-8,plane-10), prep_by(fly-8,herself-12), det(AtlanticOcean-15,the-14),
;prep_across(fly-8,AtlanticOcean-15), sumo(Airplane,plane-10), sumo(Ocean,AtlanticOcean-15), sumo(Woman,woman-6),
;sumo(Flying,fly-8), sumo(AtlanticOcean,AtlanticOcean-15), unit(measure1,Woman), valueToken(first,first-5),
;measure(She-2,measure1), value(measure1,first)

;[root(ROOT-0,woman-5), nsubj(woman-5,she-1), cop(woman-5,be-2), det(woman-5,the-3), amod(woman-5,first-4), aux(fly-7,to-6), vmod(woman-5,fly-7),
;det(plane-9,a-8), dobj(fly-7,plane-9), prep_by(fly-7,she-11), det(AtlanticOcean-14,the-13), prep_across(fly-7,AtlanticOcean-14),
;sumo(Airplane,plane-9), sumo(Woman,woman-5), sumo(Flying,fly-7), sumo(AtlanticOcean,AtlanticOcean-14), tense(PAST,be-2), number(SINGULAR,woman-5),
;number(SINGULAR,plane-9), number(SINGULAR,Atlantic-14), number(SINGULAR,Ocean-15), measure(She-1,measure1), unit(measure1,Woman),
;valueToken(first,first-4), value(measure1,first)]

;She flew a plane.
;She flew it by herself.
;She flew across the Atlantic Ocean.
;She was the first one to do the above.

;nsubj(woman*,?SUBJECT), cop(woman*,be*), amod(woman*,first*), aux(?VERB,to*), vmod(woman*,?VERB), sumo(Woman,woman*), sumo(?CLASS,?VERB)
;, measure(?SUBJECT,measure1), unit(measure1,Woman), valueToken(first,first*), value(measure1,first)
;==> {(and (instance ?SUBJECT Woman)
;          (not (exists (?ANOTHER_WOMAN) (and (instance ?ANOTHER_WOMAN Woman) (agent ?VERB ?ANOTHER_WOMAN) (not (equals ?ANOTHER_WOMAN ?SUBJECT))))))}.

;prep_by(?V,herself*), sumo(Woman,woman*)
;==> {(and (agent ?V ?S) (not (exists (?OTHER) (and (agent ?V ?OTHER) (not (equals ?OTHER ?S))))))}.

+nsubj(?V,?S), advmod(?V,alone*), sumo(Human,?S) ==> {(not (exists (?OTHER) (and (agent ?V ?OTHER) (not (equals ?OTHER ?S)))))}.
+nsubj(?V,?S), prep_by(?V,himself*), sumo(Human,?S) ==> {(not (exists (?OTHER) (and (agent ?V ?OTHER) (not (equals ?OTHER ?S)))))}.
+nsubj(?V,?S), prep_by(?V,herself*), sumo(Human,?S) ==> {(not (exists (?OTHER) (and (agent ?V ?OTHER) (not (equals ?OTHER ?S)))))}.

; Why is John a student?
; advmod(is-2,why-1), root(ROOT-0,is-2), nsubj(is-2,John-3), det(student-5,a-4), dep(is-2,student-5), sumo(student,student-5), sumo(Human,John-3)

; Why does John walk?
; advmod(walk-4,why-1), aux(walk-4,does-2), nsubj(walk-4,John-3), root(ROOT-0,walk-4), sumo(causes,does-2), sumo(Human,John-3), sumo(Walking,walk-4)
advmod(?V,why-1), aux(?V,do*), +nsubj(?V,?A), sumo(?C,do*) ==> (causes(?X,?V)).

; When does John walk?
advmod(?V,when-1), aux(?V,do*), sumo(?C,?V), +nsubj(?V,?A), sumo(?C,do*)  ==> {(and (agent ?V ?A) (instance ?V ?C) (equals ?WHEN (WhenFn ?V)}.

; Who moves the cart?
nsubj(?V,who-1) ==> {(instance ?I Human) (agent ?V ?I) (names ?I ?WH)}.

; What did John do?
dobj(do*,what-1), aux(do*,do*), sumo(?X,do*), nsubj(do*,?A) ==> (agent(?WH,?A).

; What did John kick?
dobj(?V,what-1), aux(?V,do*), sumo(?C,do*), nsubj(?V,?A) ==> (agent(?V,?A), patient(?V,?WH)).

;; -------------------------------------

advmod(?V,?Y), nsubj(?V,?P), +sumo(Indoors,?Y) ==> {(located ?P ?INDOORS) (instance ?INDOORS Indoors) (exists (?BUILDING) (and (instance ?BUILDING Building) (orientation ?INDOORS ?BUILDING Inside)))}.

advmod(?V,?Y), nsubj(?V,?P), +sumo(Outdoors,?Y) ==> {(located ?P ?OUTDOORS) (instance ?OUTDOORS Outdoors) (not (exists (?BUILDING) (and (instance ?BUILDING Building) (orientation ?OUTDOORS ?BUILDING Inside))))}.

cop(?X,?Y), nsubj(?X,?P), +sumo(Indoors,?X) ==> {((located ?P ?INDOORS) (instance ?INDOORS Indoors) (exists (?BUILDING) (and (instance ?BUILDING Building) (orientation ?INDOORS ?BUILDING Inside)))}.

cop(?X,?Y), nsubj(?X,?P), +sumo(Outdoors,?X) ==> {(located ?P ?OUTDOORS) (instance ?OUTDOORS Outdoors) (not (exists (?BUILDING) (and (instance ?BUILDING Building) (orientation ?OUTDOORS ?BUILDING Inside))))}.


;; helper verbs ----------------------------

; John takes a walk.
; nsubj(takes-2,John-1), root(ROOT-0,takes-2), det(walk-4,a-3), dobj(takes-2,walk-4), sumo(Human,John-1), sumo(agent,takes-2), sumo(Walking,walk-4)

; John took a walk
; nsubj(took-2,John-1), root(ROOT-0,took-2), det(walk-4,a-3), dobj(took-2,walk-4), sumo(agent,took-2), sumo(Human,John-1), sumo(Walking,walk-4)

; John will take a walk.
; nsubj(take-3,John-1), aux(take-3,will-2), root(ROOT-0,take-3), det(walk-5,a-4), dobj(take-3,walk-5), sumo(Human,John-1), sumo(Walking,walk-5)

; John has taken a walk
; nsubj(taken-3,John-1), aux(taken-3,has-2), root(ROOT-0,taken-3), det(walk-5,a-4), dobj(taken-3,walk-5), sumo(agent,taken-3), sumo(Human,John-1), sumo(Walking,walk-5)

nsubj(taken*,?S), aux(taken*,has*), dobj(taken*,?V), sumo(?X,taken*), sumo(?C,?V), isSubclass(?C,Process) ==> (nsubj(?V,?S), past(?V,?DUMMY), sumo(?C,?V)).
nsubj(take*,?S), aux(take*,will*), dobj(take*,?V), sumo(?C,?V), isSubclass(?C,Process) ==> (nsubj(?V,?S), future(?V,?DUMMY), sumo(?C,?V)).
nsubj(take*,?S), dobj(take*,?V), sumo(?C,?V), isSubclass(?C,Process) ==> (nsubj(?V,?S), sumo(?C,?V)).
nsubj(takes*,?S), dobj(takes*,?V), sumo(?C,?V), isSubclass(?C,Process), sumo(?T,takes*) ==> (nsubj(?V,?S), sumo(?C,?V)).
nsubj(took*,?S), dobj(took*,?V), sumo(?C,?V), isSubclass(?C,Process), sumo(?T,took*) ==> (nsubj(?V,?S), past(?V,?DUMMY), sumo(?C,?V)).

nsubj(made*,?S), aux(made*,has*), dobj(made*,?V), sumo(?X,made*), sumo(?C,?V), isSubclass(?C,Process) ==> (nsubj(?V,?S), past(?V,?DUMMY), sumo(?C,?V)).
nsubj(make*,?S), aux(make*,will*), dobj(make*,?V), sumo(?C,?V), isSubclass(?C,Process) ==> (nsubj(?V,?S), future(?V,?DUMMY), sumo(?C,?V)).
nsubj(make*,?S), dobj(make*,?V), sumo(?C,?V), isSubclass(?C,Process) ==> (nsubj(?V,?S), sumo(?C,?V)).
nsubj(makes*,?S), dobj(makes*,?V), sumo(?C,?V), isSubclass(?C,Process), sumo(?T,makes*) ==> (nsubj(?V,?S), sumo(?C,?V)).
; John made a decision.
; nsubj(made-2,John-1), dobj(made-2,decision-4), sumo(Deciding,decision-4),
nsubj(made*,?S), dobj(made*,?V), sumo(?C,?V), v(?C,Process) ==> (nsubj(?V,?S), past(?V,?DUMMY), sumo(?C,?V)).

;; -------------------------------------

; auxilliary - be (am, are, is, was, were, being, been), can, could, dare, do (does, did), have (has, had, having), may, might, must, need, ought, shall, should, will, would

nsubj(?V,?S), aux(?V,can*), sumo(?C,?V), isSubclass(?C,Process) ==> {(capability ?C agent ?S)}.
aux(?V,did*), sumo(?C,did*), +sumo(?C2,?V), isSubclass(?C2,Process) ==> (past(?V,?DUMMY)).
aux(?V,does*), sumo(?C,does*), +sumo(?C2,?V), isSubclass(?C2,Process) ==> !.
aux(?V,has*) ==> (past(?V,?DUMMY)).
aux(?V,had*) ==> (past(?V,?DUMMY)).
aux(?V,will*) ==> (future(?V,?DUMMY)).
aux(?V,may*) ==> (possible(?V,?DUMMY)).
aux(?V,might*) ==> (possible(?V,?DUMMY)).
aux(?V,can*) ==> (possible(?V,?DUMMY)).
aux(?V,could*) ==> (possible(?V,?DUMMY)).
aux(?V,must*) ==> (necessary(?V,?DUMMY)).
aux(?V,should*) ==> (possible(?V,?DUMMY)).
aux(?V,should*) ==> (possible(?V,?DUMMY)).
aux(?V,must*) ==> (possible(?V,?DUMMY)).

; passive auxiliary
; auxpass(?X,?Y), -past(?X,?DUMMY) ==> (past(?X,?DUMMY)).

; coordination

; clausal complement
; HOL

; clausal subject
; HOL

; clausal passive subject
; HOL

; copula

+cop(?X,?Y), sumo(Entity,?Y) ==> !.

+nsubj(?C2,?X), amod(?C2,?C), cop(?C2,be*), det(?C2,?D), sumo(?Y,?C), sumo(Human,?X), isInstanceOf(?Y,Nation) ==>
    (citizen(?X,?Y)).
+nsubj(?C,?X), cop(?C,be*), det(?C,?D), sumo(?Y,?C), sumo(Human,?X), isInstanceOf(?Y,Nation) ==>
    (citizen(?X,?Y)).

nsubj(?N, ?S), cop(?N, ?COP), vmod(?N,?V), sumo(?C,?N) ==> (instance(?S,?C), vmod(?S,?V)).

cop(?A,be*), det(?A,?DET), nsubj(?A,?S), +sumo(?I,?A), isInstanceOf(?I,Attribute) ==> (attribute(?I,?S)).
cop(?A,was*), det(?A,?DET), nsubj(?A,?S), +sumo(?I,?A), isInstanceOf(?I,Attribute) ==> (attribute(?I,?S)).
cop(?A,is*), det(?A,?DET), nsubj(?A,?S), +sumo(?I,?A), isInstanceOf(?I,Attribute) ==> (attribute(?I,?S)).
nsubj(?X,?A), cop(?X,?Y), +sumo(?C,?X), isInstanceOf(?C,Attribute) ==> (attribute(?X,?Y)).
nsubj(?X,?A), cop(?X,?Y), +sumo(?C,?X) ==> (instance(?X,?C)).

attribute(?X,?Y), isInstanceOf(?X,Human), isInstanceOf(?Y,Nation) ==> (citizen(?X,?Y)).
attribute(?X,?Y), sumo(Human,?X), isInstanceOf(?Y,Nation) ==> (citizen(?X,?Y)).

nsubjpass(?X,?Y) ==> (patient(?X,?Y)).

; det(?X,What*), sumo(?O,?X)  ==> (instance(?WHAT,?O)).
; det(?X,Which*), sumo(?O,?X)  ==> (instance(?WHICH,?O)).
; det(?X,Some*)
; det(?X,All*)

; discourse element
; ??Amelia Mary Earhart (July 24, 1897 – July 2, 1937) was an American aviator, one of the first women to fly a plane long distances.

dobj(?E,?Y) ==> (patient(?E,?Y)).

; expletive - not needed?

; goes with

; indirect object
iobj(?X,?Y) ==> (patient(?E,?Y)).

; marker
; mwe

; negation modifier
; note this needs to wrap the entire expression
neg(?V,?N), sumo(?C,N) ==> (not(?V,?DUMMY)).
neg(?V,?Y) ==> (not(?X,?DUMMY)).

; noun compound modifier
; noun phrase as adverbial modifer

; nominal subject - copula handles a special case of this
nsubj(?E,?X), equals(?A,?E), isInstanceOf(Process,?A) ==> (agent(?E,?X)).
nsubj(?E,?X), +sumo(?A,?E), isSubclass(?A,Process) ==> (agent(?E,?X)).

nsubjpass(?E,?Y) ==> (patient(?E,?Y)).

quantmod(?X,About*), num(?O,?X) ==> (approximateValue(?X,countid), num(?O,countid)).

num(?O,one*) ==> (num(?O,1)).
num(?O,two*) ==> (num(?O,2)).
num(?O,three*) ==> (num(?O,3)).
num(?O,four*) ==> (num(?O,4)).
num(?O,five*) ==> (num(?O,5)).
num(?O,six*) ==> (num(?O,6)).
num(?O,seven*) ==> (num(?O,7)).
num(?O,eight*) ==> (num(?O,8)).
num(?O,nine*) ==> (num(?O,9)).
num(?O,ten*) ==> (num(?O,10)).
num(?O,eleven*) ==> (num(?O,11)).
num(?O,twelve*) ==> (num(?O,12)).
num(?O,thirteen*) ==> (num(?O,13)).
num(?O,fourteen*) ==> (num(?O,14)).
num(?O,fifteen*) ==> (num(?O,15)).
num(?O,sixteen*) ==> (num(?O,16)).
num(?O,seventeen*) ==> (num(?O,17)).
num(?O,eighteen*) ==> (num(?O,18)).
num(?O,nineteen*) ==> (num(?O,19)).
num(?O,twenty*) ==> (num(?O,20)).

num(?O,?N), +sumo(?C,?O) ==> (instance(?O,Collection), membersType(?O,?C), membersCount(?O,?N)).
num(?dollars*,?N) ==> {(measure ?dollars* (MeasureFn ?NUnitedStatesDollar))}.
; current language doesn't allow functions

; element of compound number

; parataxis

; pcomp - prepositional complement

; pobj - object of a preposition

; preconj: preconjunct - can be ignored?

; predet predeterminer
; looks like another quantifier
predet(?X,?Y) ==> (det(?X,?Y)).

; prep: prepositional modifier

; prepc: prepositional clausal modifier
prepc_without(?X,?Y) ==> (not(?Y,?DUMMY)).

; prt: phrasal verb particle

; punct: punctuation

; quantmod: quantifier phrase modifer
; has to go above

; ref: reference - not in the collapsed model?

; root

root(?X,?Y) ==> !.

; tmod: temporal modifier
tmod(?V,?T) ==> (during(?V,?T)).

; vmod: reduced non-finite verbal modifier
; TODO: suspect rule, overly general

vmod(?S,?V), sumo(?C,?S), isSubclass(?C,Human) ==> (agent(?V,?S)).

; xcomp: open clausal complement

; xsubj controlling subject

advmod(?X,?Y) ==> (attribute(?X,?Y)).
; agent - complement of a passive verb
; agent(?X,?Y) ==> (agent(?X,?Y)).

; adjectival modifier
amod(?X,?Y) ==> (attribute(?X,?Y)).

; appositional modifier
appos(?X,?Y) ==> (equals(?X,?Y)).

; adjectival complement
acomp(?P,?Y), +dobj(?P,?O) ==> (attribute(?O,?Y)).
amod(?X,?Y), sumo(?C,?Y) ==> (attribute(?X,?C)).

;; WSD: most polysemous

; light - 114
; run - 110
; play - 100
; make - 97
; set - 87
; give - 86
; point - 80
; take - 77
; line - 72
; get - 67
; roll - 65
; good - 63
; mark - 62
; go - 60
; dead - 60

;; -------------------------------
;; time and date

day(?T,?D), month(?T,?M), year(?T,?Y), time(?V,?T) ==> {(time ?V (DayFn ?D (MonthFn ?M (YearFn ?Y))))}.
month(?T,?M), year(?T,?Y), time(?V,?T) ==> {(time ?V (MonthFn ?M (YearFn ?Y)))}.
year(?T,?Y), time(?V,?T) ==> {(time ?V (YearFn ?Y))}.
day(?T,?D), month(?T,?M), time(?V,?T) ==> {(time ?V (DayFn ?D (MonthFn ?M (YearFn ?Y))))}.
day(?T,?D), time(?V,?T) ==> {(time ?V (DayFn ?D (MonthFn ?M (YearFn ?Y))))}.

day(?T,?D), month(?T,?M), year(?T,?Y), BirthDate(?V,?T) ==> {(birthdate ?V (DayFn ?D (MonthFn ?M (YearFn ?Y))))}.
month(?T,?M), year(?T,?Y), BirthDate(?V,?T) ==> {(birthdate ?V (MonthFn ?M (YearFn ?Y)))}.
year(?T,?Y), BirthDate(?V,?T) ==> {(birthdate ?V (YearFn ?Y))}.
day(?T,?D), month(?T,?M), BirthDate(?V,?T) ==> {(birthdate ?V (DayFn ?D (MonthFn ?M (YearFn ?Y))))}.
day(?T,?D), BirthDate(?V,?T) ==> {(birthdate ?V (DayFn ?D (MonthFn ?M (YearFn ?Y))))}.

day(?T,?D), month(?T,?M), year(?T,?Y), DeathDate(?V,?T) ==> {(deathdate ?V (DayFn ?D (MonthFn ?M (YearFn ?Y))))}.
month(?T,?M), year(?T,?Y), DeathDate(?V,?T) ==> {(birthdate ?V (MonthFn ?M (YearFn ?Y)))}.
year(?T,?Y), DeathDate(?V,?T) ==> {(deathdate ?V (YearFn ?Y))}.
day(?T,?D), month(?T,?M), DeathDate(?V,?T) ==> {(deathdate ?V (DayFn ?D (MonthFn ?M (YearFn ?Y))))}.
day(?T,?D), DeathDate(?V,?T) ==> {(deathdate ?V (DayFn ?D (MonthFn ?M (YearFn ?Y))))}.

; TODO hour, minute, second

day(?T,?D), month(?T,?M), year(?T,?Y), StartTime(?V,?T) ==> {(equal (BeginFn (WhenFn ?V)) (DayFn ?D (MonthFn ?M (YearFn ?Y))))}.
month(?T,?M), year(?T,?Y), StartTime(?V,?T) ==> {(equal (BeginFn (WhenFn ?V)) (MonthFn ?M (YearFn ?Y)))}.
year(?T,?Y), StartTime(?V,?T) ==> {(equal (BeginFn (WhenFn ?V)) (YearFn ?Y))}.
day(?T,?D), month(?T,?M), StartTime(?V,?T) ==> {(equal (BeginFn (WhenFn ?V)) (DayFn ?D (MonthFn ?M (YearFn ?Y))))}.
day(?T,?D), StartTime(?V,?T) ==> {(equal (BeginFn (WhenFn ?V)) (DayFn ?D (MonthFn ?M (YearFn ?Y))))}.

day(?T,?D), month(?T,?M), year(?T,?Y), EndTime(?V,?T) ==> {(equal (EndFn (WhenFn ?V)) (DayFn ?D (MonthFn ?M (YearFn ?Y))))}.
month(?T,?M), year(?T,?Y), EndTime(?V,?T) ==> {(equal (EndFn (WhenFn ?V)) (MonthFn ?M (YearFn ?Y)))}.
year(?T,?Y), EndTime(?V,?T) ==> {(equal (EndFn (WhenFn ?V)) (YearFn ?Y))}.
day(?T,?D), month(?T,?M), EndTime(?V,?T) ==> {(equal (EndFn (WhenFn ?V)) (DayFn ?D (MonthFn ?M (YearFn ?Y))))}.
day(?T,?D), EndTime(?V,?T) ==> {(equal (EndFn (WhenFn ?V)) (DayFn ?D (MonthFn ?M (YearFn ?Y))))}.

;; -------------------------------

sumo(?O,?X) ==> (instance(?X,?O)).
instance(?I,?C), isInstanceOf(?C,Entity) ==> (equals(?I,?C)).

agent(?X,?Y) ==> {(agent ?X ?Y)}.
approximateValue(?X,?Y) ==> {(approximateValue ?X ?Y)}.
authors(?X,?Y) ==> {(authors ?X ?Y)}.
attribute(?X,?Y) ==> {(attribute ?X ?Y)}.
causes(?X,?Y) ==> {(causes ?X ?Y)}.
citizen(?X,?Y) ==> {(citizen ?X ?Y)}.
destination(?X,?Y) ==> {(destination ?X ?Y)}.
dislikes(?X,?Y) ==> {(dislikes ?X ?Y)}.
duration(?X,?Y) ==> {(duration ?X ?Y)}.
equals(?X,?Y) ==> {(equals ?X ?Y)}.
greaterThan(?X,?Y) ==> {(greaterThan ?X ?Y)}.
inhabits(?X,?Y) ==> {(inhabits ?X ?Y)}.
instance(?X,?Y) ==> {(instance ?X ?Y)}.
located(?X,?Y) ==> {(located ?X ?Y)}.
membersType(?X,?Y) ==> {(membersType ?X ?Y)}.
membersCount(?X,?Y) ==> {(membersCount ?X ?Y)}.
names(?X,?Y) ==> {(names ?X ?Y)}.
lessThan(?X,?Y) ==> {(lessThan ?X ?Y)}.
;orientation(?X,?Y,?Z) ==> {(orientation ?X ?Y ?Z)}.
origin(?X,?Y) ==> {(origin ?X ?Y)}.
patient(?X,?Y) ==> {(patient ?X ?Y)}.
properlyFills(?X,?Y) ==> {(properlyFills ?X ?Y)}.
possesses(?X,?Y) ==> {(possesses ?X ?Y)}.
refers(?X,?Y) ==> {(refers ?X ?Y)}.
traverses(?X,?Y) ==> {(traverses ?X ?Y)}.
time(?X,?Y) ==> {(time ?X ?Y)}.
BirthDate(?X,?Y) ==> {(birthdate ?X ?Y)}.
DeathDate(?X,?Y) ==> {(deathdate ?X ?Y)}.

past(?V,DUMMY) ==> {(earlier (WhenFn ?V) Now)}.
future(?V,DUMMY) ==> {(earlier Now (WhenFn ?V))}.

; time TimeMeasure, Process
; person Human, OccupationalRole, SocialRole
; object all others

; mass Substance, Food, and special words such as
;      money/furniture/data/life/beauty/truth/crime/law/education
; count all others
